{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/services/reportService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002';\n\n// Create axios instance with auth header\nconst axiosInstance = axios.create({\n  baseURL: `${API_URL}/api/reports`,\n});\n\n// Add request interceptor to include auth token\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Get sales report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getSalesReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/sales', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching sales report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get current stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getCurrentStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/current-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching current stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get gold stock report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getGoldStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/gold-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching gold stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get low stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getLowStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/low-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching low stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory valuation report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryValuationReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/valuation', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory valuation report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get customer report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomerReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/customers', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching customer report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get financial report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getFinancialReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/financial', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching financial report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as CSV\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportCSV = async (reportType, params = {}) => {\n  try {\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, ...params },\n      responseType: 'blob'\n    });\n\n    // Create a download link and trigger download\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const date = new Date().toISOString().split('T')[0];\n    link.setAttribute('download', `${reportType}_report_${date}.csv`);\n\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get custom report data\n * @param {Object} config - Custom report configuration\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomReport = async (config) => {\n  try {\n    // This would be implemented to handle custom report requests\n    // For now, we'll just return a mock response\n    return {\n      success: true,\n      message: 'Custom report functionality will be implemented here',\n      config\n    };\n  } catch (error) {\n    console.error('Error generating custom report:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/reports/inventory/valuation/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { PieChart, Filter, Download, Printer, ArrowLeft, RefreshCw } from 'lucide-react';\nimport Link from 'next/link';\nimport { getInventoryValuationReport } from '@/services/reportService';\nimport { PieChart as RechartsPieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\n\ninterface Branch {\n  branch_id: number;\n  branch_name: string;\n}\n\ninterface CategoryValuation {\n  category: string;\n  itemCount: number;\n  totalQuantity: number;\n  totalSellingValue: number;\n  totalCostValue: number;\n  totalPotentialProfit: number;\n}\n\ninterface BranchValuation {\n  branch_id: number;\n  branch_name: string;\n  itemCount: number;\n  totalQuantity: number;\n  totalSellingValue: number;\n  totalCostValue: number;\n  totalPotentialProfit: number;\n}\n\ninterface ValuationData {\n  branches: Branch[];\n  selectedBranch: number | null;\n  summary: {\n    totalItems: number;\n    totalQuantity: number;\n    totalSellingValue: number;\n    totalCostValue: number;\n    totalPotentialProfit: number;\n  };\n  categories: CategoryValuation[];\n  branchValuation: BranchValuation[];\n}\n\n// Colors for pie chart\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#8dd1e1'];\n\nexport default function InventoryValuationReportPage() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [valuationData, setValuationData] = useState<ValuationData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedBranch, setSelectedBranch] = useState<number | null>(null);\n\n  // Format currency\n  const formatCurrency = (amount: number) => {\n    return `LKR ${amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  // Fetch valuation data\n  const fetchValuationData = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Build query parameters\n      const params: any = {};\n      if (selectedBranch) {\n        params.branchId = selectedBranch;\n      }\n\n      const data = await getInventoryValuationReport(params);\n      setValuationData(data);\n    } catch (err) {\n      console.error('Error fetching inventory valuation data:', err);\n      setError('Failed to load inventory valuation data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch data on initial load and when branch filter changes\n  useEffect(() => {\n    fetchValuationData();\n  }, [selectedBranch]);\n\n  const handleRefresh = () => {\n    fetchValuationData();\n  };\n\n  // Prepare category pie chart data\n  const prepareCategoryChartData = () => {\n    if (!valuationData?.categories) return [];\n    \n    return valuationData.categories.map(category => ({\n      name: category.category,\n      value: category.totalSellingValue\n    }));\n  };\n\n  // Prepare branch pie chart data\n  const prepareBranchChartData = () => {\n    if (!valuationData?.branchValuation) return [];\n    \n    return valuationData.branchValuation.map(branch => ({\n      name: branch.branch_name,\n      value: branch.totalSellingValue\n    }));\n  };\n\n  // Calculate profit margin\n  const calculateProfitMargin = (sellingValue: number, costValue: number) => {\n    if (costValue === 0) return 0;\n    return ((sellingValue - costValue) / sellingValue) * 100;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with back button */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div className=\"flex items-center\">\n          <Link href=\"/DashView/reports/inventory\" className=\"mr-4\">\n            <ArrowLeft className=\"h-5 w-5 text-gray-500 hover:text-gray-700\" />\n          </Link>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Inventory Valuation Report</h1>\n        </div>\n\n        <div className=\"mt-3 sm:mt-0 flex items-center space-x-3\">\n          <button\n            className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n            onClick={handleRefresh}\n          >\n            {isLoading ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n            )}\n            Refresh\n          </button>\n          <button className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\">\n            <Printer className=\"h-4 w-4 mr-2\" />\n            Print\n          </button>\n          <button className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </button>\n        </div>\n      </div>\n\n      {/* Branch Filter */}\n      <div className=\"bg-white shadow rounded-lg p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label htmlFor=\"branch-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Branch\n            </label>\n            <select\n              id=\"branch-filter\"\n              className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-yellow-500 focus:border-yellow-500 sm:text-sm rounded-md\"\n              value={selectedBranch || ''}\n              onChange={(e) => setSelectedBranch(e.target.value ? Number(e.target.value) : null)}\n            >\n              <option value=\"\">All Branches</option>\n              {valuationData?.branches.map((branch) => (\n                <option key={branch.branch_id} value={branch.branch_id}>\n                  {branch.branch_name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"bg-red-50 border-l-4 border-red-400 p-4\">\n          <div className=\"flex\">\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      ) : valuationData ? (\n        <>\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0 bg-purple-100 rounded-md p-3\">\n                  <PieChart className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Total Items</h3>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{valuationData.summary.totalItems}</p>\n                  <p className=\"text-sm text-gray-500\">Quantity: {valuationData.summary.totalQuantity}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0 bg-purple-100 rounded-md p-3\">\n                  <PieChart className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Total Value</h3>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{formatCurrency(valuationData.summary.totalSellingValue)}</p>\n                  <p className=\"text-sm text-gray-500\">Cost: {formatCurrency(valuationData.summary.totalCostValue)}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0 bg-purple-100 rounded-md p-3\">\n                  <PieChart className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Potential Profit</h3>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{formatCurrency(valuationData.summary.totalPotentialProfit)}</p>\n                  <p className=\"text-sm text-gray-500\">\n                    Margin: {calculateProfitMargin(valuationData.summary.totalSellingValue, valuationData.summary.totalCostValue).toFixed(1)}%\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Category Valuation */}\n          <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n            <div className=\"px-4 py-5 sm:px-6\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Valuation by Category</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Category\n                      </th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Items\n                      </th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Value\n                      </th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Profit Margin\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {valuationData.categories.map((category, index) => (\n                      <tr key={index} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                          {category.category}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {category.itemCount}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {formatCurrency(category.totalSellingValue)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {calculateProfitMargin(category.totalSellingValue, category.totalCostValue).toFixed(1)}%\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <RechartsPieChart>\n                    <Pie\n                      data={prepareCategoryChartData()}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {prepareCategoryChartData().map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />\n                    <Legend />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </div>\n\n          {/* Branch Valuation (only if no branch filter) */}\n          {!selectedBranch && valuationData.branchValuation.length > 0 && (\n            <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n              <div className=\"px-4 py-5 sm:px-6\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Valuation by Branch</h3>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Branch\n                        </th>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Items\n                        </th>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Value\n                        </th>\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Profit Margin\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {valuationData.branchValuation.map((branch) => (\n                        <tr key={branch.branch_id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                            {branch.branch_name}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {branch.itemCount}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {formatCurrency(branch.totalSellingValue)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {calculateProfitMargin(branch.totalSellingValue, branch.totalCostValue).toFixed(1)}%\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RechartsPieChart>\n                      <Pie\n                        data={prepareBranchChartData()}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      >\n                        {prepareBranchChartData().map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value) => formatCurrency(Number(value))} />\n                      <Legend />\n                    </RechartsPieChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      ) : (\n        <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4\">\n          <div className=\"flex\">\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-yellow-700\">No inventory valuation data available. Please try refreshing.</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}