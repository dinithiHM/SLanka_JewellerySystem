{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/services/reportService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002';\n\n// Create axios instance with auth header\nconst axiosInstance = axios.create({\n  baseURL: `${API_URL}/api/reports`,\n});\n\n// Add request interceptor to include auth token\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // Try to get token from localStorage\n    let token = localStorage.getItem('token');\n\n    // If token not found in localStorage, try to get it from userInfo\n    if (!token) {\n      const userInfo = localStorage.getItem('userInfo');\n      if (userInfo) {\n        try {\n          const parsedUserInfo = JSON.parse(userInfo);\n          token = parsedUserInfo.token;\n        } catch (e) {\n          console.error('Error parsing userInfo:', e);\n        }\n      }\n    }\n\n    // If token found, add it to headers\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    } else {\n      console.warn('No authentication token found for API request');\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Get sales report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getSalesReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/sales', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching sales report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get current stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getCurrentStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/current-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching current stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get gold stock report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getGoldStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/gold-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching gold stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get low stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getLowStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/low-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching low stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory valuation report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryValuationReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/valuation', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory valuation report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get customer report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomerReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/customers', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching customer report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get financial report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getFinancialReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/financial', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching financial report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as CSV\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportCSV = async (reportType, params = {}) => {\n  try {\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'csv', ...params },\n      responseType: 'blob'\n    });\n\n    // Create a download link and trigger download\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const date = new Date().toISOString().split('T')[0];\n    link.setAttribute('download', `${reportType}_report_${date}.csv`);\n\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as PDF\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @param {Object} chartRef - Optional reference to chart component for including in PDF\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportPDF = async (reportType, params = {}, chartRef = null) => {\n  try {\n    // Always get data from the API first\n    let data = [];\n    let filename = `${reportType}_report_${new Date().toISOString().split('T')[0]}`;\n\n    // Get data from the API\n    console.log('Fetching report data from API for', reportType);\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'json', ...params }\n    });\n\n    // Log the response for debugging\n    console.log('API response:', response.data);\n\n    // Check if we have data from the API\n    if (response.data && response.data.data && response.data.data.length > 0) {\n      console.log('Using API data for report');\n      data = response.data.data;\n      filename = response.data.filename || filename;\n    } else {\n      console.log('No data from API, checking for chart data');\n      // If no data from API, try to use chart data as fallback\n      if (chartRef && chartRef.current) {\n        try {\n          // Create data from the chart for PDF\n          const chartData = window.chartData || [];\n\n          if (chartData && chartData.length > 0) {\n            console.log('Using chart data for report');\n            data = chartData;\n          } else {\n            console.log('No chart data available');\n          }\n        } catch (chartError) {\n          console.error('Error getting chart data:', chartError);\n        }\n      }\n    }\n\n    // Get user info from server response or fallback to localStorage\n    let userName = 'System User';\n\n    // Check if the server provided a user name in the response\n    if (response.data && response.data.generatedBy) {\n      console.log('Using server-provided user name:', response.data.generatedBy);\n      userName = response.data.generatedBy;\n    } else {\n      // Fallback to localStorage if server didn't provide a name\n      const userInfo = JSON.parse(localStorage.getItem('userInfo')) || { name: 'System User' };\n      console.log('Using localStorage user name:', userInfo.name);\n      userName = userInfo.name;\n    }\n\n    // Import jsPDF and autoTable dynamically\n    const { jsPDF } = await import('jspdf');\n    const { default: autoTable } = await import('jspdf-autotable');\n\n    // Create a new PDF document\n    const doc = new jsPDF();\n\n    // Add company header\n    doc.setFontSize(22);\n    doc.setTextColor(184, 134, 11); // Gold color\n    doc.text(\"S Lanaka Jewellery\", 105, 15, { align: 'center' });\n\n    // Add title\n    let title = 'Report';\n    let titleColor = [184, 134, 11]; // Default gold color\n\n    switch (reportType) {\n      case 'current-stock':\n        title = 'Current Stock Report';\n        titleColor = [0, 128, 0]; // Green\n        break;\n      case 'gold-stock':\n        title = 'Gold Stock Report';\n        titleColor = [184, 134, 11]; // Gold\n        break;\n      case 'low-stock':\n        title = 'Low Stock Report';\n        titleColor = [255, 0, 0]; // Red\n        break;\n      case 'valuation':\n        title = 'Inventory Valuation Report';\n        titleColor = [0, 0, 128]; // Navy\n        break;\n      case 'sales-daily':\n        title = 'Daily Sales Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n      case 'sales-monthly':\n        title = 'Monthly Sales Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n      case 'sales-category':\n        title = 'Sales by Category Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n      case 'sales-branch':\n        title = 'Sales by Branch Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n    }\n\n    // Add report title\n    doc.setFontSize(18);\n    doc.setTextColor(titleColor[0], titleColor[1], titleColor[2]);\n    doc.text(title, 105, 25, { align: 'center' });\n\n    // Add date and user info\n    doc.setFontSize(10);\n    doc.setTextColor(100, 100, 100);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()} by ${userName}`, 105, 32, { align: 'center' });\n\n    // Add decorative line\n    doc.setDrawColor(titleColor[0], titleColor[1], titleColor[2]);\n    doc.setLineWidth(0.5);\n    doc.line(14, 35, 196, 35);\n\n    // Set starting Y position for the table\n    let yPos = 40;\n\n    // For sales reports, ensure we have the correct columns in the right order\n    let formattedData = data;\n    let headers = [];\n\n    if (reportType.startsWith('sales-') && data.length > 0) {\n      // Define the expected columns for sales reports\n      const expectedColumns = [\n        'sale_id', 'sale_date', 'total_amount', 'discount',\n        'payment_method', 'customer_name', 'branch_name', 'employee_name'\n      ];\n\n      // Format the headers\n      headers = [\n        'Sale ID', 'Sale Date', 'Total Amount', 'Discount',\n        'Payment Method', 'Customer Name', 'Branch Name', 'Employee Name'\n      ];\n\n      // Ensure data has all expected columns in the right order\n      formattedData = data.map(item => {\n        const formattedItem = {};\n        expectedColumns.forEach(col => {\n          formattedItem[col] = item[col] !== undefined ? item[col] : 'N/A';\n        });\n        return formattedItem;\n      });\n    } else {\n      // For other reports, use the default approach\n      headers = Object.keys(data[0] || {}).map(header => {\n        // Convert camelCase or snake_case to Title Case with spaces\n        return header\n          .replace(/_/g, ' ')\n          .replace(/([A-Z])/g, ' $1')\n          .replace(/^./, str => str.toUpperCase())\n          .trim();\n      });\n    }\n\n    // Format data for autoTable\n    const tableData = formattedData.map(item => {\n      return Object.values(item);\n    });\n\n    // Define gold-themed colors for different report types\n    let headColor, alternateColor;\n\n    switch (true) {\n      case reportType.startsWith('sales-'):\n        headColor = [75, 0, 130]; // Deep purple for sales\n        alternateColor = [245, 245, 255]; // Light purple-ish\n        break;\n      case reportType === 'gold-stock':\n        headColor = [184, 134, 11]; // Gold\n        alternateColor = [255, 248, 220]; // Cornsilk\n        break;\n      case reportType === 'current-stock':\n        headColor = [0, 128, 0]; // Green\n        alternateColor = [240, 255, 240]; // Honeydew\n        break;\n      case reportType === 'low-stock':\n        headColor = [178, 34, 34]; // Firebrick\n        alternateColor = [255, 240, 240]; // Light red\n        break;\n      case reportType === 'valuation':\n        headColor = [0, 0, 128]; // Navy\n        alternateColor = [240, 248, 255]; // Alice blue\n        break;\n      default:\n        headColor = [218, 165, 32]; // Goldenrod (default)\n        alternateColor = [253, 245, 230]; // Light gold\n        break;\n    }\n\n    // Check if we have data to display in the table\n    if (tableData.length > 0) {\n      console.log('Creating table with data:', tableData.length, 'rows');\n\n      // Create table with gold-themed styling\n      autoTable(doc, {\n        head: [headers],\n        body: tableData,\n        startY: yPos,\n        styles: {\n          fontSize: 8,\n          cellPadding: 3,\n          lineColor: [200, 200, 200]\n        },\n        headStyles: {\n          fillColor: headColor,\n          textColor: [255, 255, 255],\n          fontStyle: 'bold',\n          halign: 'center'\n        },\n        alternateRowStyles: {\n          fillColor: alternateColor\n        },\n        columnStyles: {\n          // Apply specific formatting based on report type\n          ...(reportType === 'sales-daily' ? {\n            0: { halign: 'center' },  // Sale ID\n            1: { halign: 'center' },  // Sale Date\n            2: { halign: 'right' },   // Total Amount\n            3: { halign: 'right' },   // Discount\n            4: { halign: 'center' },  // Payment Method\n            5: { halign: 'left' },    // Customer Name\n            6: { halign: 'left' },    // Branch Name\n            7: { halign: 'left' }     // Employee Name\n          } : reportType === 'sales-monthly' ? {\n            0: { halign: 'center' },  // Month\n            1: { halign: 'right' },   // Sales Amount\n            2: { halign: 'center' },  // Transactions\n            3: { halign: 'right' }    // Average\n          } : {\n            // Default formatting for other reports\n            2: { halign: 'right' },\n            3: { halign: 'right' },\n            4: { halign: 'right' }\n          })\n        },\n        didDrawPage: () => {\n          // Add footer with page numbers\n          doc.setFontSize(8);\n          doc.setTextColor(100, 100, 100);\n          doc.text(\n            `S Lanaka Jewellery - Page ${doc.internal.getNumberOfPages()}`,\n            105,\n            doc.internal.pageSize.height - 10,\n            { align: 'center' }\n          );\n        }\n      });\n    } else {\n      console.log('No data for table, skipping table creation');\n      // Add a message indicating no data\n      doc.setFontSize(12);\n      doc.setTextColor(100, 100, 100);\n      doc.text(\"No data available for the selected filters\", 105, yPos + 20, { align: 'center' });\n\n      // Update yPos for chart placement\n      yPos += 30;\n    }\n\n    // Get the final Y position after the table\n    // Use the current yPos if no table was created or autoTable is not available\n    let finalY = yPos;\n    if (doc.autoTable && doc.autoTable.previous) {\n      finalY = doc.autoTable.previous.finalY;\n      console.log('Final Y position from autoTable:', finalY);\n    } else {\n      console.log('Using default Y position:', finalY);\n    }\n\n    // Always add a page break for the chart\n    doc.addPage();\n\n    // Add chart after the table if available (for sales reports)\n    if (reportType.startsWith('sales-')) {\n      try {\n        console.log('Adding chart to PDF on new page');\n\n        // Add a title for the chart section\n        doc.setFontSize(16);\n        doc.setTextColor(titleColor[0], titleColor[1], titleColor[2]);\n        doc.text(\"Sales Trend Chart\", 105, 20, { align: 'center' });\n\n        // Create a simple chart directly in the PDF\n        if (typeof window !== 'undefined' && window.chartData) {\n          // Validate chart data\n          if (!Array.isArray(window.chartData)) {\n            console.error('Chart data is not an array:', window.chartData);\n            throw new Error('Invalid chart data format');\n          }\n\n          if (window.chartData.length === 0) {\n            console.warn('Chart data array is empty');\n            doc.setFontSize(12);\n            doc.setTextColor(100, 100, 100);\n            doc.text(\n              \"No data available for chart visualization\",\n              105,\n              60,\n              { align: 'center' }\n            );\n            return;\n          }\n\n          const chartData = window.chartData;\n          console.log('Using chart data from window object:', chartData.length, 'data points');\n\n          // Set up chart dimensions for A4 page (210 x 297 mm)\n          const pageWidth = doc.internal.pageSize.width;\n\n          // Center the chart on the page with proper margins\n          const chartX = 25;\n          const chartY = 40;\n          const chartWidth = pageWidth - 50; // 25mm margins on each side\n          const chartHeight = 120; // Taller chart\n\n          // Calculate bar spacing and width based on data points\n          // Adjust based on number of data points to prevent overcrowding\n          const maxBars = Math.min(chartData.length, 15); // Limit to 15 data points max\n          const barSpacing = chartWidth / (maxBars * 2);\n          const barWidth = Math.min(barSpacing * 0.8, 12); // Limit max width\n\n          // Find max values for scaling\n          let maxAmount = 0;\n          let maxTransactions = 0;\n\n          // Validate and find max values\n          chartData.forEach(item => {\n            // Ensure values are numbers and valid\n            if (item && typeof item.amount !== 'undefined') {\n              const amount = typeof item.amount === 'number' ? item.amount : parseFloat(item.amount) || 0;\n              maxAmount = Math.max(maxAmount, amount);\n            }\n\n            if (item && typeof item.transactions !== 'undefined') {\n              const transactions = typeof item.transactions === 'number' ? item.transactions : parseFloat(item.transactions) || 0;\n              maxTransactions = Math.max(maxTransactions, transactions);\n            }\n          });\n\n          console.log('Chart max values:', { maxAmount, maxTransactions });\n\n          // Ensure we have non-zero max values\n          if (maxAmount <= 0) maxAmount = 1000;\n          if (maxTransactions <= 0) maxTransactions = 10;\n\n          // Add some padding to max values\n          maxAmount = maxAmount * 1.1;\n          maxTransactions = maxTransactions * 1.1;\n\n          // Draw chart axes\n          doc.setDrawColor(200, 200, 200);\n          doc.setLineWidth(0.5);\n\n          // Y-axis\n          doc.line(chartX, chartY, chartX, chartY + chartHeight);\n\n          // X-axis\n          doc.line(chartX, chartY + chartHeight, chartX + chartWidth, chartY + chartHeight);\n\n          // Determine which data points to show if we have too many\n          let dataToShow = chartData;\n          if (chartData.length > maxBars) {\n            // If we have too many data points, sample them evenly\n            const step = Math.ceil(chartData.length / maxBars);\n            dataToShow = [];\n            for (let i = 0; i < chartData.length; i += step) {\n              dataToShow.push(chartData[i]);\n            }\n            // Always include the last data point\n            if (dataToShow[dataToShow.length - 1] !== chartData[chartData.length - 1]) {\n              dataToShow.push(chartData[chartData.length - 1]);\n            }\n          }\n\n          // Draw chart based on report type\n          if (reportType === 'sales-monthly') {\n            // Check if we have enough data points for a line chart\n            if (dataToShow.length <= 1) {\n              // Not enough data for a line chart\n              doc.setFontSize(12);\n              doc.setTextColor(100, 100, 100);\n              doc.text(\n                \"Not enough data points for chart visualization\",\n                chartX + chartWidth / 2,\n                chartY + chartHeight / 2,\n                { align: 'center' }\n              );\n              return; // Exit early\n            }\n\n            // Draw line chart for monthly data\n            const pointSpacing = chartWidth / (Math.max(dataToShow.length - 1, 1));\n\n            // Draw lines\n            // Amount line (dark gold)\n            doc.setDrawColor(184, 134, 11); // DarkGoldenRod\n            doc.setLineWidth(2);\n\n            // Draw amount line\n            let prevX, prevY;\n            dataToShow.forEach((item, index) => {\n              // Skip items with invalid data\n              if (typeof item.amount !== 'number' || isNaN(item.amount)) {\n                console.warn('Invalid amount value in chart data:', item);\n                return;\n              }\n\n              const x = chartX + (index * pointSpacing);\n              const y = chartY + chartHeight - ((item.amount / maxAmount) * chartHeight);\n\n              // Draw point\n              doc.setFillColor(184, 134, 11); // DarkGoldenRod\n              doc.circle(x, y, 3, 'F');\n\n              // Draw line segment\n              if (index > 0 && prevX !== undefined && prevY !== undefined) {\n                doc.line(prevX, prevY, x, y);\n              }\n\n              prevX = x;\n              prevY = y;\n            });\n\n            // Transactions line (gold)\n            doc.setDrawColor(218, 165, 32); // GoldenRod\n            doc.setLineWidth(2);\n\n            // Draw transactions line\n            prevX = undefined;\n            prevY = undefined;\n            dataToShow.forEach((item, index) => {\n              // Skip items with invalid data\n              if (typeof item.transactions !== 'number' || isNaN(item.transactions)) {\n                console.warn('Invalid transactions value in chart data:', item);\n                return;\n              }\n\n              const x = chartX + (index * pointSpacing);\n              const y = chartY + chartHeight - ((item.transactions / maxTransactions) * chartHeight);\n\n              // Draw point\n              doc.setFillColor(218, 165, 32); // GoldenRod\n              doc.circle(x, y, 3, 'F');\n\n              // Draw line segment\n              if (index > 0 && prevX !== undefined && prevY !== undefined) {\n                doc.line(prevX, prevY, x, y);\n              }\n\n              prevX = x;\n              prevY = y;\n\n              // Add month label\n              doc.setFontSize(7);\n              doc.setTextColor(100, 100, 100);\n\n              // Rotate labels if we have many data points\n              if (dataToShow.length > 7) {\n                doc.text(\n                  item.month || item.date,\n                  x,\n                  chartY + chartHeight + 10,\n                  {\n                    align: 'right',\n                    angle: 45\n                  }\n                );\n              } else {\n                doc.text(\n                  item.month || item.date,\n                  x,\n                  chartY + chartHeight + 8,\n                  { align: 'center' }\n                );\n              }\n            });\n          } else {\n            // Draw bar chart for daily data\n            dataToShow.forEach((item, index) => {\n              const x = chartX + (index * barSpacing * 2) + barSpacing;\n\n              // Amount bar (dark gold)\n              const amountHeight = (item.amount / maxAmount) * chartHeight;\n              doc.setFillColor(184, 134, 11); // DarkGoldenRod\n              doc.rect(\n                x,\n                chartY + chartHeight - amountHeight,\n                barWidth,\n                amountHeight,\n                'F'\n              );\n\n              // Transactions bar (gold)\n              const transactionsHeight = (item.transactions / maxTransactions) * chartHeight;\n              doc.setFillColor(218, 165, 32); // GoldenRod\n              doc.rect(\n                x + barWidth,\n                chartY + chartHeight - transactionsHeight,\n                barWidth,\n                transactionsHeight,\n                'F'\n              );\n\n              // Add date label\n              doc.setFontSize(7);\n              doc.setTextColor(100, 100, 100);\n\n              // Rotate labels if we have many data points\n              if (dataToShow.length > 7) {\n                doc.text(\n                  item.date,\n                  x + barWidth / 2,\n                  chartY + chartHeight + 10,\n                  {\n                    align: 'right',\n                    angle: 45\n                  }\n                );\n              } else {\n                doc.text(\n                  item.date,\n                  x + barWidth / 2,\n                  chartY + chartHeight + 8,\n                  { align: 'center' }\n                );\n              }\n            });\n          }\n\n          // Calculate legend position based on chart dimensions\n          const legendY = chartY + chartHeight + (dataToShow.length > 7 ? 25 : 15);\n\n          // Add legend with better spacing\n          doc.setFillColor(184, 134, 11); // DarkGoldenRod\n          doc.rect(chartX, legendY, 10, 5, 'F');\n          doc.setFontSize(9);\n          doc.setTextColor(50, 50, 50);\n          doc.text('Sales Amount', chartX + 15, legendY + 4);\n\n          doc.setFillColor(218, 165, 32); // GoldenRod\n          doc.rect(chartX + 80, legendY, 10, 5, 'F');\n          doc.text('Transactions', chartX + 95, legendY + 4);\n\n          // Add grid lines for better readability\n          doc.setDrawColor(220, 220, 220);\n          doc.setLineWidth(0.2);\n\n          // Horizontal grid lines\n          for (let i = 1; i < 4; i++) {\n            const y = chartY + (chartHeight / 4) * i;\n            doc.line(chartX, y, chartX + chartWidth, y);\n          }\n\n          // Add Y-axis labels with better formatting\n          doc.setFontSize(8);\n          doc.setTextColor(80, 80, 80);\n\n          // Format large numbers with K/M suffix\n          const formatLargeNumber = (num) => {\n            if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n            if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n            return num.toString();\n          };\n\n          // Amount labels (left)\n          doc.text(\n            formatLargeNumber(maxAmount),\n            chartX - 3,\n            chartY + 5,\n            { align: 'right' }\n          );\n          doc.text(\n            formatLargeNumber(maxAmount * 0.75),\n            chartX - 3,\n            chartY + (chartHeight * 0.25),\n            { align: 'right' }\n          );\n          doc.text(\n            formatLargeNumber(maxAmount * 0.5),\n            chartX - 3,\n            chartY + (chartHeight * 0.5),\n            { align: 'right' }\n          );\n          doc.text(\n            formatLargeNumber(maxAmount * 0.25),\n            chartX - 3,\n            chartY + (chartHeight * 0.75),\n            { align: 'right' }\n          );\n          doc.text('0', chartX - 3, chartY + chartHeight, { align: 'right' });\n\n          // Transactions labels (right)\n          doc.text(\n            formatLargeNumber(maxTransactions),\n            chartX + chartWidth + 3,\n            chartY + 5,\n            { align: 'left' }\n          );\n          doc.text(\n            formatLargeNumber(maxTransactions * 0.75),\n            chartX + chartWidth + 3,\n            chartY + (chartHeight * 0.25),\n            { align: 'left' }\n          );\n          doc.text(\n            formatLargeNumber(maxTransactions * 0.5),\n            chartX + chartWidth + 3,\n            chartY + (chartHeight * 0.5),\n            { align: 'left' }\n          );\n          doc.text(\n            formatLargeNumber(maxTransactions * 0.25),\n            chartX + chartWidth + 3,\n            chartY + (chartHeight * 0.75),\n            { align: 'left' }\n          );\n          doc.text('0', chartX + chartWidth + 3, chartY + chartHeight, { align: 'left' });\n\n          // Add axis titles\n          doc.setFontSize(8);\n          doc.setTextColor(184, 134, 11); // DarkGoldenRod\n          doc.text(\n            \"Sales Amount (LKR)\",\n            chartX - 15,\n            chartY - 10,\n            { angle: 90 }\n          );\n\n          doc.setTextColor(218, 165, 32); // GoldenRod\n          doc.text(\n            \"Transactions\",\n            chartX + chartWidth + 15,\n            chartY - 10,\n            { angle: 270 }\n          );\n\n          // Add a note about the chart\n          doc.setFontSize(8);\n          doc.setTextColor(100, 100, 100);\n          doc.text(\n            \"Chart shows sales amount and transaction count trends over the selected period\",\n            105,\n            legendY + 20,\n            { align: 'center' }\n          );\n        } else {\n          // If no chart data is available, add a message\n          doc.setFontSize(12);\n          doc.setTextColor(100, 100, 100);\n          doc.text(\n            \"Chart visualization not available - no data\",\n            105,\n            60,\n            { align: 'center' }\n          );\n          console.log('No chart data available in window.chartData');\n        }\n      } catch (chartErr) {\n        console.error('Error adding chart to PDF:', chartErr);\n        // If there's an error, add a message\n        doc.setFontSize(12);\n        doc.setTextColor(100, 100, 100);\n        doc.text(\n          \"Chart visualization not available - error occurred\",\n          105,\n          60,\n          { align: 'center' }\n        );\n      }\n    } else {\n      console.log('Chart not added to PDF - not a sales report');\n    }\n\n    // Save the PDF\n    doc.save(`${filename}.pdf`);\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report as PDF:', error);\n    throw error;\n  }\n};\n\n/**\n * Get custom report data\n * @param {Object} config - Custom report configuration\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomReport = async (config) => {\n  try {\n    // This would be implemented to handle custom report requests\n    // For now, we'll just return a mock response\n    return {\n      success: true,\n      message: 'Custom report functionality will be implemented here',\n      config\n    };\n  } catch (error) {\n    console.error('Error generating custom report:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 725, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 731, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/reports/sales/monthly/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Calendar, Filter, Download, Printer, LineChart as LineChartIcon, RefreshCw, ArrowLeft, FileText } from 'lucide-react';\nimport Link from 'next/link';\nimport { getSalesReport, exportReportCSV, exportReportPDF } from '@/services/reportService';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\n\n// Extend Window interface to include chartData\ndeclare global {\n  interface Window {\n    chartData?: any[];\n  }\n}\n\ninterface SalesData {\n  summary: {\n    totalSales: number;\n    totalTransactions: number;\n    averageOrderValue: number;\n  };\n  salesByDay: {\n    date: string;\n    amount: number;\n    transactions: number;\n  }[];\n  topCategories: {\n    category_name: string;\n    totalQuantity: number;\n    totalAmount: number;\n  }[];\n  topProducts: {\n    item_name: string;\n    totalQuantity: number;\n    totalAmount: number;\n  }[];\n  recentSales: {\n    sale_id: number;\n    customer_name: string;\n    total_amount: number;\n    payment_method: string;\n    sale_date: string;\n    branch_id: number;\n    branch_name: string;\n  }[];\n  branches: {\n    branch_id: number;\n    branch_name: string;\n  }[];\n  paymentMethods: {\n    payment_method: string;\n    count: number;\n    total: number;\n  }[];\n  period: string;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\nexport default function MonthlySalesReportPage() {\n  const [dateRange, setDateRange] = useState('last30');\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedBranch, setSelectedBranch] = useState<string>('');\n  const [salesData, setSalesData] = useState<SalesData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isExporting, setIsExporting] = useState(false);\n  const chartRef = useRef<HTMLDivElement>(null);\n\n  // Format currency\n  const formatCurrency = (amount: number) => {\n    return `LKR ${amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  // Fetch sales data\n  const fetchSalesData = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Build query parameters\n      const params: any = { period: dateRange };\n      if (selectedBranch) {\n        params.branchId = selectedBranch;\n      }\n\n      // Use the reportService to fetch data with authentication\n      const data = await getSalesReport(params);\n      setSalesData(data);\n    } catch (err) {\n      console.error('Error fetching sales data:', err);\n      setError('Failed to load sales data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch data on initial load and when filters change\n  useEffect(() => {\n    fetchSalesData();\n  }, [dateRange, selectedBranch]);\n\n  const handleRefresh = () => {\n    fetchSalesData();\n  };\n\n  // Handle export to CSV\n  const handleExportCSV = async () => {\n    try {\n      setIsExporting(true);\n      const params = {\n        period: dateRange,\n        ...(selectedBranch ? { branchId: selectedBranch } : {})\n      };\n      await exportReportCSV('sales-monthly', params);\n    } catch (err) {\n      console.error('Error exporting CSV:', err);\n      setError('Failed to export CSV. Please try again.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Handle export to PDF\n  const handleExportPDF = async () => {\n    try {\n      setIsExporting(true);\n\n      // Prepare chart data and ensure it's stored in window object\n      const chartData = prepareMonthlyChartData();\n      console.log('Chart data for PDF export:', chartData);\n\n      // Validate chart data\n      if (!chartData || chartData.length === 0) {\n        console.warn('No chart data available for export');\n        // Still proceed with export, the PDF generator will handle the empty data case\n      }\n\n      // Make sure the chart data is stored in the window object\n      if (typeof window !== 'undefined') {\n        window.chartData = chartData;\n      }\n\n      // Set a small delay to ensure data is ready\n      setTimeout(async () => {\n        try {\n          const params = {\n            period: dateRange,\n            ...(selectedBranch ? { branchId: selectedBranch } : {})\n          };\n\n          // Export the PDF with chart data\n          await exportReportPDF('sales-monthly', params, chartRef);\n          console.log('PDF export completed');\n        } catch (exportErr) {\n          console.error('Error in export after timeout:', exportErr);\n          setError('Failed to export PDF. Please try again.');\n        } finally {\n          setIsExporting(false);\n        }\n      }, 100);\n    } catch (err) {\n      console.error('Error exporting PDF:', err);\n      setError('Failed to export PDF. Please try again.');\n      setIsExporting(false);\n    }\n  };\n\n  // Handle print\n  const handlePrint = () => {\n    window.print();\n  };\n\n  // Prepare monthly chart data by grouping daily data by month\n  const prepareMonthlyChartData = () => {\n    if (!salesData?.salesByDay || salesData.salesByDay.length === 0) {\n      console.log('No sales data available for chart');\n      return [];\n    }\n\n    console.log('Preparing monthly chart data from', salesData.salesByDay.length, 'daily records');\n\n    const monthlyData: { [key: string]: { month: string, amount: number, transactions: number } } = {};\n\n    // Process each day's data\n    salesData.salesByDay.forEach(day => {\n      try {\n        // Validate the date\n        if (!day.date) {\n          console.warn('Day record missing date:', day);\n          return;\n        }\n\n        const date = new Date(day.date);\n        if (isNaN(date.getTime())) {\n          console.warn('Invalid date in sales data:', day.date);\n          return;\n        }\n\n        const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n        const monthName = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n\n        if (!monthlyData[monthKey]) {\n          monthlyData[monthKey] = {\n            month: monthName,\n            amount: 0,\n            transactions: 0\n          };\n        }\n\n        // Ensure values are numbers\n        const amount = typeof day.amount === 'number' ? day.amount : parseFloat(day.amount) || 0;\n        const transactions = typeof day.transactions === 'number' ? day.transactions : parseFloat(day.transactions) || 0;\n\n        monthlyData[monthKey].amount += amount;\n        monthlyData[monthKey].transactions += transactions;\n      } catch (err) {\n        console.error('Error processing day data:', err, day);\n      }\n    });\n\n    // Convert to array and sort chronologically\n    const result = Object.values(monthlyData).sort((a, b) => {\n      return a.month.localeCompare(b.month);\n    });\n\n    console.log('Prepared monthly chart data:', result);\n    return result;\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header with back button */}\n      <div className=\"flex items-center mb-6\">\n        <Link href=\"/DashView/reports/sales\" className=\"mr-4\">\n          <ArrowLeft className=\"h-5 w-5 text-gray-500 hover:text-gray-700\" />\n        </Link>\n        <h1 className=\"text-2xl font-bold text-gray-900\">Monthly Sales Report</h1>\n      </div>\n\n      {/* Filters and Actions */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4\">\n        <div className=\"flex flex-wrap items-center gap-3\">\n          {/* Date Range Filter */}\n          <div className=\"relative\">\n            <select\n              className=\"appearance-none pl-3 pr-10 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-yellow-500 focus:border-yellow-500 sm:text-sm\"\n              value={dateRange}\n              onChange={(e) => setDateRange(e.target.value)}\n            >\n              <option value=\"last30\">Last 30 Days</option>\n              <option value=\"thisMonth\">This Month</option>\n              <option value=\"lastMonth\">Last Month</option>\n            </select>\n            <Calendar className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n          </div>\n\n          {/* Branch Filter */}\n          <div className=\"relative\">\n            <select\n              className=\"appearance-none pl-3 pr-10 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-yellow-500 focus:border-yellow-500 sm:text-sm\"\n              value={selectedBranch}\n              onChange={(e) => setSelectedBranch(e.target.value)}\n            >\n              <option value=\"\">All Branches</option>\n              {salesData?.branches?.map((branch) => (\n                <option key={branch.branch_id} value={branch.branch_id}>\n                  {branch.branch_name}\n                </option>\n              ))}\n            </select>\n            <Filter className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n          </div>\n\n          {/* Refresh Button */}\n          <button\n            onClick={handleRefresh}\n            className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n          >\n            <RefreshCw className=\"h-4 w-4 mr-1\" />\n            Refresh\n          </button>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          {/* Print Button */}\n          <button\n            className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n            onClick={handlePrint}\n          >\n            <Printer className=\"h-4 w-4 mr-1\" />\n            Print\n          </button>\n\n          {/* Export Button */}\n          <div className=\"relative inline-block text-left\">\n            <div>\n              <button\n                type=\"button\"\n                className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n                id=\"export-menu-button\"\n                aria-expanded=\"true\"\n                aria-haspopup=\"true\"\n                onClick={() => document.getElementById('export-dropdown')?.classList.toggle('hidden')}\n              >\n                <Download className=\"h-4 w-4 mr-1\" />\n                {isExporting ? 'Exporting...' : 'Export'}\n              </button>\n            </div>\n            <div\n              id=\"export-dropdown\"\n              className=\"hidden origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10\"\n              role=\"menu\"\n              aria-orientation=\"vertical\"\n              aria-labelledby=\"export-menu-button\"\n              tabIndex={-1}\n            >\n              <div className=\"py-1\" role=\"none\">\n                <button\n                  className=\"text-gray-700 block w-full text-left px-4 py-2 text-sm hover:bg-gray-100\"\n                  role=\"menuitem\"\n                  tabIndex={-1}\n                  id=\"export-menu-item-0\"\n                  onClick={handleExportCSV}\n                  disabled={isExporting}\n                >\n                  <div className=\"flex items-center\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Export as CSV\n                  </div>\n                </button>\n                <button\n                  className=\"text-gray-700 block w-full text-left px-4 py-2 text-sm hover:bg-gray-100\"\n                  role=\"menuitem\"\n                  tabIndex={-1}\n                  id=\"export-menu-item-1\"\n                  onClick={handleExportPDF}\n                  disabled={isExporting}\n                >\n                  <div className=\"flex items-center\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Export as PDF\n                  </div>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"bg-red-50 border-l-4 border-red-400 p-4 mb-6\">\n          <div className=\"flex\">\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-yellow-500\"></div>\n        </div>\n      ) : (\n        <>\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <div className=\"bg-white p-6 rounded-lg shadow-md border-l-4 border-yellow-500\">\n              <h3 className=\"text-gray-500 text-sm font-medium\">Total Sales</h3>\n              <p className=\"text-2xl font-bold mt-1\">{formatCurrency(salesData?.summary?.totalSales || 0)}</p>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                {salesData?.dateRange?.startDate} to {salesData?.dateRange?.endDate}\n              </p>\n            </div>\n\n            <div className=\"bg-white p-6 rounded-lg shadow-md border-l-4 border-blue-500\">\n              <h3 className=\"text-gray-500 text-sm font-medium\">Transactions</h3>\n              <p className=\"text-2xl font-bold mt-1\">{salesData?.summary?.totalTransactions || 0}</p>\n              <p className=\"text-sm text-gray-500 mt-1\">Total number of sales</p>\n            </div>\n\n            <div className=\"bg-white p-6 rounded-lg shadow-md border-l-4 border-green-500\">\n              <h3 className=\"text-gray-500 text-sm font-medium\">Average Order Value</h3>\n              <p className=\"text-2xl font-bold mt-1\">{formatCurrency(salesData?.summary?.averageOrderValue || 0)}</p>\n              <p className=\"text-sm text-gray-500 mt-1\">Per transaction</p>\n            </div>\n          </div>\n\n          {/* Monthly Sales Chart */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n            <h2 className=\"text-lg font-medium text-gray-900 mb-4\">Monthly Sales Trend</h2>\n            <div className=\"h-80\" ref={chartRef}>\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart\n                  data={prepareMonthlyChartData()}\n                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis\n                    yAxisId=\"left\"\n                    orientation=\"left\"\n                    stroke=\"#B8860B\" // DarkGoldenRod\n                    label={{\n                      value: 'Sales Amount (LKR)',\n                      angle: -90,\n                      position: 'insideLeft',\n                      style: { fill: '#B8860B' }\n                    }}\n                  />\n                  <YAxis\n                    yAxisId=\"right\"\n                    orientation=\"right\"\n                    stroke=\"#DAA520\" // GoldenRod\n                    label={{\n                      value: 'Transactions',\n                      angle: 90,\n                      position: 'insideRight',\n                      style: { fill: '#DAA520' }\n                    }}\n                  />\n                  <Tooltip\n                    formatter={(value, name) => {\n                      if (name === 'amount') return [formatCurrency(Number(value)), 'Sales Amount'];\n                      if (name === 'transactions') return [value, 'Transactions'];\n                      return [value, name];\n                    }}\n                    contentStyle={{\n                      backgroundColor: '#FFF8DC', // Cornsilk\n                      borderColor: '#B8860B', // DarkGoldenRod\n                      border: '1px solid #B8860B'\n                    }}\n                    labelStyle={{ color: '#B8860B' }}\n                  />\n                  <Legend />\n                  <Line\n                    yAxisId=\"left\"\n                    type=\"monotone\"\n                    dataKey=\"amount\"\n                    name=\"Sales Amount\"\n                    stroke=\"#B8860B\" // DarkGoldenRod\n                    strokeWidth={2}\n                    activeDot={{ r: 8 }}\n                  />\n                  <Line\n                    yAxisId=\"right\"\n                    type=\"monotone\"\n                    dataKey=\"transactions\"\n                    name=\"Transactions\"\n                    stroke=\"#DAA520\" // GoldenRod\n                    strokeWidth={2}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Monthly Sales Table */}\n          <div className=\"bg-white shadow rounded-lg mb-6\">\n            <div className=\"px-4 py-5 sm:px-6 flex justify-between items-center\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Monthly Sales Details</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Month\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Sales Amount\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Transactions\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Average\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {prepareMonthlyChartData().map((month) => (\n                    <tr key={month.month} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {month.month}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatCurrency(month.amount)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {month.transactions}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatCurrency(month.amount / month.transactions)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1692, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}