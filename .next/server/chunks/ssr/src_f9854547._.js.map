{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://F%3A/JewelleryWEBApp/front_end/src/components/SupplierCategoryChart.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Label\n} from 'recharts';\n\ninterface SupplierData {\n  supplier_id: string;\n  name: string;\n  category: string;\n  order_count: number;\n}\n\ninterface ChartProps {\n  selectedCategory: string;\n}\n\nconst SupplierCategoryChart: React.FC<ChartProps> = ({ selectedCategory }) => {\n  const [chartData, setChartData] = useState<any[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // Skip API call if no category is selected\n        if (!selectedCategory) {\n          setChartData([]);\n          setLoading(false);\n          return;\n        }\n\n        // Fetch supplier order statistics from the dedicated API endpoint\n        const response = await fetch(`http://localhost:3002/suppliers/order-stats/${selectedCategory}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch supplier statistics: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Process data for the chart\n        const processedData = data.map((item: any) => ({\n          supplier_id: item.supplier_id,\n          name: item.name,\n          orderCount: item.order_count\n        }));\n\n        setChartData(processedData);\n      } catch (err) {\n        console.error('Error fetching chart data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch chart data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [selectedCategory]);\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center h-64\">\n      <div className=\"w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n    </div>;\n  }\n\n  if (error) {\n    return <div className=\"text-red-500\">Error loading chart: {error}</div>;\n  }\n\n  if (chartData.length === 0) {\n    return <div className=\"text-center py-10\">\n      {selectedCategory ?\n        `No data available for ${selectedCategory === 'All' ? 'any category' : `the ${selectedCategory} category`}` :\n        'Please select a category to see supplier performance'}\n    </div>;\n  }\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold mb-6 text-center\">Leading Supplier Expert in the Field</h2>\n      <div className=\"text-right mb-2\">\n        <span className=\"inline-block bg-yellow-400 w-4 h-4 mr-2\"></span>\n        <span className=\"text-sm\">{selectedCategory === 'All' ? 'All Categories' : selectedCategory}</span>\n      </div>\n      <div className=\"text-center text-sm text-gray-500 mb-2\">\n        Showing supplier performance by order count\n      </div>\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart\n            layout=\"vertical\"\n            data={chartData}\n            margin={{ top: 5, right: 30, left: 50, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" horizontal={true} vertical={false} />\n            <XAxis type=\"number\" domain={[0, 'dataMax + 5']} label={{ value: 'Order Times', position: 'bottom', offset: 0 }} />\n            <YAxis\n              type=\"category\"\n              dataKey=\"supplier_id\"\n              width={50}\n              label={{ value: 'Supplier ID', angle: -90, position: 'left' }}\n            />\n            <Tooltip\n              formatter={(value, name) => [`${value} orders`, 'Orders']}\n              labelFormatter={(label) => {\n                const supplier = chartData.find(item => item.supplier_id === label);\n                return supplier ? `${supplier.name} (${label})` : label;\n              }}\n            />\n            <Bar dataKey=\"orderCount\" fill=\"#FFDD00\" barSize={30} />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default SupplierCategoryChart;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file://F%3A/JewelleryWEBApp/front_end/src/app/DashView/supplier-details/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport SupplierCategoryChart from '@/components/SupplierCategoryChart';\nimport { ChevronDown } from 'lucide-react';\n\ninterface Supplier {\n  id: number;\n  supplier_id: string;\n  name: string;\n  address: string;\n  contact_no: string;\n  manufacturing_items: string;\n  category: string;\n}\n\nconst SupplierDetailsPage = () => {\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [categories, setCategories] = useState<string[]>(['All']);\n\n  useEffect(() => {\n    const fetchSuppliers = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(\"http://localhost:3002/suppliers\");\n\n        if (!response.ok) {\n          throw new Error(`Failed to fetch suppliers: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (Array.isArray(data)) {\n          setSuppliers(data);\n\n          // Extract unique categories from suppliers\n          const uniqueCategories = new Set<string>();\n          uniqueCategories.add('All'); // Add 'All' as default option\n\n          data.forEach((supplier) => {\n            if (supplier.category) {\n              uniqueCategories.add(supplier.category);\n            }\n\n            // Also add manufacturing items as categories\n            if (supplier.manufacturing_items) {\n              const items = supplier.manufacturing_items.split(',');\n              items.forEach((item: string) => uniqueCategories.add(item.trim()));\n            }\n          });\n\n          setCategories(Array.from(uniqueCategories));\n        } else {\n          throw new Error(\"Unexpected data format\");\n        }\n      } catch (error) {\n        setError(error instanceof Error ? error.message : \"Failed to fetch suppliers\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSuppliers();\n  }, []);\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center h-64\">\n      <div className=\"w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n    </div>;\n  }\n\n  if (error) {\n    return <div className=\"text-red-500 p-4\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      {/* Supplier Details Table */}\n      <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-bold\">Supplier Details</h2>\n          <button className=\"bg-yellow-400 hover:bg-yellow-500 text-black px-4 py-2 rounded-full font-medium\">\n            Add new Supplier\n          </button>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Name\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Supplier ID\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Address\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Phone No\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Category\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {suppliers.map((supplier) => (\n                <tr key={supplier.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.name}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.supplier_id}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.address}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.contact_no}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.category || 'Not specified'}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Category Selection and Chart */}\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center\">\n            <h3 className=\"text-xl font-medium mr-4\">Select Category</h3>\n            <div className=\"relative\">\n              <select\n                className=\"appearance-none bg-gray-100 border border-gray-300 rounded-md py-2 pl-4 pr-10 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-yellow-500\"\n                value={selectedCategory}\n                onChange={(e) => setSelectedCategory(e.target.value)}\n              >\n                {categories.map((category) => (\n                  <option key={category} value={category}>\n                    {category}\n                  </option>\n                ))}\n              </select>\n              <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <ChevronDown size={16} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Supplier Category Chart */}\n        <SupplierCategoryChart selectedCategory={selectedCategory} />\n      </div>\n    </div>\n  );\n};\n\nexport default SupplierDetailsPage;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}