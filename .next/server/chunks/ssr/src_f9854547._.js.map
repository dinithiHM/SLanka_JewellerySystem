{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/components/SupplierCategoryChart.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer\n} from 'recharts';\n\ninterface ChartProps {\n  selectedCategory: string;\n}\n\ninterface Supplier {\n  supplier_id: string;\n  supplier_name: string;\n  name?: string;\n  category?: string;\n  manufacturing_items?: string;\n}\n\ninterface Order {\n  supplier_id: string;\n  [key: string]: any;\n}\n\ninterface ChartDataItem {\n  supplier_id: string;\n  name: string;\n  orderCount: number;\n}\n\nconst SupplierCategoryChart: React.FC<ChartProps> = ({ selectedCategory }) => {\n  const [chartData, setChartData] = useState<ChartDataItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Skip if no category is selected\n        if (!selectedCategory) {\n          setChartData([]);\n          setLoading(false);\n          return;\n        }\n\n        console.log(`Fetching suppliers for category: ${selectedCategory}`);\n\n        // Add a timestamp to prevent caching and ensure fresh data\n        const timestamp = new Date().getTime();\n\n        // First, fetch all suppliers from the database\n        const suppliersResponse = await fetch(`http://localhost:3002/suppliers?t=${timestamp}`);\n        if (!suppliersResponse.ok) {\n          throw new Error(`Failed to fetch suppliers: ${suppliersResponse.status}`);\n        }\n\n        let suppliers = await suppliersResponse.json() as Supplier[];\n        console.log('Fetched suppliers:', suppliers);\n\n        // Log each supplier's name and ID for debugging\n        suppliers.forEach(supplier => {\n          console.log(`Supplier ID: ${supplier.supplier_id}, Name: ${supplier.supplier_name || supplier.name || 'No name'}, Category: ${supplier.category || 'No category'}`);\n        });\n\n        // Filter suppliers by category if a specific category is selected\n        if (selectedCategory !== 'All') {\n          suppliers = suppliers.filter(supplier =>\n            supplier.category === selectedCategory ||\n            (supplier.manufacturing_items && supplier.manufacturing_items.includes(selectedCategory))\n          );\n          console.log(`Filtered suppliers for category ${selectedCategory}:`, suppliers);\n        }\n\n        // Then, fetch all orders to count them manually (with timestamp to prevent caching)\n        const ordersResponse = await fetch(`http://localhost:3002/suppliers/check-orders-data?t=${timestamp}`);\n        let orders: Order[] = [];\n\n        if (ordersResponse.ok) {\n          orders = await ordersResponse.json();\n          console.log('Fetched orders:', orders);\n        } else {\n          console.warn('Could not fetch orders, will show suppliers with zero orders');\n        }\n\n        // Count orders for each supplier\n        const orderCountMap: Record<string, number> = {};\n        if (orders && orders.length > 0) {\n          orders.forEach((order: Order) => {\n            if (order.supplier_id) {\n              orderCountMap[order.supplier_id] = (orderCountMap[order.supplier_id] || 0) + 1;\n            }\n          });\n        }\n\n        console.log('Order counts by supplier:', orderCountMap);\n\n        // Create chart data with real suppliers and their order counts\n        const realData: ChartDataItem[] = suppliers.map((supplier: Supplier) => {\n          // Get the actual name from the supplier data\n          // Check all possible name fields and use the first one that exists\n          let supplierName = '';\n\n          if (supplier.name && supplier.name !== '') {\n            supplierName = supplier.name;\n          } else if (supplier.supplier_name && supplier.supplier_name !== '') {\n            supplierName = supplier.supplier_name;\n          } else {\n            // If no name is found, use a generic name but log this issue\n            supplierName = `Unknown Supplier ${supplier.supplier_id}`;\n            console.warn(`No name found for supplier with ID ${supplier.supplier_id}`);\n          }\n\n          // Log the name we're using\n          console.log(`Using name \"${supplierName}\" for supplier ID ${supplier.supplier_id}`);\n\n          return {\n            supplier_id: supplier.supplier_id || 'unknown',\n            name: supplierName,\n            orderCount: supplier.supplier_id ? (orderCountMap[supplier.supplier_id] || 0) : 0\n          };\n        });\n\n        // Sort by order count (highest first)\n        realData.sort((a: ChartDataItem, b: ChartDataItem) => b.orderCount - a.orderCount);\n\n        // For a specific category, show ALL suppliers in that category\n        // For 'All' categories, show suppliers with orders or top suppliers\n        let finalData: ChartDataItem[] = [];\n\n        if (selectedCategory !== 'All') {\n          // For a specific category, show ALL suppliers regardless of order count\n          // This ensures new suppliers are always displayed\n          finalData = [...realData];\n          console.log(`Showing all ${finalData.length} suppliers in the ${selectedCategory} category`);\n        } else {\n          // For 'All' categories, show suppliers with orders\n          const suppliersWithOrders = realData.filter((item: ChartDataItem) => item.orderCount > 0);\n\n          if (suppliersWithOrders.length > 0) {\n            // We have suppliers with orders, show them\n            finalData = suppliersWithOrders;\n          } else {\n            // No suppliers with orders, show top suppliers\n            finalData = realData.slice(0, 5);\n          }\n        }\n\n        console.log('Final chart data:', finalData);\n\n        // Log each item in the final chart data for debugging\n        finalData.forEach(item => {\n          console.log(`Chart item - ID: ${item.supplier_id}, Name: ${item.name}, Orders: ${item.orderCount}`);\n        });\n\n        setChartData(finalData);\n      } catch (err) {\n        console.error('Error fetching chart data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch chart data');\n\n        // Fallback to empty data\n        setChartData([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [selectedCategory]);\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center h-64\">\n      <div className=\"w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n    </div>;\n  }\n\n  if (error) {\n    return <div className=\"text-red-500\">Error loading chart: {error}</div>;\n  }\n\n  if (chartData.length === 0) {\n    return <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold mb-6 text-center\">Leading Supplier Experts by Order Count</h2>\n      <div className=\"text-right mb-2\">\n        <span className=\"inline-block bg-yellow-400 w-4 h-4 mr-2\"></span>\n        <span className=\"text-sm\">{selectedCategory === 'All' ? 'All Categories' : selectedCategory}</span>\n      </div>\n      <div className=\"text-center py-10 text-gray-500\">\n        {selectedCategory ?\n          `No suppliers found for ${selectedCategory === 'All' ? 'any category' : `the ${selectedCategory} category`}. Please select a different category or add suppliers for this category.` :\n          'Please select a category to see supplier performance'}\n      </div>\n    </div>;\n  }\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold mb-6 text-center\">Leading Supplier Experts by Order Count</h2>\n      <div className=\"text-right mb-2\">\n        <span className=\"inline-block bg-yellow-400 w-4 h-4 mr-2\"></span>\n        <span className=\"text-sm\">{selectedCategory === 'All' ? 'All Categories' : selectedCategory}</span>\n      </div>\n      <div className=\"text-center text-sm text-gray-500 mb-2\">\n        Showing suppliers ranked by number of orders in {selectedCategory === 'All' ? 'all categories' : `the ${selectedCategory} category`}\n      </div>\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart\n            layout=\"vertical\"\n            data={chartData}\n            margin={{ top: 5, right: 30, left: 50, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" horizontal={true} vertical={false} />\n            <XAxis type=\"number\" domain={[0, 'dataMax + 5']} label={{ value: 'Order Times', position: 'bottom', offset: 0 }} />\n            <YAxis\n              type=\"category\"\n              dataKey=\"name\"\n              width={120}\n              label={{ value: 'Supplier Name', angle: -90, position: 'left' }}\n              tick={{ fontSize: 12 }}\n            />\n            <Tooltip\n              formatter={(value) => [`${value} orders`, 'Orders']}\n              labelFormatter={(label) => {\n                // Find the supplier by name\n                const supplier = chartData.find(item => item.name === label);\n                if (!supplier) return label;\n\n                // Just return the supplier name as is\n                return label;\n              }}\n            />\n            <Bar dataKey=\"orderCount\" fill=\"#FFDD00\" barSize={30} />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default SupplierCategoryChart;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 373, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/supplier-details/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport SupplierCategoryChart from '@/components/SupplierCategoryChart';\nimport { ChevronDown } from 'lucide-react';\n\ninterface Supplier {\n  id: number;\n  supplier_id: string;\n  name: string;\n  address: string;\n  contact_no: string;\n  manufacturing_items: string;\n  category: string;\n}\n\nconst SupplierDetailsPage = () => {\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [categories, setCategories] = useState<string[]>(['All']);\n\n  useEffect(() => {\n    const fetchSuppliers = async () => {\n      try {\n        setLoading(true);\n        // Add timestamp to prevent caching\n        const timestamp = new Date().getTime();\n        const response = await fetch(`http://localhost:3002/suppliers?t=${timestamp}`);\n\n        if (!response.ok) {\n          throw new Error(`Failed to fetch suppliers: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (Array.isArray(data)) {\n          setSuppliers(data);\n\n          // Fetch categories from the database\n          try {\n            const categoriesResponse = await fetch(`http://localhost:3002/categories?t=${timestamp}`);\n            if (categoriesResponse.ok) {\n              const categoriesData = await categoriesResponse.json();\n\n              // Create an array with 'All' as the first option, followed by category names\n              const categoryNames = ['All', ...categoriesData.map((cat: any) => cat.category_name)];\n              setCategories(categoryNames);\n            } else {\n              console.error('Failed to fetch categories');\n\n              // Fallback: Extract unique categories from suppliers\n              const uniqueCategories = new Set<string>();\n              uniqueCategories.add('All'); // Add 'All' as default option\n\n              data.forEach((supplier) => {\n                if (supplier.category) {\n                  uniqueCategories.add(supplier.category);\n                }\n              });\n\n              setCategories(Array.from(uniqueCategories));\n            }\n          } catch (error) {\n            console.error('Error fetching categories:', error);\n\n            // Fallback: Extract unique categories from suppliers\n            const uniqueCategories = new Set<string>();\n            uniqueCategories.add('All'); // Add 'All' as default option\n\n            data.forEach((supplier) => {\n              if (supplier.category) {\n                uniqueCategories.add(supplier.category);\n              }\n            });\n\n            setCategories(Array.from(uniqueCategories));\n          }\n        } else {\n          throw new Error(\"Unexpected data format\");\n        }\n      } catch (error) {\n        setError(error instanceof Error ? error.message : \"Failed to fetch suppliers\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSuppliers();\n  }, []);\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center h-64\">\n      <div className=\"w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n    </div>;\n  }\n\n  if (error) {\n    return <div className=\"text-red-500 p-4\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      {/* Supplier Details Table */}\n      <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-bold\">Supplier Details</h2>\n          <button className=\"bg-yellow-400 hover:bg-yellow-500 text-black px-4 py-2 rounded-full font-medium\">\n            Add new Supplier\n          </button>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Name\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Supplier ID\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Address\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Phone No\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Category\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {suppliers.map((supplier) => (\n                <tr key={supplier.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.name}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.supplier_id}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.address}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.contact_no}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {supplier.category || 'Not specified'}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Category Selection and Chart */}\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center\">\n            <h3 className=\"text-xl font-medium mr-4\">Select Category</h3>\n            <div className=\"relative\">\n              <select\n                className=\"appearance-none bg-gray-100 border border-gray-300 rounded-md py-2 pl-4 pr-10 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-yellow-500\"\n                value={selectedCategory}\n                onChange={(e) => setSelectedCategory(e.target.value)}\n              >\n                {categories.map((category) => (\n                  <option key={category} value={category}>\n                    {category}\n                  </option>\n                ))}\n              </select>\n              <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <ChevronDown size={16} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Supplier Category Chart - with key to force re-render when category changes */}\n        <SupplierCategoryChart\n          key={`supplier-chart-${selectedCategory}-${new Date().getTime()}`}\n          selectedCategory={selectedCategory}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SupplierDetailsPage;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 738, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}