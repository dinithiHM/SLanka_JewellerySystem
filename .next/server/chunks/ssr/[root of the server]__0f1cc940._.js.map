{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/services/reportService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002';\n\n// Create axios instance with auth header\nconst axiosInstance = axios.create({\n  baseURL: `${API_URL}/api/reports`,\n});\n\n// Add request interceptor to include auth token\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Get sales report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getSalesReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/sales', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching sales report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get current stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getCurrentStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/current-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching current stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get gold stock report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getGoldStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/gold-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching gold stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get low stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getLowStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/low-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching low stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory valuation report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryValuationReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/valuation', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory valuation report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get customer report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomerReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/customers', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching customer report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get financial report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getFinancialReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/financial', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching financial report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as CSV\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportCSV = async (reportType, params = {}) => {\n  try {\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'csv', ...params },\n      responseType: 'blob'\n    });\n\n    // Create a download link and trigger download\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const date = new Date().toISOString().split('T')[0];\n    link.setAttribute('download', `${reportType}_report_${date}.csv`);\n\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as PDF\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @param {Object} chartRef - Optional reference to chart component for including in PDF\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportPDF = async (reportType, params = {}, chartRef = null) => {\n  try {\n    // Always get data from the API first\n    let data = [];\n    let filename = `${reportType}_report_${new Date().toISOString().split('T')[0]}`;\n\n    // Get data from the API\n    console.log('Fetching report data from API for', reportType);\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'json', ...params }\n    });\n\n    // Log the response for debugging\n    console.log('API response:', response.data);\n\n    // Check if we have data from the API\n    if (response.data && response.data.data && response.data.data.length > 0) {\n      console.log('Using API data for report');\n      data = response.data.data;\n      filename = response.data.filename || filename;\n    } else {\n      console.log('No data from API, checking for chart data');\n      // If no data from API, try to use chart data as fallback\n      if (chartRef && chartRef.current) {\n        try {\n          // Create data from the chart for PDF\n          const chartData = window.chartData || [];\n\n          if (chartData && chartData.length > 0) {\n            console.log('Using chart data for report');\n            data = chartData;\n          } else {\n            console.log('No chart data available');\n          }\n        } catch (chartError) {\n          console.error('Error getting chart data:', chartError);\n        }\n      }\n    }\n\n    // Get user info from server response or fallback to localStorage\n    let userName = 'System User';\n\n    // Check if the server provided a user name in the response\n    if (response.data && response.data.generatedBy) {\n      console.log('Using server-provided user name:', response.data.generatedBy);\n      userName = response.data.generatedBy;\n    } else {\n      // Fallback to localStorage if server didn't provide a name\n      const userInfo = JSON.parse(localStorage.getItem('userInfo')) || { name: 'System User' };\n      console.log('Using localStorage user name:', userInfo.name);\n      userName = userInfo.name;\n    }\n\n    // Import jsPDF and autoTable dynamically\n    const { jsPDF } = await import('jspdf');\n    const { default: autoTable } = await import('jspdf-autotable');\n\n    // Create a new PDF document\n    const doc = new jsPDF();\n\n    // Add company header\n    doc.setFontSize(22);\n    doc.setTextColor(184, 134, 11); // Gold color\n    doc.text(\"S Lanaka Jewellery\", 105, 15, { align: 'center' });\n\n    // Add title\n    let title = 'Report';\n    let titleColor = [184, 134, 11]; // Default gold color\n\n    switch (reportType) {\n      case 'current-stock':\n        title = 'Current Stock Report';\n        titleColor = [0, 128, 0]; // Green\n        break;\n      case 'gold-stock':\n        title = 'Gold Stock Report';\n        titleColor = [184, 134, 11]; // Gold\n        break;\n      case 'low-stock':\n        title = 'Low Stock Report';\n        titleColor = [255, 0, 0]; // Red\n        break;\n      case 'valuation':\n        title = 'Inventory Valuation Report';\n        titleColor = [0, 0, 128]; // Navy\n        break;\n      case 'sales-daily':\n        title = 'Daily Sales Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n      case 'sales-monthly':\n        title = 'Monthly Sales Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n      case 'sales-category':\n        title = 'Sales by Category Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n      case 'sales-branch':\n        title = 'Sales by Branch Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n    }\n\n    // Add report title\n    doc.setFontSize(18);\n    doc.setTextColor(titleColor[0], titleColor[1], titleColor[2]);\n    doc.text(title, 105, 25, { align: 'center' });\n\n    // Add date and user info\n    doc.setFontSize(10);\n    doc.setTextColor(100, 100, 100);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()} by ${userName}`, 105, 32, { align: 'center' });\n\n    // Add decorative line\n    doc.setDrawColor(titleColor[0], titleColor[1], titleColor[2]);\n    doc.setLineWidth(0.5);\n    doc.line(14, 35, 196, 35);\n\n    // Set starting Y position for the table\n    let yPos = 40;\n\n    // For sales reports, ensure we have the correct columns in the right order\n    let formattedData = data;\n    let headers = [];\n\n    if (reportType.startsWith('sales-') && data.length > 0) {\n      // Define the expected columns for sales reports\n      const expectedColumns = [\n        'sale_id', 'sale_date', 'total_amount', 'discount',\n        'payment_method', 'customer_name', 'branch_name', 'employee_name'\n      ];\n\n      // Format the headers\n      headers = [\n        'Sale ID', 'Sale Date', 'Total Amount', 'Discount',\n        'Payment Method', 'Customer Name', 'Branch Name', 'Employee Name'\n      ];\n\n      // Ensure data has all expected columns in the right order\n      formattedData = data.map(item => {\n        const formattedItem = {};\n        expectedColumns.forEach(col => {\n          formattedItem[col] = item[col] !== undefined ? item[col] : 'N/A';\n        });\n        return formattedItem;\n      });\n    } else {\n      // For other reports, use the default approach\n      headers = Object.keys(data[0] || {}).map(header => {\n        // Convert camelCase or snake_case to Title Case with spaces\n        return header\n          .replace(/_/g, ' ')\n          .replace(/([A-Z])/g, ' $1')\n          .replace(/^./, str => str.toUpperCase())\n          .trim();\n      });\n    }\n\n    // Format data for autoTable\n    const tableData = formattedData.map(item => {\n      return Object.values(item);\n    });\n\n    // Define gold-themed colors for different report types\n    let headColor, alternateColor;\n\n    switch (true) {\n      case reportType.startsWith('sales-'):\n        headColor = [75, 0, 130]; // Deep purple for sales\n        alternateColor = [245, 245, 255]; // Light purple-ish\n        break;\n      case reportType === 'gold-stock':\n        headColor = [184, 134, 11]; // Gold\n        alternateColor = [255, 248, 220]; // Cornsilk\n        break;\n      case reportType === 'current-stock':\n        headColor = [0, 128, 0]; // Green\n        alternateColor = [240, 255, 240]; // Honeydew\n        break;\n      case reportType === 'low-stock':\n        headColor = [178, 34, 34]; // Firebrick\n        alternateColor = [255, 240, 240]; // Light red\n        break;\n      case reportType === 'valuation':\n        headColor = [0, 0, 128]; // Navy\n        alternateColor = [240, 248, 255]; // Alice blue\n        break;\n      default:\n        headColor = [218, 165, 32]; // Goldenrod (default)\n        alternateColor = [253, 245, 230]; // Light gold\n        break;\n    }\n\n    // Create table with gold-themed styling\n    autoTable(doc, {\n      head: [headers],\n      body: tableData,\n      startY: yPos,\n      styles: {\n        fontSize: 8,\n        cellPadding: 3,\n        lineColor: [200, 200, 200]\n      },\n      headStyles: {\n        fillColor: headColor,\n        textColor: [255, 255, 255],\n        fontStyle: 'bold',\n        halign: 'center'\n      },\n      alternateRowStyles: {\n        fillColor: alternateColor\n      },\n      columnStyles: {\n        // Apply specific formatting based on report type\n        ...(reportType.startsWith('sales-') ? {\n          0: { halign: 'center' },  // Sale ID\n          1: { halign: 'center' },  // Sale Date\n          2: { halign: 'right' },   // Total Amount\n          3: { halign: 'right' },   // Discount\n          4: { halign: 'center' },  // Payment Method\n          5: { halign: 'left' },    // Customer Name\n          6: { halign: 'left' },    // Branch Name\n          7: { halign: 'left' }     // Employee Name\n        } : {\n          // Default formatting for other reports\n          2: { halign: 'right' },\n          3: { halign: 'right' },\n          4: { halign: 'right' }\n        })\n      },\n      didDrawPage: () => {\n        // Add footer with page numbers\n        doc.setFontSize(8);\n        doc.setTextColor(100, 100, 100);\n        doc.text(\n          `S Lanaka Jewellery - Page ${doc.internal.getNumberOfPages()}`,\n          105,\n          doc.internal.pageSize.height - 10,\n          { align: 'center' }\n        );\n      }\n    });\n\n    // Get the final Y position after the table\n    const finalY = doc.autoTable.previous.finalY || 40;\n\n    // Add chart after the table if available (for sales reports)\n    if (reportType.startsWith('sales-') && chartRef && chartRef.current) {\n      try {\n        console.log('Adding chart to PDF after table at Y position:', finalY);\n\n        // Add a title for the chart section\n        doc.setFontSize(14);\n        doc.setTextColor(titleColor[0], titleColor[1], titleColor[2]);\n        doc.text(\"Sales Trend Chart\", 105, finalY + 20, { align: 'center' });\n\n        // Get chart canvas and convert to image\n        const canvas = chartRef.current.querySelector('canvas');\n        console.log('Chart canvas found:', !!canvas);\n\n        if (canvas) {\n          // Add a page break if we're too far down the page\n          if (finalY > 180) {\n            doc.addPage();\n            // Reset Y position for new page\n            doc.text(\"Sales Trend Chart\", 105, 20, { align: 'center' });\n\n            const chartImg = canvas.toDataURL('image/png');\n            console.log('Chart image created successfully');\n\n            // Add chart image to PDF on new page\n            doc.addImage(chartImg, 'PNG', 14, 30, 182, 80);\n\n            // Add a note about the chart\n            doc.setFontSize(8);\n            doc.setTextColor(100, 100, 100);\n            doc.text(\n              \"Chart shows sales amount and transaction count trends over the selected period\",\n              105,\n              120,\n              { align: 'center' }\n            );\n          } else {\n            // Add chart to current page\n            const chartImg = canvas.toDataURL('image/png');\n            console.log('Chart image created successfully');\n\n            // Add chart image to PDF after the table\n            doc.addImage(chartImg, 'PNG', 14, finalY + 30, 182, 80);\n\n            // Add a note about the chart\n            doc.setFontSize(8);\n            doc.setTextColor(100, 100, 100);\n            doc.text(\n              \"Chart shows sales amount and transaction count trends over the selected period\",\n              105,\n              finalY + 120,\n              { align: 'center' }\n            );\n          }\n        } else {\n          console.log('No canvas element found in chart reference');\n        }\n      } catch (chartErr) {\n        console.error('Error adding chart to PDF:', chartErr);\n        // Continue without chart if there's an error\n      }\n    } else {\n      console.log('Chart not added to PDF:', {\n        isSalesReport: reportType.startsWith('sales-'),\n        hasChartRef: !!chartRef,\n        hasCurrentProperty: chartRef && !!chartRef.current\n      });\n    }\n\n    // Save the PDF\n    doc.save(`${filename}.pdf`);\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report as PDF:', error);\n    throw error;\n  }\n};\n\n/**\n * Get custom report data\n * @param {Object} config - Custom report configuration\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomReport = async (config) => {\n  try {\n    // This would be implemented to handle custom report requests\n    // For now, we'll just return a mock response\n    return {\n      success: true,\n      message: 'Custom report functionality will be implemented here',\n      config\n    };\n  } catch (error) {\n    console.error('Error generating custom report:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 697, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 703, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/reports/sales/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Calendar, Filter, Download, Printer, BarChart, PieChart, LineChart, RefreshCw } from 'lucide-react';\nimport Link from 'next/link';\nimport { getSalesReport } from '@/services/reportService';\n\ninterface SalesData {\n  summary: {\n    totalSales: number;\n    totalTransactions: number;\n    averageOrderValue: number;\n  };\n  salesByDay: {\n    date: string;\n    amount: number;\n    transactions: number;\n  }[];\n  topCategories: {\n    category_name: string;\n    totalQuantity: number;\n    totalAmount: number;\n  }[];\n  topProducts: {\n    item_name: string;\n    totalQuantity: number;\n    totalAmount: number;\n  }[];\n  recentSales: {\n    sale_id: number;\n    customer_name: string;\n    total_amount: number;\n    payment_method: string;\n    sale_date: string;\n    branch_id: number;\n    branch_name: string;\n  }[];\n  branches: {\n    branch_id: number;\n    branch_name: string;\n  }[];\n}\n\nexport default function SalesReportsPage() {\n  const [dateRange, setDateRange] = useState('last30');\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedBranch, setSelectedBranch] = useState<string>('');\n  const [salesData, setSalesData] = useState<SalesData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Report types\n  const reportTypes = [\n    {\n      name: 'Daily Sales',\n      path: '/DashView/reports/sales/daily',\n      description: 'View sales data for each day with detailed breakdowns',\n      icon: <BarChart className=\"w-5 h-5\" />\n    },\n    {\n      name: 'Monthly Sales',\n      path: '/DashView/reports/sales/monthly',\n      description: 'Monthly sales trends and comparisons',\n      icon: <LineChart className=\"w-5 h-5\" />\n    },\n    {\n      name: 'Sales by Category',\n      path: '/DashView/reports/sales/by-category',\n      description: 'Sales distribution across different product categories',\n      icon: <PieChart className=\"w-5 h-5\" />\n    },\n    {\n      name: 'Sales by Branch',\n      path: '/DashView/reports/sales/by-branch',\n      description: 'Compare performance across different store locations',\n      icon: <BarChart className=\"w-5 h-5\" />\n    },\n  ];\n\n  // Fetch sales data\n  const fetchSalesData = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Build query parameters\n      const params: any = { period: dateRange };\n      if (selectedBranch) {\n        params.branchId = selectedBranch;\n      }\n\n      // Use the reportService to fetch data with authentication\n      const data = await getSalesReport(params);\n      setSalesData(data);\n    } catch (err) {\n      console.error('Error fetching sales data:', err);\n      setError('Failed to load sales data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch data on initial load and when filters change\n  useEffect(() => {\n    fetchSalesData();\n  }, [dateRange, selectedBranch]);\n\n  const handleRefresh = () => {\n    fetchSalesData();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Sales Reports</h1>\n\n        <div className=\"mt-3 sm:mt-0 flex items-center space-x-3\">\n          {/* Branch Filter */}\n          <div className=\"relative\">\n            <select\n              className=\"appearance-none pl-3 pr-10 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-yellow-500 focus:border-yellow-500 sm:text-sm\"\n              value={selectedBranch}\n              onChange={(e) => setSelectedBranch(e.target.value)}\n            >\n              <option value=\"\">All Branches</option>\n              {salesData?.branches?.map((branch) => (\n                <option key={branch.branch_id} value={branch.branch_id}>\n                  {branch.branch_name}\n                </option>\n              ))}\n            </select>\n            <Filter className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n          </div>\n\n          {/* Date Range Filter */}\n          <div className=\"relative\">\n            <select\n              className=\"appearance-none pl-3 pr-10 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-yellow-500 focus:border-yellow-500 sm:text-sm\"\n              value={dateRange}\n              onChange={(e) => setDateRange(e.target.value)}\n            >\n              <option value=\"today\">Today</option>\n              <option value=\"yesterday\">Yesterday</option>\n              <option value=\"last7\">Last 7 Days</option>\n              <option value=\"last30\">Last 30 Days</option>\n              <option value=\"thisMonth\">This Month</option>\n              <option value=\"lastMonth\">Last Month</option>\n            </select>\n            <Calendar className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n          </div>\n\n          <button\n            className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n            onClick={handleRefresh}\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n            )}\n            Refresh\n          </button>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\">\n          {error}\n        </div>\n      )}\n\n      {isLoading && !salesData ? (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-yellow-500\"></div>\n        </div>\n      ) : (\n        <>\n          {/* Report Types */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {reportTypes.map((report) => (\n              <Link\n                key={report.name}\n                href={report.path}\n                className=\"bg-white overflow-hidden shadow rounded-lg hover:shadow-md transition-shadow\"\n              >\n                <div className=\"px-4 py-5 sm:p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0 bg-yellow-100 rounded-md p-3\">\n                      {report.icon}\n                    </div>\n                    <div className=\"ml-5\">\n                      <h3 className=\"text-lg font-medium text-gray-900\">{report.name}</h3>\n                      <p className=\"text-sm text-gray-500\">{report.description}</p>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            ))}\n          </div>\n\n          {/* Sales Overview */}\n          <div className=\"bg-white shadow rounded-lg\">\n            <div className=\"px-4 py-5 sm:px-6 flex justify-between items-center\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Sales Overview</h3>\n              <div className=\"flex space-x-2\">\n                <button className=\"inline-flex items-center p-1.5 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50\">\n                  <Download className=\"h-4 w-4\" />\n                </button>\n                <button className=\"inline-flex items-center p-1.5 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50\">\n                  <Printer className=\"h-4 w-4\" />\n                </button>\n              </div>\n            </div>\n            <div className=\"border-t border-gray-200 px-4 py-5 sm:p-6\">\n              <dl className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3\">\n                <div className=\"bg-yellow-50 px-4 py-5 sm:p-6 rounded-lg\">\n                  <dt className=\"text-sm font-medium text-yellow-800 truncate\">Total Sales</dt>\n                  <dd className=\"mt-1 text-3xl font-semibold text-yellow-900\">\n                    LKR {salesData?.summary?.totalSales?.toLocaleString() || '0.00'}\n                  </dd>\n                  <dd className=\"mt-3 text-sm text-yellow-700\">\n                    {salesData?.summary?.totalTransactions || 0} transactions\n                  </dd>\n                </div>\n\n                <div className=\"bg-blue-50 px-4 py-5 sm:p-6 rounded-lg\">\n                  <dt className=\"text-sm font-medium text-blue-800 truncate\">Average Order Value</dt>\n                  <dd className=\"mt-1 text-3xl font-semibold text-blue-900\">\n                    LKR {salesData?.summary?.averageOrderValue?.toLocaleString() || '0.00'}\n                  </dd>\n                  <dd className=\"mt-3 text-sm text-blue-700\">\n                    Per transaction\n                  </dd>\n                </div>\n\n                <div className=\"bg-green-50 px-4 py-5 sm:p-6 rounded-lg\">\n                  <dt className=\"text-sm font-medium text-green-800 truncate\">Top Selling Category</dt>\n                  <dd className=\"mt-1 text-2xl font-semibold text-green-900\">\n                    {salesData?.topCategories?.[0]?.category_name || 'No data'}\n                  </dd>\n                  <dd className=\"mt-3 text-sm text-green-700\">\n                    Best product: {salesData?.topProducts?.[0]?.item_name || 'No data'}\n                  </dd>\n                </div>\n              </dl>\n            </div>\n          </div>\n\n          {/* Recent Sales Table */}\n          <div className=\"bg-white shadow rounded-lg\">\n            <div className=\"px-4 py-5 sm:px-6 flex justify-between items-center\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Recent Sales</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Sale ID\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Customer\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Amount\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Payment Method\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Branch\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {salesData?.recentSales?.map((sale) => (\n                    <tr key={sale.sale_id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {sale.sale_id}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {sale.customer_name}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        LKR {sale.total_amount.toLocaleString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {sale.payment_method}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {new Date(sale.sale_date).toLocaleDateString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {sale.branch_name}\n                      </td>\n                    </tr>\n                  ))}\n\n                  {(!salesData?.recentSales || salesData.recentSales.length === 0) && (\n                    <tr>\n                      <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500\">\n                        No sales data available.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Sales by Day Table */}\n          <div className=\"bg-white shadow rounded-lg\">\n            <div className=\"px-4 py-5 sm:px-6\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Sales by Day</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Sales Amount\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Transactions\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Average\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {salesData?.salesByDay?.map((day) => (\n                    <tr key={day.date} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {new Date(day.date).toLocaleDateString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        LKR {day.amount.toLocaleString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {day.transactions}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        LKR {(day.amount / day.transactions).toLocaleString()}\n                      </td>\n                    </tr>\n                  ))}\n\n                  {(!salesData?.salesByDay || salesData.salesByDay.length === 0) && (\n                    <tr>\n                      <td colSpan={4} className=\"px-6 py-4 text-center text-gray-500\">\n                        No daily sales data available.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1626, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}