{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/services/reportService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002';\n\n// Create axios instance with auth header\nconst axiosInstance = axios.create({\n  baseURL: `${API_URL}/api/reports`,\n});\n\n// Add request interceptor to include auth token\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Get sales report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getSalesReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/sales', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching sales report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get current stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getCurrentStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/current-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching current stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get gold stock report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getGoldStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/gold-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching gold stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get low stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getLowStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/low-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching low stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory valuation report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryValuationReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/valuation', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory valuation report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get customer report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomerReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/customers', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching customer report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get financial report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getFinancialReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/financial', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching financial report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as CSV\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportCSV = async (reportType, params = {}) => {\n  try {\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'csv', ...params },\n      responseType: 'blob'\n    });\n\n    // Create a download link and trigger download\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const date = new Date().toISOString().split('T')[0];\n    link.setAttribute('download', `${reportType}_report_${date}.csv`);\n\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as PDF\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportPDF = async (reportType, params = {}) => {\n  try {\n    // First get the data in JSON format\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'json', ...params }\n    });\n\n    // Import jsPDF and autoTable dynamically\n    const { jsPDF } = await import('jspdf');\n    const { default: autoTable } = await import('jspdf-autotable');\n\n    // Create a new PDF document\n    const doc = new jsPDF();\n\n    // Add title\n    let title = 'Report';\n    switch (reportType) {\n      case 'current-stock':\n        title = 'Current Stock Report';\n        break;\n      case 'gold-stock':\n        title = 'Gold Stock Report';\n        break;\n      case 'low-stock':\n        title = 'Low Stock Report';\n        break;\n      case 'valuation':\n        title = 'Inventory Valuation Report';\n        break;\n      case 'sales':\n        title = 'Sales Report';\n        break;\n    }\n\n    // Add report title\n    doc.setFontSize(18);\n    doc.text(title, 14, 22);\n\n    // Add date\n    doc.setFontSize(11);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 30);\n\n    // Format data for autoTable\n    const tableData = response.data.data.map(item => {\n      return Object.values(item);\n    });\n\n    // Get column headers\n    const headers = Object.keys(response.data.data[0]);\n\n    // Create table\n    autoTable(doc, {\n      head: [headers],\n      body: tableData,\n      startY: 35,\n      styles: { fontSize: 8, cellPadding: 2 },\n      headStyles: { fillColor: [60, 60, 60] }\n    });\n\n    // Save the PDF\n    doc.save(`${response.data.filename}.pdf`);\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report as PDF:', error);\n    throw error;\n  }\n};\n\n/**\n * Get custom report data\n * @param {Object} config - Custom report configuration\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomReport = async (config) => {\n  try {\n    // This would be implemented to handle custom report requests\n    // For now, we'll just return a mock response\n    return {\n      success: true,\n      message: 'Custom report functionality will be implemented here',\n      config\n    };\n  } catch (error) {\n    console.error('Error generating custom report:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/reports/inventory/gold-stock/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Download, Printer, ArrowLeft, RefreshCw } from 'lucide-react';\nimport Link from 'next/link';\nimport { getGoldStockReport } from '@/services/reportService';\nimport { BarChart as RechartsBarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\n\ninterface GoldStockItem {\n  purity: string;\n  weight: number;\n  price_per_gram: number;\n  value: number;\n  description?: string;\n  status?: string;\n}\n\ninterface Transaction {\n  stock_id: number;\n  purity: string;\n  quantity_in_grams: number;\n  price_per_gram: number;\n  last_updated: string;\n  description?: string;\n}\n\ninterface GoldStockData {\n  goldStock: GoldStockItem[];\n  summary: {\n    totalWeight: number;\n    totalValue: number;\n    averagePrice: number;\n  };\n  recentTransactions: Transaction[];\n}\n\nexport default function GoldStockReportPage() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [goldStockData, setGoldStockData] = useState<GoldStockData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Format currency\n  const formatCurrency = (amount: number) => {\n    return `LKR ${amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  // Format weight\n  const formatWeight = (weight: number) => {\n    return `${weight.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} g`;\n  };\n\n  // Fetch gold stock data\n  const fetchGoldStockData = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const data = await getGoldStockReport();\n      setGoldStockData(data);\n    } catch (err) {\n      console.error('Error fetching gold stock data:', err);\n      setError('Failed to load gold stock data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch data on initial load\n  useEffect(() => {\n    fetchGoldStockData();\n  }, []);\n\n  const handleRefresh = () => {\n    fetchGoldStockData();\n  };\n\n  // Prepare chart data\n  const prepareChartData = () => {\n    if (!goldStockData?.goldStock) return [];\n    \n    return goldStockData.goldStock.map(item => ({\n      purity: `${item.purity}K`,\n      weight: item.weight,\n      value: item.value\n    }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with back button */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div className=\"flex items-center\">\n          <Link href=\"/DashView/reports/inventory\" className=\"mr-4\">\n            <ArrowLeft className=\"h-5 w-5 text-gray-500 hover:text-gray-700\" />\n          </Link>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Gold Stock Report</h1>\n        </div>\n\n        <div className=\"mt-3 sm:mt-0 flex items-center space-x-3\">\n          <button\n            className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n            onClick={handleRefresh}\n          >\n            {isLoading ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n            )}\n            Refresh\n          </button>\n          <button className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\">\n            <Printer className=\"h-4 w-4 mr-2\" />\n            Print\n          </button>\n          <button className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </button>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-yellow-500\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"bg-red-50 border-l-4 border-red-400 p-4\">\n          <div className=\"flex\">\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      ) : goldStockData ? (\n        <>\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0 bg-yellow-100 rounded-md p-3\">\n                  <BarChart className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Total Gold Weight</h3>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{formatWeight(goldStockData.summary.totalWeight)}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0 bg-yellow-100 rounded-md p-3\">\n                  <BarChart className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Total Value</h3>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{formatCurrency(goldStockData.summary.totalValue)}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0 bg-yellow-100 rounded-md p-3\">\n                  <BarChart className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Average Price</h3>\n                  <p className=\"text-2xl font-semibold text-gray-900\">\n                    {formatCurrency(goldStockData.summary.averagePrice)} / g\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Gold Stock Chart */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Gold Stock by Purity</h3>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <RechartsBarChart\n                  data={prepareChartData()}\n                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"purity\" />\n                  <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"#8884d8\" label={{ value: 'Weight (g)', angle: -90, position: 'insideLeft' }} />\n                  <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#82ca9d\" label={{ value: 'Value (LKR)', angle: 90, position: 'insideRight' }} />\n                  <Tooltip formatter={(value, name) => {\n                    if (name === 'weight') return [`${value.toFixed(2)} g`, 'Weight'];\n                    if (name === 'value') return [`LKR ${value.toLocaleString()}`, 'Value'];\n                    return [value, name];\n                  }} />\n                  <Legend />\n                  <Bar yAxisId=\"left\" dataKey=\"weight\" name=\"Weight (g)\" fill=\"#8884d8\" />\n                  <Bar yAxisId=\"right\" dataKey=\"value\" name=\"Value (LKR)\" fill=\"#82ca9d\" />\n                </RechartsBarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Gold Stock Table */}\n          <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n            <div className=\"px-4 py-5 sm:px-6\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Gold Stock Details</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Gold Purity\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Weight\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Price per Gram\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Total Value\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Description\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {goldStockData.goldStock.map((item, index) => (\n                    <tr key={index} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {item.purity}K\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatWeight(item.weight)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatCurrency(item.price_per_gram)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatCurrency(item.value)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {item.description || '-'}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Recent Transactions */}\n          <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n            <div className=\"px-4 py-5 sm:px-6\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Recent Gold Transactions</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Purity\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Quantity\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Price per Gram\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Description\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {goldStockData.recentTransactions.map((transaction) => (\n                    <tr key={transaction.stock_id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {new Date(transaction.last_updated).toLocaleDateString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {transaction.purity}K\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatWeight(transaction.quantity_in_grams)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatCurrency(transaction.price_per_gram)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {transaction.description || '-'}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </>\n      ) : (\n        <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4\">\n          <div className=\"flex\">\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-yellow-700\">No gold stock data available. Please try refreshing.</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}