{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/utils/imageCompression.ts"],"sourcesContent":["/**\n * Compresses an image file to reduce its size\n * @param file The image file to compress\n * @param maxSizeMB Maximum size in MB\n * @param maxWidthOrHeight Maximum width or height in pixels\n * @returns A promise that resolves to a base64 string of the compressed image\n */\nexport const compressImage = async (\n  file: File,\n  maxSizeMB: number = 1,\n  maxWidthOrHeight: number = 1024\n): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    \n    reader.onload = (event) => {\n      const img = new Image();\n      img.src = event.target?.result as string;\n      \n      img.onload = () => {\n        // Create a canvas to resize the image\n        const canvas = document.createElement('canvas');\n        let width = img.width;\n        let height = img.height;\n        \n        // Calculate new dimensions while maintaining aspect ratio\n        if (width > height) {\n          if (width > maxWidthOrHeight) {\n            height = Math.round(height * maxWidthOrHeight / width);\n            width = maxWidthOrHeight;\n          }\n        } else {\n          if (height > maxWidthOrHeight) {\n            width = Math.round(width * maxWidthOrHeight / height);\n            height = maxWidthOrHeight;\n          }\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        // Draw the resized image on the canvas\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          reject(new Error('Could not get canvas context'));\n          return;\n        }\n        \n        ctx.drawImage(img, 0, 0, width, height);\n        \n        // Convert to base64 with reduced quality\n        const quality = 0.7; // 70% quality\n        const compressedBase64 = canvas.toDataURL(file.type, quality);\n        \n        // Check if the compressed image is still too large\n        const base64Size = (compressedBase64.length * 3) / 4 / 1024 / 1024; // Size in MB\n        \n        if (base64Size > maxSizeMB) {\n          // If still too large, compress more aggressively\n          const furtherQuality = Math.min(maxSizeMB / base64Size * quality, 0.5);\n          const furtherCompressed = canvas.toDataURL(file.type, furtherQuality);\n          resolve(furtherCompressed);\n        } else {\n          resolve(compressedBase64);\n        }\n      };\n      \n      img.onerror = () => {\n        reject(new Error('Error loading image'));\n      };\n    };\n    \n    reader.onerror = () => {\n      reject(new Error('Error reading file'));\n    };\n  });\n};\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;AACM,MAAM,gBAAgB,OAC3B,MACA,YAAoB,CAAC,EACrB,mBAA2B,IAAI;IAE/B,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI;QACnB,OAAO,aAAa,CAAC;QAErB,OAAO,MAAM,GAAG,CAAC;YACf,MAAM,MAAM,IAAI;YAChB,IAAI,GAAG,GAAG,MAAM,MAAM,EAAE;YAExB,IAAI,MAAM,GAAG;gBACX,sCAAsC;gBACtC,MAAM,SAAS,SAAS,aAAa,CAAC;gBACtC,IAAI,QAAQ,IAAI,KAAK;gBACrB,IAAI,SAAS,IAAI,MAAM;gBAEvB,0DAA0D;gBAC1D,IAAI,QAAQ,QAAQ;oBAClB,IAAI,QAAQ,kBAAkB;wBAC5B,SAAS,KAAK,KAAK,CAAC,SAAS,mBAAmB;wBAChD,QAAQ;oBACV;gBACF,OAAO;oBACL,IAAI,SAAS,kBAAkB;wBAC7B,QAAQ,KAAK,KAAK,CAAC,QAAQ,mBAAmB;wBAC9C,SAAS;oBACX;gBACF;gBAEA,OAAO,KAAK,GAAG;gBACf,OAAO,MAAM,GAAG;gBAEhB,uCAAuC;gBACvC,MAAM,MAAM,OAAO,UAAU,CAAC;gBAC9B,IAAI,CAAC,KAAK;oBACR,OAAO,IAAI,MAAM;oBACjB;gBACF;gBAEA,IAAI,SAAS,CAAC,KAAK,GAAG,GAAG,OAAO;gBAEhC,yCAAyC;gBACzC,MAAM,UAAU,KAAK,cAAc;gBACnC,MAAM,mBAAmB,OAAO,SAAS,CAAC,KAAK,IAAI,EAAE;gBAErD,mDAAmD;gBACnD,MAAM,aAAa,AAAC,iBAAiB,MAAM,GAAG,IAAK,IAAI,OAAO,MAAM,aAAa;gBAEjF,IAAI,aAAa,WAAW;oBAC1B,iDAAiD;oBACjD,MAAM,iBAAiB,KAAK,GAAG,CAAC,YAAY,aAAa,SAAS;oBAClE,MAAM,oBAAoB,OAAO,SAAS,CAAC,KAAK,IAAI,EAAE;oBACtD,QAAQ;gBACV,OAAO;oBACL,QAAQ;gBACV;YACF;YAEA,IAAI,OAAO,GAAG;gBACZ,OAAO,IAAI,MAAM;YACnB;QACF;QAEA,OAAO,OAAO,GAAG;YACf,OAAO,IAAI,MAAM;QACnB;IACF;AACF","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/components/SupplierCategoryChart.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer\n} from 'recharts';\n\ninterface ChartProps {\n  selectedCategory: string;\n}\n\ninterface Supplier {\n  supplier_id: string;\n  supplier_name: string;\n  name?: string;\n  category?: string;\n  manufacturing_items?: string;\n}\n\ninterface Order {\n  supplier_id: string;\n  [key: string]: any;\n}\n\ninterface ChartDataItem {\n  supplier_id: string;\n  name: string;\n  orderCount: number;\n}\n\nconst SupplierCategoryChart: React.FC<ChartProps> = ({ selectedCategory }) => {\n  const [chartData, setChartData] = useState<ChartDataItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Skip if no category is selected\n        if (!selectedCategory) {\n          setChartData([]);\n          setLoading(false);\n          return;\n        }\n\n        console.log(`Fetching suppliers for category: ${selectedCategory}`);\n\n        // Add a timestamp to prevent caching and ensure fresh data\n        const timestamp = new Date().getTime();\n\n        // First, fetch all suppliers from the database\n        const suppliersResponse = await fetch(`http://localhost:3002/suppliers?t=${timestamp}`);\n        if (!suppliersResponse.ok) {\n          throw new Error(`Failed to fetch suppliers: ${suppliersResponse.status}`);\n        }\n\n        let suppliers = await suppliersResponse.json() as Supplier[];\n        console.log('Fetched suppliers:', suppliers);\n\n        // Log each supplier's name and ID for debugging\n        suppliers.forEach(supplier => {\n          console.log(`Supplier ID: ${supplier.supplier_id}, Name: ${supplier.supplier_name || supplier.name || 'No name'}, Category: ${supplier.category || 'No category'}`);\n        });\n\n        // Filter suppliers by category if a specific category is selected\n        if (selectedCategory !== 'All') {\n          suppliers = suppliers.filter(supplier =>\n            supplier.category === selectedCategory ||\n            (supplier.manufacturing_items && supplier.manufacturing_items.includes(selectedCategory))\n          );\n          console.log(`Filtered suppliers for category ${selectedCategory}:`, suppliers);\n        }\n\n        // Then, fetch all orders to count them manually (with timestamp to prevent caching)\n        const ordersResponse = await fetch(`http://localhost:3002/suppliers/check-orders-data?t=${timestamp}`);\n        let orders: Order[] = [];\n\n        if (ordersResponse.ok) {\n          orders = await ordersResponse.json();\n          console.log('Fetched orders:', orders);\n        } else {\n          console.warn('Could not fetch orders, will show suppliers with zero orders');\n        }\n\n        // Count orders for each supplier\n        const orderCountMap: Record<string, number> = {};\n        if (orders && orders.length > 0) {\n          orders.forEach((order: Order) => {\n            if (order.supplier_id) {\n              orderCountMap[order.supplier_id] = (orderCountMap[order.supplier_id] || 0) + 1;\n            }\n          });\n        }\n\n        console.log('Order counts by supplier:', orderCountMap);\n\n        // Create chart data with real suppliers and their order counts\n        const realData: ChartDataItem[] = suppliers.map((supplier: Supplier) => {\n          // Get the actual name from the supplier data\n          // Check all possible name fields and use the first one that exists\n          let supplierName = '';\n\n          if (supplier.name && supplier.name !== '') {\n            supplierName = supplier.name;\n          } else if (supplier.supplier_name && supplier.supplier_name !== '') {\n            supplierName = supplier.supplier_name;\n          } else {\n            // If no name is found, use a generic name but log this issue\n            supplierName = `Unknown Supplier ${supplier.supplier_id}`;\n            console.warn(`No name found for supplier with ID ${supplier.supplier_id}`);\n          }\n\n          // Log the name we're using\n          console.log(`Using name \"${supplierName}\" for supplier ID ${supplier.supplier_id}`);\n\n          return {\n            supplier_id: supplier.supplier_id || 'unknown',\n            name: supplierName,\n            orderCount: supplier.supplier_id ? (orderCountMap[supplier.supplier_id] || 0) : 0\n          };\n        });\n\n        // Sort by order count (highest first)\n        realData.sort((a: ChartDataItem, b: ChartDataItem) => b.orderCount - a.orderCount);\n\n        // For a specific category, show ALL suppliers in that category\n        // For 'All' categories, show suppliers with orders or top suppliers\n        let finalData: ChartDataItem[] = [];\n\n        if (selectedCategory !== 'All') {\n          // For a specific category, show ALL suppliers regardless of order count\n          // This ensures new suppliers are always displayed\n          finalData = [...realData];\n          console.log(`Showing all ${finalData.length} suppliers in the ${selectedCategory} category`);\n        } else {\n          // For 'All' categories, show suppliers with orders\n          const suppliersWithOrders = realData.filter((item: ChartDataItem) => item.orderCount > 0);\n\n          if (suppliersWithOrders.length > 0) {\n            // We have suppliers with orders, show them\n            finalData = suppliersWithOrders;\n          } else {\n            // No suppliers with orders, show top suppliers\n            finalData = realData.slice(0, 5);\n          }\n        }\n\n        console.log('Final chart data:', finalData);\n\n        // Log each item in the final chart data for debugging\n        finalData.forEach(item => {\n          console.log(`Chart item - ID: ${item.supplier_id}, Name: ${item.name}, Orders: ${item.orderCount}`);\n        });\n\n        setChartData(finalData);\n      } catch (err) {\n        console.error('Error fetching chart data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch chart data');\n\n        // Fallback to empty data\n        setChartData([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [selectedCategory]);\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center h-64\">\n      <div className=\"w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n    </div>;\n  }\n\n  if (error) {\n    return <div className=\"text-red-500\">Error loading chart: {error}</div>;\n  }\n\n  if (chartData.length === 0) {\n    return <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold mb-6 text-center\">Leading Supplier Experts by Order Count</h2>\n      <div className=\"text-right mb-2\">\n        <span className=\"inline-block bg-yellow-400 w-4 h-4 mr-2\"></span>\n        <span className=\"text-sm\">{selectedCategory === 'All' ? 'All Categories' : selectedCategory}</span>\n      </div>\n      <div className=\"text-center py-10 text-gray-500\">\n        {selectedCategory ?\n          `No suppliers found for ${selectedCategory === 'All' ? 'any category' : `the ${selectedCategory} category`}. Please select a different category or add suppliers for this category.` :\n          'Please select a category to see supplier performance'}\n      </div>\n    </div>;\n  }\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold mb-6 text-center\">Leading Supplier Experts by Order Count</h2>\n      <div className=\"text-right mb-2\">\n        <span className=\"inline-block bg-yellow-400 w-4 h-4 mr-2\"></span>\n        <span className=\"text-sm\">{selectedCategory === 'All' ? 'All Categories' : selectedCategory}</span>\n      </div>\n      <div className=\"text-center text-sm text-gray-500 mb-2\">\n        Showing suppliers ranked by number of orders in {selectedCategory === 'All' ? 'all categories' : `the ${selectedCategory} category`}\n      </div>\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart\n            layout=\"vertical\"\n            data={chartData}\n            margin={{ top: 5, right: 30, left: 50, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" horizontal={true} vertical={false} />\n            <XAxis type=\"number\" domain={[0, 'dataMax + 5']} label={{ value: 'Order Times', position: 'bottom', offset: 0 }} />\n            <YAxis\n              type=\"category\"\n              dataKey=\"name\"\n              width={120}\n              label={{ value: 'Supplier Name', angle: -90, position: 'left' }}\n              tick={{ fontSize: 12 }}\n            />\n            <Tooltip\n              formatter={(value) => [`${value} orders`, 'Orders']}\n              labelFormatter={(label) => {\n                // Find the supplier by name\n                const supplier = chartData.find(item => item.name === label);\n                if (!supplier) return label;\n\n                // Just return the supplier name as is\n                return label;\n              }}\n            />\n            <Bar dataKey=\"orderCount\" fill=\"#FFDD00\" barSize={30} />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default SupplierCategoryChart;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 444, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/orders/add/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { compressImage } from '@/utils/imageCompression';\nimport SupplierCategoryChart from '@/components/SupplierCategoryChart';\nimport { useSearchParams } from 'next/navigation';\n\nconst AddOrderPage = () => {\n  const searchParams = useSearchParams();\n\n  // Get query parameters\n  const orderIdFromQuery = searchParams.get('order_id');\n  const categoryFromQuery = searchParams.get('category');\n  const supplierIdFromQuery = searchParams.get('supplier_id');\n  const quantityFromQuery = searchParams.get('quantity');\n  const offerGoldFromQuery = searchParams.get('offer_gold');\n  const selectedKaratsFromQuery = searchParams.get('selected_karats');\n  const karatValuesFromQuery = searchParams.get('karat_values');\n\n  // Gold and pricing details\n  const goldPricePerGramFromQuery = searchParams.get('gold_price_per_gram');\n  const selectedKaratFromQuery = searchParams.get('selected_karat');\n  const goldPurityFromQuery = searchParams.get('gold_purity');\n  const weightInGramsFromQuery = searchParams.get('weight_in_grams');\n  const makingChargesFromQuery = searchParams.get('making_charges');\n  const additionalMaterialsChargesFromQuery = searchParams.get('additional_materials_charges');\n  const baseEstimatedPriceFromQuery = searchParams.get('base_estimated_price');\n  const estimatedPriceFromQuery = searchParams.get('estimated_price');\n  const totalAmountFromQuery = searchParams.get('total_amount');\n\n  // Payment information\n  const advancePaymentFromQuery = searchParams.get('advance_payment');\n  const remainingBalanceFromQuery = searchParams.get('remaining_balance');\n  const paymentStatusFromQuery = searchParams.get('payment_status');\n\n  // State for form fields\n  const [category, setCategory] = useState(categoryFromQuery || '');\n  const [supplier, setSupplier] = useState(supplierIdFromQuery || '');\n  const [quantity, setQuantity] = useState(quantityFromQuery ? parseInt(quantityFromQuery, 10) : 20);\n  const [offerGold, setOfferGold] = useState('yes');\n  const [selectedKarats, setSelectedKarats] = useState({\n    '24KT': false,\n    '22KT': false,\n    '21KT': false,\n    '18KT': false,\n    '16KT': false,\n  });\n  const [karatValues, setKaratValues] = useState({\n    '24KT': 50,\n    '22KT': 50,\n    '21KT': 50,\n    '18KT': 50,\n    '16KT': 50,\n  });\n  const [imagePreview, setImagePreview] = useState<string | 'loading' | null>(null);\n  const [suppliers, setSuppliers] = useState<any[]>([]);\n\n  // Gold karat purity mapping\n  type KaratKey = '24K' | '23K' | '22K' | '21K' | '20K' | '19K' | '18K' | '16K' | '14K' | '10K';\n\n  const karatPurityMap: Record<KaratKey, { purity: number; label: string }> = {\n    '24K': { purity: 1.0000, label: '24-Karat Gold (99.99% Pure)' },\n    '23K': { purity: 0.9583, label: '23-Karat Gold (96% Pure)' },\n    '22K': { purity: 0.9167, label: '22-Karat Gold (92% Pure)' },\n    '21K': { purity: 0.8750, label: '21-Karat Gold (88% Pure)' },\n    '20K': { purity: 0.8333, label: '20-Karat Gold (83% Pure)' },\n    '19K': { purity: 0.7917, label: '19-Karat Gold (79% Pure)' },\n    '18K': { purity: 0.7500, label: '18-Karat Gold (75% Pure)' },\n    '16K': { purity: 0.6667, label: '16-Karat Gold (67% Pure)' },\n    '14K': { purity: 0.5833, label: '14-Karat Gold (58% Pure)' },\n    '10K': { purity: 0.4167, label: '10-Karat Gold (42% Pure)' },\n  };\n\n  // Price calculation states\n  const [showPriceCalculation, setShowPriceCalculation] = useState(false);\n  const [goldPricePerGram, setGoldPricePerGram] = useState(0);\n  const [baseGoldPrice, setBaseGoldPrice] = useState(0); // 24K price from API\n  const [selectedKarat, setSelectedKarat] = useState<KaratKey>('24K');\n  const [weightInGrams, setWeightInGrams] = useState(0);\n  const [makingCharges, setMakingCharges] = useState(0);\n  const [additionalMaterialsCharges, setAdditionalMaterialsCharges] = useState(0); // For copper and other metals\n  const [useCustomPrice, setUseCustomPrice] = useState(false);\n  const [customPrice, setCustomPrice] = useState(0);\n  const [estimatedPrice, setEstimatedPrice] = useState(0); // Base estimate (gold + weight)\n  const [totalEstimatedPrice, setTotalEstimatedPrice] = useState(0); // Total estimate including all charges\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [isLoadingGoldPrice, setIsLoadingGoldPrice] = useState(false);\n  const [goldPriceLastUpdated, setGoldPriceLastUpdated] = useState<string | null>(null);\n\n  // Supplier payment states\n  const [advancePaymentAmount, setAdvancePaymentAmount] = useState(\n    advancePaymentFromQuery ? parseFloat(advancePaymentFromQuery) : 0\n  );\n  const [paymentMethod, setPaymentMethod] = useState('Cash');\n  const [paymentNotes, setPaymentNotes] = useState('');\n  const [minAdvancePayment, setMinAdvancePayment] = useState(0); // 25% of total\n\n  // Set initial total amount if provided in query\n  const [initialTotalAmount] = useState(\n    totalAmountFromQuery ? parseFloat(totalAmountFromQuery) : 0\n  );\n\n  // User info state\n  const [userRole, setUserRole] = useState<string>('');\n  const [userBranchId, setUserBranchId] = useState<number | null>(null);\n\n  // State for categories\n  const [categories, setCategories] = useState<{category_id: number, category_name: string}[]>([]);\n\n  // Get user info from localStorage\n  useEffect(() => {\n    // Get user info from localStorage\n    const role = localStorage.getItem('role');\n    const branchId = localStorage.getItem('branchId');\n\n    console.log('Retrieved from localStorage - Role:', role, 'Branch ID:', branchId);\n\n    // Set user role (convert to lowercase for consistency)\n    const normalizedRole = role === 'Admin' ? 'admin' : (role?.toLowerCase() || '');\n    setUserRole(normalizedRole);\n\n    // Set branch ID\n    const numericBranchId = branchId ? Number(branchId) : null;\n    setUserBranchId(numericBranchId);\n  }, []);\n\n  // Fetch categories from the database\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:3002/categories');\n        if (response.ok) {\n          const data = await response.json();\n          setCategories(data);\n        } else {\n          console.error('Failed to fetch categories');\n          // Fallback to default categories if fetch fails\n          setCategories([\n            { category_id: 1, category_name: \"Necklace\" },\n            { category_id: 2, category_name: \"Ring\" },\n            { category_id: 3, category_name: \"Earrings\" },\n            { category_id: 4, category_name: \"Bracelet\" },\n            { category_id: 5, category_name: \"Other\" }\n          ]);\n        }\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n        // Fallback to default categories if fetch fails\n        setCategories([\n          { category_id: 1, category_name: \"Necklace\" },\n          { category_id: 2, category_name: \"Ring\" },\n          { category_id: 3, category_name: \"Earrings\" },\n          { category_id: 4, category_name: \"Bracelet\" },\n          { category_id: 5, category_name: \"Other\" }\n        ]);\n      }\n    };\n\n    fetchCategories();\n  }, []);\n\n  // Fetch suppliers from the database\n  useEffect(() => {\n    const fetchSuppliers = async () => {\n      try {\n        const response = await fetch('http://localhost:3002/suppliers');\n        if (response.ok) {\n          const data = await response.json();\n          setSuppliers(data);\n        } else {\n          console.error('Failed to fetch suppliers');\n        }\n      } catch (error) {\n        console.error('Error fetching suppliers:', error);\n        // Use dummy data if fetch fails\n        setSuppliers([\n          { supplier_id: '001', name: 'Mohamad Nazeem', category: 'Wedding Sets' },\n          { supplier_id: '002', name: 'Abdulla Nazeem', category: 'Rings' },\n          { supplier_id: '003', name: 'Vaseem Akram', category: 'Bracelets' },\n          { supplier_id: '004', name: 'Mohamad Sami', category: 'Pendants' },\n        ]);\n      }\n    };\n\n    fetchSuppliers();\n  }, []);\n\n  // Handle karat checkbox change\n  const handleKaratChange = (karat: string) => {\n    setSelectedKarats({\n      ...selectedKarats,\n      [karat]: !selectedKarats[karat as keyof typeof selectedKarats]\n    });\n  };\n\n  // Handle karat value change\n  const handleKaratValueChange = (karat: string, value: number) => {\n    setKaratValues({\n      ...karatValues,\n      [karat]: value\n    });\n  };\n\n  // Function to fetch current gold price\n  const fetchGoldPrice = async () => {\n    try {\n      setIsLoadingGoldPrice(true);\n      const response = await fetch('http://localhost:3002/gold-prices/current-price');\n      const data = await response.json();\n\n      if (data.success) {\n        // Store the 24K base price\n        setBaseGoldPrice(data.price);\n\n        // Calculate the price based on selected karat purity\n        const purity = karatPurityMap[selectedKarat].purity;\n        const adjustedPrice = data.price * purity;\n        setGoldPricePerGram(adjustedPrice);\n\n        // Format the timestamp\n        const date = new Date(data.timestamp);\n        setGoldPriceLastUpdated(date.toLocaleString());\n      } else {\n        console.error('Failed to fetch gold price:', data.message);\n      }\n    } catch (error) {\n      console.error('Error fetching gold price:', error);\n    } finally {\n      setIsLoadingGoldPrice(false);\n    }\n  };\n\n  // Function to update gold price when karat changes\n  const updateGoldPriceForKarat = (karat: KaratKey) => {\n    setSelectedKarat(karat);\n    if (baseGoldPrice > 0) {\n      const purity = karatPurityMap[karat].purity;\n      const adjustedPrice = baseGoldPrice * purity;\n      setGoldPricePerGram(adjustedPrice);\n    }\n  };\n\n  // Fetch gold price when price calculator is shown\n  useEffect(() => {\n    if (showPriceCalculation) {\n      fetchGoldPrice();\n    }\n  }, [showPriceCalculation]);\n\n  // Set total amount and show price calculation if we have query parameters\n  useEffect(() => {\n    if (totalAmountFromQuery) {\n      setShowPriceCalculation(true);\n      setTotalAmount(parseFloat(totalAmountFromQuery));\n\n      // If we have a total amount but no advance payment, set a default advance payment\n      if (!advancePaymentFromQuery) {\n        const minPayment = parseFloat(totalAmountFromQuery) * 0.25;\n        setAdvancePaymentAmount(minPayment);\n      }\n\n      // Set gold karat if provided\n      if (selectedKaratFromQuery) {\n        // Convert from \"24KT\" format to \"24K\" format if needed\n        const formattedKarat = selectedKaratFromQuery.endsWith('KT')\n          ? selectedKaratFromQuery.replace('KT', 'K')\n          : selectedKaratFromQuery;\n\n        // Make sure it's a valid karat key\n        if (Object.keys(karatPurityMap).includes(formattedKarat as KaratKey)) {\n          setSelectedKarat(formattedKarat as KaratKey);\n        }\n      }\n\n      // Set weight if provided\n      if (weightInGramsFromQuery) {\n        setWeightInGrams(parseFloat(weightInGramsFromQuery));\n      }\n\n      // Set making charges if provided\n      if (makingChargesFromQuery) {\n        setMakingCharges(parseFloat(makingChargesFromQuery));\n      }\n\n      // Set additional materials charges if provided\n      if (additionalMaterialsChargesFromQuery) {\n        setAdditionalMaterialsCharges(parseFloat(additionalMaterialsChargesFromQuery));\n      }\n\n      // Set gold price per gram if provided\n      if (goldPricePerGramFromQuery) {\n        setGoldPricePerGram(parseFloat(goldPricePerGramFromQuery));\n      }\n    }\n  }, [\n    totalAmountFromQuery,\n    advancePaymentFromQuery,\n    selectedKaratFromQuery,\n    weightInGramsFromQuery,\n    makingChargesFromQuery,\n    additionalMaterialsChargesFromQuery,\n    goldPricePerGramFromQuery\n  ]);\n\n  // Calculate estimated price\n  useEffect(() => {\n    if (!useCustomPrice) {\n      // Calculate base estimate (gold price * weight)\n      const baseEstimate = goldPricePerGram * weightInGrams;\n      setEstimatedPrice(baseEstimate);\n\n      // Calculate total estimate including all charges\n      const totalEstimate = baseEstimate + makingCharges + additionalMaterialsCharges;\n      setTotalEstimatedPrice(totalEstimate);\n\n      // Keep custom price in sync with total estimate\n      setCustomPrice(totalEstimate);\n    }\n\n    // Calculate total amount\n    const pricePerUnit = useCustomPrice ? customPrice : totalEstimatedPrice;\n    const total = pricePerUnit * quantity;\n    setTotalAmount(total);\n\n    // Calculate minimum advance payment (25% of total)\n    const minPayment = total * 0.25;\n    setMinAdvancePayment(minPayment);\n\n    // Only set default advance payment if it's the first calculation or currently zero\n    if (advancePaymentAmount === 0) {\n      setAdvancePaymentAmount(minPayment);\n    }\n  }, [goldPricePerGram, weightInGrams, makingCharges, additionalMaterialsCharges, useCustomPrice, customPrice, quantity, estimatedPrice, totalEstimatedPrice, advancePaymentAmount]);\n\n  // Handle image upload with compression\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      try {\n        // Show loading state\n        setImagePreview('loading');\n\n        // Check file type\n        if (!file.type.startsWith('image/')) {\n          alert('Please upload an image file');\n          setImagePreview(null);\n          return;\n        }\n\n        // Check initial file size (limit to 10MB for raw upload)\n        if (file.size > 10 * 1024 * 1024) {\n          alert('Image size should be less than 10MB');\n          setImagePreview(null);\n          return;\n        }\n\n        // Compress the image if larger than 1MB\n        let imageData: string;\n        if (file.size > 1 * 1024 * 1024) {\n          console.log(`Compressing image: ${(file.size / 1024 / 1024).toFixed(2)}MB`);\n          imageData = await compressImage(file, 1, 1200); // Max 1MB, max 1200px width/height\n          console.log(`Compressed to approximately: ${(imageData.length / 1024 / 1024 * 0.75).toFixed(2)}MB`);\n        } else {\n          // For small images, just read as data URL without compression\n          imageData = await new Promise<string>((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result as string);\n            reader.onerror = reject;\n            reader.readAsDataURL(file);\n          });\n        }\n\n        // Set the preview\n        setImagePreview(imageData);\n      } catch (error) {\n        console.error('Error processing image:', error);\n        alert('Error processing image. Please try again with a different image.');\n        setImagePreview(null);\n      }\n    }\n  };\n\n  // Check gold stock availability\n  const checkGoldStockAvailability = async () => {\n    if (offerGold !== 'yes' || !Object.values(selectedKarats).some(value => value)) {\n      return { available: true }; // No gold selected, so no need to check\n    }\n\n    try {\n      const response = await fetch('http://localhost:3002/gold-stock/check-availability', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          selectedKarats,\n          karatValues\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to check gold stock availability');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking gold stock availability:', error);\n      return { available: false, error: 'Failed to check gold stock availability' };\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      // Validate advance payment\n      if (totalAmount > 0 && advancePaymentAmount < minAdvancePayment) {\n        // Scroll to the payment section\n        const paymentSection = document.getElementById('supplier-payment-section');\n        if (paymentSection) {\n          paymentSection.scrollIntoView({ behavior: 'smooth' });\n        }\n\n        // Show alert with formatted amount\n        alert(`Advance payment must be at least ${minAdvancePayment.toFixed(2).toLocaleString()} Rs. (25% of total amount)`);\n        return;\n      }\n\n      // Check gold stock availability if offering gold\n      if (offerGold === 'yes') {\n        const stockAvailability = await checkGoldStockAvailability();\n\n        if (!stockAvailability.available) {\n          // Format the unavailable items for display\n          const unavailableItemsText = stockAvailability.unavailableItems\n            .map((item: { purity: string; requested: number; available: number }) =>\n              `${item.purity}: Requested ${item.requested}g, Available ${item.available}g`\n            )\n            .join('\\n');\n\n          const proceed = window.confirm(\n            `Some requested gold is not available in sufficient quantity:\\n\\n${unavailableItemsText}\\n\\nDo you want to proceed anyway?`\n          );\n\n          if (!proceed) {\n            return;\n          }\n        }\n      }\n\n      // Prepare the data to be sent\n      const orderData = {\n        category,\n        supplier,\n        quantity,\n        offerGold,\n        selectedKarats: Object.keys(selectedKarats).filter(k => selectedKarats[k as keyof typeof selectedKarats]),\n        karatValues: Object.fromEntries(\n          Object.entries(karatValues).filter(([k]) => selectedKarats[k as keyof typeof selectedKarats])\n        ),\n        image: imagePreview,\n        branch_id: userBranchId, // Include branch_id from user info\n        goldPricePerGram,\n        selectedKarat, // Include the selected karat from price calculator\n        goldPurity: karatPurityMap[selectedKarat].purity, // Include the purity percentage\n        weightInGrams,\n        makingCharges,\n        additionalMaterialsCharges,\n        baseEstimatedPrice: estimatedPrice, // Base estimate (gold * weight)\n        estimatedPrice: useCustomPrice ? customPrice : totalEstimatedPrice, // Total estimate with all charges\n        totalAmount,\n        // Payment information\n        advance_payment_amount: advancePaymentAmount,\n        total_payment_amount: totalAmount,\n        payment_status: 'Partial', // Initial status is Partial since we're making an advance payment\n        payment_info: {\n          amount_paid: advancePaymentAmount,\n          payment_method: paymentMethod,\n          notes: paymentNotes\n        },\n        // Additional fields for database storage\n        selectedKarat_db: selectedKarat, // Store the selected karat explicitly\n        goldPurity_db: karatPurityMap[selectedKarat].purity // Store the purity explicitly\n      };\n\n      console.log('Including branch_id:', userBranchId);\n      console.log('Order data:', orderData);\n\n      // Send the data to the backend\n      const response = await fetch('http://localhost:3002/orders/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || 'Failed to create order');\n      }\n\n      // If order was created successfully, create the supplier payment record\n      if (result.success && result.orderId) {\n        try {\n          const paymentData = {\n            order_id: result.orderId,\n            amount_paid: advancePaymentAmount,\n            payment_method: paymentMethod,\n            notes: paymentNotes,\n            created_by: localStorage.getItem('userId') || null\n          };\n\n          const paymentResponse = await fetch('http://localhost:3002/supplier-payments/create', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(paymentData),\n          });\n\n          const paymentResult = await paymentResponse.json();\n\n          if (!paymentResponse.ok) {\n            console.error('Payment record creation failed:', paymentResult.message);\n            // We don't throw an error here since the order was already created\n          }\n        } catch (paymentError) {\n          console.error('Error creating payment record:', paymentError);\n          // We don't throw an error here since the order was already created\n        }\n      }\n\n      // Create a notification for the inventory order\n      try {\n        // Get the supplier name - log for debugging\n        console.log('Suppliers list:', suppliers);\n        console.log('Selected supplier ID:', supplier);\n\n        // Try to find the supplier by ID\n        let supplierObj = suppliers.find(s => s.supplier_id.toString() === supplier.toString());\n\n        // If not found, try to find by other means\n        if (!supplierObj) {\n          console.log('Supplier not found by ID, trying alternative methods');\n          // Try to find by ID as a substring (in case format is different)\n          supplierObj = suppliers.find(s => s.supplier_id.toString().includes(supplier.toString()) ||\n                                           supplier.toString().includes(s.supplier_id.toString()));\n        }\n\n        const supplierName = supplierObj ? supplierObj.name : 'Unknown Supplier';\n        console.log('Resolved supplier name:', supplierName);\n\n        // Create the notification\n        const notificationResponse = await fetch('http://localhost:3002/notifications/inventory-order', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify({\n            order_id: result.orderId,\n            supplier_name: supplierName,\n            category: category,\n            branch_id: userBranchId\n          })\n        });\n\n        if (notificationResponse.ok) {\n          console.log('Inventory order notification created successfully');\n        } else {\n          console.error('Failed to create inventory order notification');\n        }\n      } catch (notificationError) {\n        console.error('Error creating inventory order notification:', notificationError);\n      }\n\n      alert('Order submitted successfully!');\n\n      // Reset form fields\n      setCategory('');\n      setSupplier('');\n      setQuantity(20);\n      setOfferGold('yes');\n      setSelectedKarats({\n        '24KT': false,\n        '22KT': false,\n        '21KT': false,\n        '18KT': false,\n        '16KT': false,\n      });\n      setKaratValues({\n        '24KT': 50,\n        '22KT': 50,\n        '21KT': 50,\n        '18KT': 50,\n        '16KT': 50,\n      });\n      setImagePreview(null);\n\n      // Reset price calculation fields\n      setShowPriceCalculation(false);\n      setGoldPricePerGram(0);\n      setWeightInGrams(0);\n      setMakingCharges(0);\n      setAdditionalMaterialsCharges(0);\n      setUseCustomPrice(false);\n      setCustomPrice(0);\n      setEstimatedPrice(0);\n      setTotalEstimatedPrice(0);\n      setTotalAmount(0);\n\n    } catch (error) {\n      console.error('Error submitting order:', error);\n      alert(`Failed to submit order: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n        <h2 className=\"text-2xl font-bold text-center mb-6\">Add New Order</h2>\n\n        <form onSubmit={handleSubmit}>\n          {/* Item Category */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-1\">Item Category</label>\n            <select\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={category}\n              onChange={(e) => {\n                const newCategory = e.target.value;\n                setCategory(newCategory);\n                // Reset supplier selection when category changes\n                setSupplier('');\n                console.log('Category changed to:', newCategory);\n              }}\n              required\n            >\n              <option value=\"\">Select Category</option>\n              {categories.map((cat) => (\n                <option key={cat.category_id} value={cat.category_name}>{cat.category_name}</option>\n              ))}\n            </select>\n          </div>\n\n          {/* Select Supplier */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-1\">Select Supplier</label>\n            <select\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={supplier}\n              onChange={(e) => setSupplier(e.target.value)}\n              required\n            >\n              <option value=\"\">Select Supplier</option>\n              {suppliers\n                .filter(sup => !category || sup.category === category)\n                .map((sup) => (\n                  <option key={sup.supplier_id} value={sup.supplier_id}>\n                    {sup.supplier_id} - {sup.name} {sup.category ? `(${sup.category})` : ''}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          {/* Quantity */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-1\">Quantity</label>\n            <input\n              type=\"number\"\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={quantity}\n              onChange={(e) => {\n                // Parse as integer to avoid floating point issues\n                const newValue = e.target.value === '' ? 1 : parseInt(e.target.value, 10);\n                // Ensure it's a valid number\n                if (!isNaN(newValue)) {\n                  setQuantity(newValue);\n                }\n              }}\n              onBlur={(e) => {\n                // Ensure minimum value of 1 on blur\n                const currentValue = parseInt(e.target.value, 10);\n                if (isNaN(currentValue) || currentValue < 1) {\n                  setQuantity(1);\n                }\n              }}\n              min=\"1\"\n              step=\"1\" // Ensure only whole numbers\n              required\n            />\n          </div>\n\n          {/* Gold Material Option */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-1\">Do You Offer Gold Material?</label>\n            <div className=\"flex items-center space-x-4\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  name=\"offerGold\"\n                  value=\"yes\"\n                  checked={offerGold === 'yes'}\n                  onChange={() => setOfferGold('yes')}\n                  className=\"mr-2\"\n                />\n                Yes\n              </label>\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  name=\"offerGold\"\n                  value=\"no\"\n                  checked={offerGold === 'no'}\n                  onChange={() => setOfferGold('no')}\n                  className=\"mr-2\"\n                />\n                No\n              </label>\n            </div>\n          </div>\n\n          {/* Gold Karat Options - Only show if offerGold is 'yes' */}\n          {offerGold === 'yes' && (\n            <div className=\"mb-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  {Object.keys(selectedKarats).map((karat) => (\n                    <div key={karat} className=\"flex items-center mb-2\">\n                      <input\n                        type=\"checkbox\"\n                        id={karat}\n                        checked={selectedKarats[karat as keyof typeof selectedKarats]}\n                        onChange={() => handleKaratChange(karat)}\n                        className=\"mr-2\"\n                      />\n                      <label htmlFor={karat} className=\"mr-4 w-12\">{karat}</label>\n                      <input\n                        type=\"number\"\n                        value={karatValues[karat as keyof typeof karatValues]}\n                        onChange={(e) => handleKaratValueChange(karat, Number(e.target.value))}\n                        className=\"w-16 p-1 border border-gray-300 rounded-md\"\n                        disabled={!selectedKarats[karat as keyof typeof selectedKarats]}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Price Calculation Button */}\n          <div className=\"mb-4\">\n            <button\n              type=\"button\"\n              className=\"px-4 py-2 bg-yellow-400 text-black rounded-md hover:bg-yellow-500 transition-colors\"\n              onClick={() => setShowPriceCalculation(!showPriceCalculation)}\n            >\n              {showPriceCalculation ? 'Hide Price Calculator' : 'Show Price Calculator'}\n            </button>\n          </div>\n\n          {/* Price Calculation Section - Only show when button is clicked */}\n          {showPriceCalculation && (\n            <div className=\"mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n              <h3 className=\"text-lg font-semibold mb-4\">Price Calculation</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                {/* Gold Karat Selection */}\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Gold Karat</label>\n                  <select\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    value={selectedKarat}\n                    onChange={(e) => updateGoldPriceForKarat(e.target.value as KaratKey)}\n                    disabled={useCustomPrice}\n                  >\n                    {Object.entries(karatPurityMap).map(([karat, { label }]) => (\n                      <option key={karat} value={karat}>\n                        {label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Gold Price Per Gram */}\n                <div>\n                  <div className=\"flex justify-between items-center mb-1\">\n                    <label className=\"block text-sm font-medium\">Gold Price (Rs./g)</label>\n                    <button\n                      type=\"button\"\n                      className=\"text-xs text-blue-500 hover:text-blue-700\"\n                      onClick={fetchGoldPrice}\n                      disabled={isLoadingGoldPrice}\n                    >\n                      {isLoadingGoldPrice ? 'Loading...' : 'Refresh'}\n                    </button>\n                  </div>\n                  <div className=\"relative\">\n                    <input\n                      type=\"number\"\n                      className={`w-full p-2 border border-gray-300 rounded-md ${isLoadingGoldPrice ? 'bg-gray-100' : ''}`}\n                      value={goldPricePerGram.toFixed(2)}\n                      onChange={(e) => setGoldPricePerGram(Number(e.target.value))}\n                      disabled={useCustomPrice || isLoadingGoldPrice}\n                      min=\"0\"\n                      placeholder=\"Enter gold price per gram\"\n                    />\n                    {isLoadingGoldPrice && (\n                      <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2\">\n                        <div className=\"w-4 h-4 border-2 border-gray-300 border-t-blue-500 rounded-full animate-spin\"></div>\n                      </div>\n                    )}\n                  </div>\n                  {goldPriceLastUpdated && (\n                    <p className=\"text-xs text-gray-500 mt-1\">Last updated: {goldPriceLastUpdated}</p>\n                  )}\n                </div>\n\n                {/* Weight in Grams */}\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Weight (g)</label>\n                  <input\n                    type=\"number\"\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    value={weightInGrams}\n                    onChange={(e) => {\n                      const newValue = e.target.value === '' ? 0 : parseFloat(parseFloat(e.target.value).toFixed(3));\n                      if (!isNaN(newValue)) {\n                        setWeightInGrams(newValue);\n                      }\n                    }}\n                    disabled={useCustomPrice}\n                    min=\"0\"\n                    step=\"any\" // Allow any decimal input\n                    placeholder=\"Enter weight in grams\"\n                  />\n                </div>\n\n                {/* Making Charges */}\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Making Charges (Rs.)</label>\n                  <input\n                    type=\"number\"\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    value={makingCharges}\n                    onChange={(e) => {\n                      const newValue = e.target.value === '' ? 0 : parseFloat(parseFloat(e.target.value).toFixed(2));\n                      if (!isNaN(newValue)) {\n                        setMakingCharges(newValue);\n                      }\n                    }}\n                    disabled={useCustomPrice}\n                    min=\"0\"\n                    step=\"any\" // Allow any decimal input\n                    placeholder=\"Enter making charges\"\n                  />\n                </div>\n\n                {/* Additional Materials Charges */}\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Additional Materials Charges (Rs.)</label>\n                  <div className=\"relative\">\n                    <input\n                      type=\"number\"\n                      className=\"w-full p-2 border border-gray-300 rounded-md\"\n                      value={additionalMaterialsCharges}\n                      onChange={(e) => {\n                        const newValue = e.target.value === '' ? 0 : parseFloat(parseFloat(e.target.value).toFixed(2));\n                        if (!isNaN(newValue)) {\n                          setAdditionalMaterialsCharges(newValue);\n                        }\n                      }}\n                      disabled={useCustomPrice}\n                      min=\"0\"\n                      step=\"any\" // Allow any decimal input\n                      placeholder=\"Enter charges for copper, other metals, etc.\"\n                    />\n                    <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2\">\n                      <span className=\"text-xs text-gray-500\">For Cu, other metals</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Custom Price Checkbox */}\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"useCustomPrice\"\n                    checked={useCustomPrice}\n                    onChange={() => setUseCustomPrice(!useCustomPrice)}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor=\"useCustomPrice\" className=\"text-sm font-medium\">Use custom estimate price</label>\n                </div>\n              </div>\n\n              {/* Custom Price Input - Only show if useCustomPrice is true */}\n              {useCustomPrice && (\n                <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <label className=\"block text-sm font-medium\">Custom Estimate Price (per unit)</label>\n                    <button\n                      type=\"button\"\n                      className=\"text-xs text-blue-500 hover:text-blue-700\"\n                      onClick={() => setCustomPrice(totalEstimatedPrice)}\n                      title=\"Reset to calculated estimate\"\n                    >\n                      Reset to calculated price\n                    </button>\n                  </div>\n                  <input\n                    type=\"number\"\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    value={customPrice}\n                    onChange={(e) => {\n                      const newValue = e.target.value === '' ? 0 : parseFloat(parseFloat(e.target.value).toFixed(2));\n                      if (!isNaN(newValue)) {\n                        setCustomPrice(newValue);\n                      }\n                    }}\n                    min=\"0\"\n                    step=\"any\" // Allow any decimal input\n                    placeholder=\"Enter custom price\"\n                  />\n                  <p className=\"text-xs text-gray-600 mt-1\">\n                    Enter the final price including all charges, profit margin, and any negotiated adjustments.\n                    <br />\n                    Calculated estimate: Rs. {totalEstimatedPrice.toFixed(2).toLocaleString()}\n                  </p>\n                </div>\n              )}\n\n              {/* Calculated Prices */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4 pt-4 border-t border-gray-200\">\n                {/* Base Estimate (Gold * Weight) */}\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Base Gold Price (per unit)</label>\n                  <div className=\"p-2 bg-white border border-gray-300 rounded-md\">\n                    Rs. {estimatedPrice.toFixed(2).toLocaleString()}\n                    <span className=\"text-xs text-gray-500 block\">Gold price × weight</span>\n                  </div>\n                </div>\n\n                {/* Total Estimate with All Charges */}\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    {useCustomPrice ? \"Custom Estimate Price (per unit)\" : \"Total Estimate Price (per unit)\"}\n                  </label>\n                  <div className=\"p-2 bg-white border border-gray-300 rounded-md\">\n                    Rs. {useCustomPrice ? customPrice.toFixed(2).toLocaleString() : totalEstimatedPrice.toFixed(2).toLocaleString()}\n                    <span className=\"text-xs text-gray-500 block\">\n                      {useCustomPrice ? \"Custom price\" : \"Gold + making + additional materials\"}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Breakdown of Charges */}\n                {!useCustomPrice && (\n                  <div className=\"md:col-span-2\">\n                    <div className=\"p-2 bg-gray-50 border border-gray-200 rounded-md text-sm\">\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <div>Gold Cost: Rs. {estimatedPrice.toFixed(2).toLocaleString()}</div>\n                        <div>Making Charges: Rs. {makingCharges.toFixed(2).toLocaleString()}</div>\n                        <div>Additional Materials: Rs. {additionalMaterialsCharges.toFixed(2).toLocaleString()}</div>\n                        <div className=\"font-semibold\">Total: Rs. {totalEstimatedPrice.toFixed(2).toLocaleString()}</div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Total Amount */}\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium mb-1\">Total Order Amount</label>\n                  <div className=\"p-2 bg-white border border-gray-300 rounded-md font-semibold text-yellow-700\">\n                    Rs. {totalAmount.toFixed(2).toLocaleString()}\n                    <span className=\"text-xs text-gray-500 block\">\n                      {quantity} {quantity === 1 ? 'unit' : 'units'} × Rs. {(useCustomPrice ? customPrice : totalEstimatedPrice).toFixed(2).toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Image Upload - Always visible regardless of gold material option */}\n          <div className=\"mb-4\">\n            <div className=\"flex flex-col items-center\">\n              <label className=\"block text-sm font-medium mb-2 text-center\">\n                Add a image of Design\n              </label>\n              <div className=\"border border-gray-300 rounded-md p-2 w-full h-32 flex items-center justify-center\">\n                {imagePreview === 'loading' ? (\n                  <div className=\"flex flex-col items-center justify-center\">\n                    <div className=\"w-8 h-8 border-4 border-gray-300 border-t-blue-500 rounded-full animate-spin mb-2\"></div>\n                    <span className=\"text-sm text-gray-500\">Compressing image...</span>\n                  </div>\n                ) : imagePreview ? (\n                  <div className=\"relative w-full h-full\">\n                    <Image\n                      src={imagePreview}\n                      alt=\"Design Preview\"\n                      fill\n                      style={{ objectFit: 'contain' }}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setImagePreview(null)}\n                      className=\"absolute top-0 right-0 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs\"\n                      title=\"Remove image\"\n                    >\n                      ×\n                    </button>\n                  </div>\n                ) : (\n                  <label className=\"cursor-pointer text-center\">\n                    <span className=\"text-blue-500\">Click to upload</span>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={handleImageUpload}\n                    />\n                  </label>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Supplier Payment Section - Only show if total amount is calculated */}\n          {totalAmount > 0 && (\n            <div id=\"supplier-payment-section\" className=\"mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n              <h3 className=\"text-lg font-semibold mb-4\">Supplier Payment</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                {/* Advance Payment Amount */}\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Advance Payment Amount (Rs.)\n                    <span className=\"text-red-500 ml-1\">*</span>\n                    <span className=\"text-xs text-gray-500 ml-2\">(Min: {minAdvancePayment.toFixed(2).toLocaleString()} Rs.)</span>\n                  </label>\n                  <div className=\"relative\">\n                    <input\n                      id=\"advance-payment-input\"\n                      type=\"text\"\n                      className={`w-full p-2 border ${advancePaymentAmount < minAdvancePayment ? 'border-red-300' : 'border-gray-300'} rounded-md`}\n                      defaultValue={advancePaymentAmount.toString()}\n                      onInput={(e: React.FormEvent<HTMLInputElement>) => {\n                        const target = e.target as HTMLInputElement;\n                        // Allow direct typing of any value\n                        let inputValue = target.value.replace(/[^\\d.]/g, ''); // Remove non-numeric characters except decimal\n\n                        // Ensure only one decimal point\n                        const decimalCount = (inputValue.match(/\\./g) || []).length;\n                        if (decimalCount > 1) {\n                          const parts = inputValue.split('.');\n                          inputValue = parts[0] + '.' + parts.slice(1).join('');\n                        }\n\n                        // Update the input value directly\n                        target.value = inputValue;\n\n                        // Update React state\n                        const newValue = inputValue === '' ? 0 : parseFloat(inputValue);\n                        if (!isNaN(newValue)) {\n                          setAdvancePaymentAmount(newValue);\n                        }\n                      }}\n                      required\n                    />\n                    <button\n                      type=\"button\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-xs bg-blue-500 text-white px-2 py-1 rounded\"\n                      onClick={() => {\n                        setAdvancePaymentAmount(minAdvancePayment);\n                        // Also update the input field directly\n                        const inputElement = document.querySelector('#advance-payment-input') as HTMLInputElement;\n                        if (inputElement) {\n                          inputElement.value = minAdvancePayment.toString();\n                        }\n                      }}\n                      title=\"Set to minimum required amount\"\n                    >\n                      Set Min\n                    </button>\n                  </div>\n                  {advancePaymentAmount < minAdvancePayment && (\n                    <p className=\"text-red-500 text-xs mt-1\">\n                      Advance payment must be at least {minAdvancePayment.toFixed(2).toLocaleString()} Rs. (25% of total)\n                    </p>\n                  )}\n                </div>\n\n                {/* Payment Method */}\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Payment Method</label>\n                  <select\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    value={paymentMethod}\n                    onChange={(e) => setPaymentMethod(e.target.value)}\n                  >\n                    <option value=\"Cash\">Cash</option>\n                    <option value=\"Bank Transfer\">Bank Transfer</option>\n                    <option value=\"Check\">Check</option>\n                    <option value=\"Credit Card\">Credit Card</option>\n                    <option value=\"Other\">Other</option>\n                  </select>\n                </div>\n\n                {/* Payment Notes */}\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium mb-1\">Payment Notes</label>\n                  <textarea\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    value={paymentNotes}\n                    onChange={(e) => setPaymentNotes(e.target.value)}\n                    rows={2}\n                    placeholder=\"Add any notes about the payment\"\n                  />\n                </div>\n              </div>\n\n              {/* Payment Summary */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-4 pt-4 border-t border-gray-200\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Total Amount</label>\n                  <div className=\"p-2 bg-white border border-gray-300 rounded-md\">\n                    Rs. {totalAmount.toFixed(2).toLocaleString()}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Advance Payment</label>\n                  <div className=\"p-2 bg-white border border-gray-300 rounded-md\">\n                    Rs. {advancePaymentAmount.toFixed(2).toLocaleString()}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Remaining Balance</label>\n                  <div className=\"p-2 bg-white border border-gray-300 rounded-md font-semibold text-red-600\">\n                    Rs. {(totalAmount - advancePaymentAmount).toFixed(2).toLocaleString()}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n\n\n          {/* Submit and Cancel Buttons */}\n          <div className=\"flex justify-between\">\n            <button\n              type=\"submit\"\n              className=\"bg-yellow-400 text-black px-8 py-2 rounded-full font-medium\"\n            >\n              Submit\n            </button>\n            <button\n              type=\"button\"\n              className=\"bg-gray-200 text-black px-8 py-2 rounded-full font-medium\"\n              onClick={() => window.history.back()}\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n\n      {/* Supplier Category Chart - Only show if category is selected */}\n      {category && (\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h2 className=\"text-xl font-bold text-center mb-6\">Leading Supplier Expert in the Field</h2>\n          <p className=\"text-center text-sm text-gray-500 mb-4\">\n            This chart shows the performance of suppliers in the <span className=\"font-semibold\">{category}</span> category\n          </p>\n          <SupplierCategoryChart selectedCategory={category} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddOrderPage;\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AANA;;;;;;;AAQA,MAAM,eAAe;IACnB,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IAEnC,uBAAuB;IACvB,MAAM,mBAAmB,aAAa,GAAG,CAAC;IAC1C,MAAM,oBAAoB,aAAa,GAAG,CAAC;IAC3C,MAAM,sBAAsB,aAAa,GAAG,CAAC;IAC7C,MAAM,oBAAoB,aAAa,GAAG,CAAC;IAC3C,MAAM,qBAAqB,aAAa,GAAG,CAAC;IAC5C,MAAM,0BAA0B,aAAa,GAAG,CAAC;IACjD,MAAM,uBAAuB,aAAa,GAAG,CAAC;IAE9C,2BAA2B;IAC3B,MAAM,4BAA4B,aAAa,GAAG,CAAC;IACnD,MAAM,yBAAyB,aAAa,GAAG,CAAC;IAChD,MAAM,sBAAsB,aAAa,GAAG,CAAC;IAC7C,MAAM,yBAAyB,aAAa,GAAG,CAAC;IAChD,MAAM,yBAAyB,aAAa,GAAG,CAAC;IAChD,MAAM,sCAAsC,aAAa,GAAG,CAAC;IAC7D,MAAM,8BAA8B,aAAa,GAAG,CAAC;IACrD,MAAM,0BAA0B,aAAa,GAAG,CAAC;IACjD,MAAM,uBAAuB,aAAa,GAAG,CAAC;IAE9C,sBAAsB;IACtB,MAAM,0BAA0B,aAAa,GAAG,CAAC;IACjD,MAAM,4BAA4B,aAAa,GAAG,CAAC;IACnD,MAAM,yBAAyB,aAAa,GAAG,CAAC;IAEhD,wBAAwB;IACxB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,qBAAqB;IAC9D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,uBAAuB;IAChE,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,oBAAoB,SAAS,mBAAmB,MAAM;IAC/F,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QACnD,QAAQ;QACR,QAAQ;QACR,QAAQ;QACR,QAAQ;QACR,QAAQ;IACV;IACA,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QAC7C,QAAQ;QACR,QAAQ;QACR,QAAQ;QACR,QAAQ;QACR,QAAQ;IACV;IACA,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA6B;IAC5E,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAS,EAAE;IAKpD,MAAM,iBAAsE;QAC1E,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA8B;QAC9D,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA2B;QAC3D,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA2B;QAC3D,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA2B;QAC3D,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA2B;QAC3D,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA2B;QAC3D,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA2B;QAC3D,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA2B;QAC3D,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA2B;QAC3D,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAA2B;IAC7D;IAEA,2BAA2B;IAC3B,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjE,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,qBAAqB;IAC5E,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY;IAC7D,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,4BAA4B,8BAA8B,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,8BAA8B;IAC/G,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,gCAAgC;IACzF,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,uCAAuC;IAC1G,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7D,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAEhF,0BAA0B;IAC1B,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAC7D,0BAA0B,WAAW,2BAA2B;IAElE,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,eAAe;IAE9E,gDAAgD;IAChD,MAAM,CAAC,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAClC,uBAAuB,WAAW,wBAAwB;IAG5D,kBAAkB;IAClB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAEhE,uBAAuB;IACvB,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkD,EAAE;IAE/F,kCAAkC;IAClC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,kCAAkC;QAClC,MAAM,OAAO,aAAa,OAAO,CAAC;QAClC,MAAM,WAAW,aAAa,OAAO,CAAC;QAEtC,QAAQ,GAAG,CAAC,uCAAuC,MAAM,cAAc;QAEvE,uDAAuD;QACvD,MAAM,iBAAiB,SAAS,UAAU,UAAW,MAAM,iBAAiB;QAC5E,YAAY;QAEZ,gBAAgB;QAChB,MAAM,kBAAkB,WAAW,OAAO,YAAY;QACtD,gBAAgB;IAClB,GAAG,EAAE;IAEL,qCAAqC;IACrC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,kBAAkB;YACtB,IAAI;gBACF,MAAM,WAAW,MAAM,MAAM;gBAC7B,IAAI,SAAS,EAAE,EAAE;oBACf,MAAM,OAAO,MAAM,SAAS,IAAI;oBAChC,cAAc;gBAChB,OAAO;oBACL,QAAQ,KAAK,CAAC;oBACd,gDAAgD;oBAChD,cAAc;wBACZ;4BAAE,aAAa;4BAAG,eAAe;wBAAW;wBAC5C;4BAAE,aAAa;4BAAG,eAAe;wBAAO;wBACxC;4BAAE,aAAa;4BAAG,eAAe;wBAAW;wBAC5C;4BAAE,aAAa;4BAAG,eAAe;wBAAW;wBAC5C;4BAAE,aAAa;4BAAG,eAAe;wBAAQ;qBAC1C;gBACH;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,8BAA8B;gBAC5C,gDAAgD;gBAChD,cAAc;oBACZ;wBAAE,aAAa;wBAAG,eAAe;oBAAW;oBAC5C;wBAAE,aAAa;wBAAG,eAAe;oBAAO;oBACxC;wBAAE,aAAa;wBAAG,eAAe;oBAAW;oBAC5C;wBAAE,aAAa;wBAAG,eAAe;oBAAW;oBAC5C;wBAAE,aAAa;wBAAG,eAAe;oBAAQ;iBAC1C;YACH;QACF;QAEA;IACF,GAAG,EAAE;IAEL,oCAAoC;IACpC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,iBAAiB;YACrB,IAAI;gBACF,MAAM,WAAW,MAAM,MAAM;gBAC7B,IAAI,SAAS,EAAE,EAAE;oBACf,MAAM,OAAO,MAAM,SAAS,IAAI;oBAChC,aAAa;gBACf,OAAO;oBACL,QAAQ,KAAK,CAAC;gBAChB;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,6BAA6B;gBAC3C,gCAAgC;gBAChC,aAAa;oBACX;wBAAE,aAAa;wBAAO,MAAM;wBAAkB,UAAU;oBAAe;oBACvE;wBAAE,aAAa;wBAAO,MAAM;wBAAkB,UAAU;oBAAQ;oBAChE;wBAAE,aAAa;wBAAO,MAAM;wBAAgB,UAAU;oBAAY;oBAClE;wBAAE,aAAa;wBAAO,MAAM;wBAAgB,UAAU;oBAAW;iBAClE;YACH;QACF;QAEA;IACF,GAAG,EAAE;IAEL,+BAA+B;IAC/B,MAAM,oBAAoB,CAAC;QACzB,kBAAkB;YAChB,GAAG,cAAc;YACjB,CAAC,MAAM,EAAE,CAAC,cAAc,CAAC,MAAqC;QAChE;IACF;IAEA,4BAA4B;IAC5B,MAAM,yBAAyB,CAAC,OAAe;QAC7C,eAAe;YACb,GAAG,WAAW;YACd,CAAC,MAAM,EAAE;QACX;IACF;IAEA,uCAAuC;IACvC,MAAM,iBAAiB;QACrB,IAAI;YACF,sBAAsB;YACtB,MAAM,WAAW,MAAM,MAAM;YAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,KAAK,OAAO,EAAE;gBAChB,2BAA2B;gBAC3B,iBAAiB,KAAK,KAAK;gBAE3B,qDAAqD;gBACrD,MAAM,SAAS,cAAc,CAAC,cAAc,CAAC,MAAM;gBACnD,MAAM,gBAAgB,KAAK,KAAK,GAAG;gBACnC,oBAAoB;gBAEpB,uBAAuB;gBACvB,MAAM,OAAO,IAAI,KAAK,KAAK,SAAS;gBACpC,wBAAwB,KAAK,cAAc;YAC7C,OAAO;gBACL,QAAQ,KAAK,CAAC,+BAA+B,KAAK,OAAO;YAC3D;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;QAC9C,SAAU;YACR,sBAAsB;QACxB;IACF;IAEA,mDAAmD;IACnD,MAAM,0BAA0B,CAAC;QAC/B,iBAAiB;QACjB,IAAI,gBAAgB,GAAG;YACrB,MAAM,SAAS,cAAc,CAAC,MAAM,CAAC,MAAM;YAC3C,MAAM,gBAAgB,gBAAgB;YACtC,oBAAoB;QACtB;IACF;IAEA,kDAAkD;IAClD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,sBAAsB;YACxB;QACF;IACF,GAAG;QAAC;KAAqB;IAEzB,0EAA0E;IAC1E,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,sBAAsB;YACxB,wBAAwB;YACxB,eAAe,WAAW;YAE1B,kFAAkF;YAClF,IAAI,CAAC,yBAAyB;gBAC5B,MAAM,aAAa,WAAW,wBAAwB;gBACtD,wBAAwB;YAC1B;YAEA,6BAA6B;YAC7B,IAAI,wBAAwB;gBAC1B,uDAAuD;gBACvD,MAAM,iBAAiB,uBAAuB,QAAQ,CAAC,QACnD,uBAAuB,OAAO,CAAC,MAAM,OACrC;gBAEJ,mCAAmC;gBACnC,IAAI,OAAO,IAAI,CAAC,gBAAgB,QAAQ,CAAC,iBAA6B;oBACpE,iBAAiB;gBACnB;YACF;YAEA,yBAAyB;YACzB,IAAI,wBAAwB;gBAC1B,iBAAiB,WAAW;YAC9B;YAEA,iCAAiC;YACjC,IAAI,wBAAwB;gBAC1B,iBAAiB,WAAW;YAC9B;YAEA,+CAA+C;YAC/C,IAAI,qCAAqC;gBACvC,8BAA8B,WAAW;YAC3C;YAEA,sCAAsC;YACtC,IAAI,2BAA2B;gBAC7B,oBAAoB,WAAW;YACjC;QACF;IACF,GAAG;QACD;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,4BAA4B;IAC5B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,gBAAgB;YACnB,gDAAgD;YAChD,MAAM,eAAe,mBAAmB;YACxC,kBAAkB;YAElB,iDAAiD;YACjD,MAAM,gBAAgB,eAAe,gBAAgB;YACrD,uBAAuB;YAEvB,gDAAgD;YAChD,eAAe;QACjB;QAEA,yBAAyB;QACzB,MAAM,eAAe,iBAAiB,cAAc;QACpD,MAAM,QAAQ,eAAe;QAC7B,eAAe;QAEf,mDAAmD;QACnD,MAAM,aAAa,QAAQ;QAC3B,qBAAqB;QAErB,mFAAmF;QACnF,IAAI,yBAAyB,GAAG;YAC9B,wBAAwB;QAC1B;IACF,GAAG;QAAC;QAAkB;QAAe;QAAe;QAA4B;QAAgB;QAAa;QAAU;QAAgB;QAAqB;KAAqB;IAEjL,uCAAuC;IACvC,MAAM,oBAAoB,OAAO;QAC/B,MAAM,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;QAChC,IAAI,MAAM;YACR,IAAI;gBACF,qBAAqB;gBACrB,gBAAgB;gBAEhB,kBAAkB;gBAClB,IAAI,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,WAAW;oBACnC,MAAM;oBACN,gBAAgB;oBAChB;gBACF;gBAEA,yDAAyD;gBACzD,IAAI,KAAK,IAAI,GAAG,KAAK,OAAO,MAAM;oBAChC,MAAM;oBACN,gBAAgB;oBAChB;gBACF;gBAEA,wCAAwC;gBACxC,IAAI;gBACJ,IAAI,KAAK,IAAI,GAAG,IAAI,OAAO,MAAM;oBAC/B,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,CAAC,KAAK,IAAI,GAAG,OAAO,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;oBAC1E,YAAY,MAAM,CAAA,GAAA,gIAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,GAAG,OAAO,mCAAmC;oBACnF,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,CAAC,UAAU,MAAM,GAAG,OAAO,OAAO,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;gBACpG,OAAO;oBACL,8DAA8D;oBAC9D,YAAY,MAAM,IAAI,QAAgB,CAAC,SAAS;wBAC9C,MAAM,SAAS,IAAI;wBACnB,OAAO,SAAS,GAAG,IAAM,QAAQ,OAAO,MAAM;wBAC9C,OAAO,OAAO,GAAG;wBACjB,OAAO,aAAa,CAAC;oBACvB;gBACF;gBAEA,kBAAkB;gBAClB,gBAAgB;YAClB,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,2BAA2B;gBACzC,MAAM;gBACN,gBAAgB;YAClB;QACF;IACF;IAEA,gCAAgC;IAChC,MAAM,6BAA6B;QACjC,IAAI,cAAc,SAAS,CAAC,OAAO,MAAM,CAAC,gBAAgB,IAAI,CAAC,CAAA,QAAS,QAAQ;YAC9E,OAAO;gBAAE,WAAW;YAAK,GAAG,wCAAwC;QACtE;QAEA,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,uDAAuD;gBAClF,QAAQ;gBACR,SAAS;oBACP,gBAAgB;oBAChB,iBAAiB,CAAC,OAAO,EAAE,aAAa,OAAO,CAAC,UAAU;gBAC5D;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB;oBACA;gBACF;YACF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YAEA,OAAO,MAAM,SAAS,IAAI;QAC5B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,OAAO;gBAAE,WAAW;gBAAO,OAAO;YAA0C;QAC9E;IACF;IAEA,yBAAyB;IACzB,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAEhB,IAAI;YACF,2BAA2B;YAC3B,IAAI,cAAc,KAAK,uBAAuB,mBAAmB;gBAC/D,gCAAgC;gBAChC,MAAM,iBAAiB,SAAS,cAAc,CAAC;gBAC/C,IAAI,gBAAgB;oBAClB,eAAe,cAAc,CAAC;wBAAE,UAAU;oBAAS;gBACrD;gBAEA,mCAAmC;gBACnC,MAAM,CAAC,iCAAiC,EAAE,kBAAkB,OAAO,CAAC,GAAG,cAAc,GAAG,0BAA0B,CAAC;gBACnH;YACF;YAEA,iDAAiD;YACjD,IAAI,cAAc,OAAO;gBACvB,MAAM,oBAAoB,MAAM;gBAEhC,IAAI,CAAC,kBAAkB,SAAS,EAAE;oBAChC,2CAA2C;oBAC3C,MAAM,uBAAuB,kBAAkB,gBAAgB,CAC5D,GAAG,CAAC,CAAC,OACJ,GAAG,KAAK,MAAM,CAAC,YAAY,EAAE,KAAK,SAAS,CAAC,aAAa,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,EAE7E,IAAI,CAAC;oBAER,MAAM,UAAU,OAAO,OAAO,CAC5B,CAAC,gEAAgE,EAAE,qBAAqB,kCAAkC,CAAC;oBAG7H,IAAI,CAAC,SAAS;wBACZ;oBACF;gBACF;YACF;YAEA,8BAA8B;YAC9B,MAAM,YAAY;gBAChB;gBACA;gBACA;gBACA;gBACA,gBAAgB,OAAO,IAAI,CAAC,gBAAgB,MAAM,CAAC,CAAA,IAAK,cAAc,CAAC,EAAiC;gBACxG,aAAa,OAAO,WAAW,CAC7B,OAAO,OAAO,CAAC,aAAa,MAAM,CAAC,CAAC,CAAC,EAAE,GAAK,cAAc,CAAC,EAAiC;gBAE9F,OAAO;gBACP,WAAW;gBACX;gBACA;gBACA,YAAY,cAAc,CAAC,cAAc,CAAC,MAAM;gBAChD;gBACA;gBACA;gBACA,oBAAoB;gBACpB,gBAAgB,iBAAiB,cAAc;gBAC/C;gBACA,sBAAsB;gBACtB,wBAAwB;gBACxB,sBAAsB;gBACtB,gBAAgB;gBAChB,cAAc;oBACZ,aAAa;oBACb,gBAAgB;oBAChB,OAAO;gBACT;gBACA,yCAAyC;gBACzC,kBAAkB;gBAClB,eAAe,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,8BAA8B;YACpF;YAEA,QAAQ,GAAG,CAAC,wBAAwB;YACpC,QAAQ,GAAG,CAAC,eAAe;YAE3B,+BAA+B;YAC/B,MAAM,WAAW,MAAM,MAAM,uCAAuC;gBAClE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,MAAM,SAAS,MAAM,SAAS,IAAI;YAElC,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,OAAO,OAAO,IAAI;YACpC;YAEA,wEAAwE;YACxE,IAAI,OAAO,OAAO,IAAI,OAAO,OAAO,EAAE;gBACpC,IAAI;oBACF,MAAM,cAAc;wBAClB,UAAU,OAAO,OAAO;wBACxB,aAAa;wBACb,gBAAgB;wBAChB,OAAO;wBACP,YAAY,aAAa,OAAO,CAAC,aAAa;oBAChD;oBAEA,MAAM,kBAAkB,MAAM,MAAM,kDAAkD;wBACpF,QAAQ;wBACR,SAAS;4BACP,gBAAgB;wBAClB;wBACA,MAAM,KAAK,SAAS,CAAC;oBACvB;oBAEA,MAAM,gBAAgB,MAAM,gBAAgB,IAAI;oBAEhD,IAAI,CAAC,gBAAgB,EAAE,EAAE;wBACvB,QAAQ,KAAK,CAAC,mCAAmC,cAAc,OAAO;oBACtE,mEAAmE;oBACrE;gBACF,EAAE,OAAO,cAAc;oBACrB,QAAQ,KAAK,CAAC,kCAAkC;gBAChD,mEAAmE;gBACrE;YACF;YAEA,gDAAgD;YAChD,IAAI;gBACF,4CAA4C;gBAC5C,QAAQ,GAAG,CAAC,mBAAmB;gBAC/B,QAAQ,GAAG,CAAC,yBAAyB;gBAErC,iCAAiC;gBACjC,IAAI,cAAc,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,WAAW,CAAC,QAAQ,OAAO,SAAS,QAAQ;gBAEpF,2CAA2C;gBAC3C,IAAI,CAAC,aAAa;oBAChB,QAAQ,GAAG,CAAC;oBACZ,iEAAiE;oBACjE,cAAc,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,WAAW,CAAC,QAAQ,GAAG,QAAQ,CAAC,SAAS,QAAQ,OACpD,SAAS,QAAQ,GAAG,QAAQ,CAAC,EAAE,WAAW,CAAC,QAAQ;gBACtF;gBAEA,MAAM,eAAe,cAAc,YAAY,IAAI,GAAG;gBACtD,QAAQ,GAAG,CAAC,2BAA2B;gBAEvC,0BAA0B;gBAC1B,MAAM,uBAAuB,MAAM,MAAM,uDAAuD;oBAC9F,QAAQ;oBACR,SAAS;wBACP,gBAAgB;wBAChB,iBAAiB,CAAC,OAAO,EAAE,aAAa,OAAO,CAAC,UAAU;oBAC5D;oBACA,MAAM,KAAK,SAAS,CAAC;wBACnB,UAAU,OAAO,OAAO;wBACxB,eAAe;wBACf,UAAU;wBACV,WAAW;oBACb;gBACF;gBAEA,IAAI,qBAAqB,EAAE,EAAE;oBAC3B,QAAQ,GAAG,CAAC;gBACd,OAAO;oBACL,QAAQ,KAAK,CAAC;gBAChB;YACF,EAAE,OAAO,mBAAmB;gBAC1B,QAAQ,KAAK,CAAC,gDAAgD;YAChE;YAEA,MAAM;YAEN,oBAAoB;YACpB,YAAY;YACZ,YAAY;YACZ,YAAY;YACZ,aAAa;YACb,kBAAkB;gBAChB,QAAQ;gBACR,QAAQ;gBACR,QAAQ;gBACR,QAAQ;gBACR,QAAQ;YACV;YACA,eAAe;gBACb,QAAQ;gBACR,QAAQ;gBACR,QAAQ;gBACR,QAAQ;gBACR,QAAQ;YACV;YACA,gBAAgB;YAEhB,iCAAiC;YACjC,wBAAwB;YACxB,oBAAoB;YACpB,iBAAiB;YACjB,iBAAiB;YACjB,8BAA8B;YAC9B,kBAAkB;YAClB,eAAe;YACf,kBAAkB;YAClB,uBAAuB;YACvB,eAAe;QAEjB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2BAA2B;YACzC,MAAM,CAAC,wBAAwB,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;QAC7F;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAsC;;;;;;kCAEpD,8OAAC;wBAAK,UAAU;;0CAEd,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAM,WAAU;kDAAiC;;;;;;kDAClD,8OAAC;wCACC,WAAU;wCACV,OAAO;wCACP,UAAU,CAAC;4CACT,MAAM,cAAc,EAAE,MAAM,CAAC,KAAK;4CAClC,YAAY;4CACZ,iDAAiD;4CACjD,YAAY;4CACZ,QAAQ,GAAG,CAAC,wBAAwB;wCACtC;wCACA,QAAQ;;0DAER,8OAAC;gDAAO,OAAM;0DAAG;;;;;;4CAChB,WAAW,GAAG,CAAC,CAAC,oBACf,8OAAC;oDAA6B,OAAO,IAAI,aAAa;8DAAG,IAAI,aAAa;mDAA7D,IAAI,WAAW;;;;;;;;;;;;;;;;;0CAMlC,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAM,WAAU;kDAAiC;;;;;;kDAClD,8OAAC;wCACC,WAAU;wCACV,OAAO;wCACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;wCAC3C,QAAQ;;0DAER,8OAAC;gDAAO,OAAM;0DAAG;;;;;;4CAChB,UACE,MAAM,CAAC,CAAA,MAAO,CAAC,YAAY,IAAI,QAAQ,KAAK,UAC5C,GAAG,CAAC,CAAC,oBACJ,8OAAC;oDAA6B,OAAO,IAAI,WAAW;;wDACjD,IAAI,WAAW;wDAAC;wDAAI,IAAI,IAAI;wDAAC;wDAAE,IAAI,QAAQ,GAAG,CAAC,CAAC,EAAE,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG;;mDAD1D,IAAI,WAAW;;;;;;;;;;;;;;;;;0CAQpC,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAM,WAAU;kDAAiC;;;;;;kDAClD,8OAAC;wCACC,MAAK;wCACL,WAAU;wCACV,OAAO;wCACP,UAAU,CAAC;4CACT,kDAAkD;4CAClD,MAAM,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK,KAAK,IAAI,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE;4CACtE,6BAA6B;4CAC7B,IAAI,CAAC,MAAM,WAAW;gDACpB,YAAY;4CACd;wCACF;wCACA,QAAQ,CAAC;4CACP,oCAAoC;4CACpC,MAAM,eAAe,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE;4CAC9C,IAAI,MAAM,iBAAiB,eAAe,GAAG;gDAC3C,YAAY;4CACd;wCACF;wCACA,KAAI;wCACJ,MAAK,IAAI,4BAA4B;;wCACrC,QAAQ;;;;;;;;;;;;0CAKZ,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAM,WAAU;kDAAiC;;;;;;kDAClD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAM,WAAU;;kEACf,8OAAC;wDACC,MAAK;wDACL,MAAK;wDACL,OAAM;wDACN,SAAS,cAAc;wDACvB,UAAU,IAAM,aAAa;wDAC7B,WAAU;;;;;;oDACV;;;;;;;0DAGJ,8OAAC;gDAAM,WAAU;;kEACf,8OAAC;wDACC,MAAK;wDACL,MAAK;wDACL,OAAM;wDACN,SAAS,cAAc;wDACvB,UAAU,IAAM,aAAa;wDAC7B,WAAU;;;;;;oDACV;;;;;;;;;;;;;;;;;;;4BAOP,cAAc,uBACb,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAI,WAAU;8CACb,cAAA,8OAAC;kDACE,OAAO,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,sBAChC,8OAAC;gDAAgB,WAAU;;kEACzB,8OAAC;wDACC,MAAK;wDACL,IAAI;wDACJ,SAAS,cAAc,CAAC,MAAqC;wDAC7D,UAAU,IAAM,kBAAkB;wDAClC,WAAU;;;;;;kEAEZ,8OAAC;wDAAM,SAAS;wDAAO,WAAU;kEAAa;;;;;;kEAC9C,8OAAC;wDACC,MAAK;wDACL,OAAO,WAAW,CAAC,MAAkC;wDACrD,UAAU,CAAC,IAAM,uBAAuB,OAAO,OAAO,EAAE,MAAM,CAAC,KAAK;wDACpE,WAAU;wDACV,UAAU,CAAC,cAAc,CAAC,MAAqC;;;;;;;+CAdzD;;;;;;;;;;;;;;;;;;;;0CAwBpB,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCACC,MAAK;oCACL,WAAU;oCACV,SAAS,IAAM,wBAAwB,CAAC;8CAEvC,uBAAuB,0BAA0B;;;;;;;;;;;4BAKrD,sCACC,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAG,WAAU;kDAA6B;;;;;;kDAE3C,8OAAC;wCAAI,WAAU;;0DAEb,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDACC,WAAU;wDACV,OAAO;wDACP,UAAU,CAAC,IAAM,wBAAwB,EAAE,MAAM,CAAC,KAAK;wDACvD,UAAU;kEAET,OAAO,OAAO,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,iBACrD,8OAAC;gEAAmB,OAAO;0EACxB;+DADU;;;;;;;;;;;;;;;;0DAQnB,8OAAC;;kEACC,8OAAC;wDAAI,WAAU;;0EACb,8OAAC;gEAAM,WAAU;0EAA4B;;;;;;0EAC7C,8OAAC;gEACC,MAAK;gEACL,WAAU;gEACV,SAAS;gEACT,UAAU;0EAET,qBAAqB,eAAe;;;;;;;;;;;;kEAGzC,8OAAC;wDAAI,WAAU;;0EACb,8OAAC;gEACC,MAAK;gEACL,WAAW,CAAC,6CAA6C,EAAE,qBAAqB,gBAAgB,IAAI;gEACpG,OAAO,iBAAiB,OAAO,CAAC;gEAChC,UAAU,CAAC,IAAM,oBAAoB,OAAO,EAAE,MAAM,CAAC,KAAK;gEAC1D,UAAU,kBAAkB;gEAC5B,KAAI;gEACJ,aAAY;;;;;;4DAEb,oCACC,8OAAC;gEAAI,WAAU;0EACb,cAAA,8OAAC;oEAAI,WAAU;;;;;;;;;;;;;;;;;oDAIpB,sCACC,8OAAC;wDAAE,WAAU;;4DAA6B;4DAAe;;;;;;;;;;;;;0DAK7D,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDACC,MAAK;wDACL,WAAU;wDACV,OAAO;wDACP,UAAU,CAAC;4DACT,MAAM,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK,KAAK,IAAI,WAAW,WAAW,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC;4DAC3F,IAAI,CAAC,MAAM,WAAW;gEACpB,iBAAiB;4DACnB;wDACF;wDACA,UAAU;wDACV,KAAI;wDACJ,MAAK,MAAM,0BAA0B;;wDACrC,aAAY;;;;;;;;;;;;0DAKhB,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDACC,MAAK;wDACL,WAAU;wDACV,OAAO;wDACP,UAAU,CAAC;4DACT,MAAM,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK,KAAK,IAAI,WAAW,WAAW,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC;4DAC3F,IAAI,CAAC,MAAM,WAAW;gEACpB,iBAAiB;4DACnB;wDACF;wDACA,UAAU;wDACV,KAAI;wDACJ,MAAK,MAAM,0BAA0B;;wDACrC,aAAY;;;;;;;;;;;;0DAKhB,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDAAI,WAAU;;0EACb,8OAAC;gEACC,MAAK;gEACL,WAAU;gEACV,OAAO;gEACP,UAAU,CAAC;oEACT,MAAM,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK,KAAK,IAAI,WAAW,WAAW,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC;oEAC3F,IAAI,CAAC,MAAM,WAAW;wEACpB,8BAA8B;oEAChC;gEACF;gEACA,UAAU;gEACV,KAAI;gEACJ,MAAK,MAAM,0BAA0B;;gEACrC,aAAY;;;;;;0EAEd,8OAAC;gEAAI,WAAU;0EACb,cAAA,8OAAC;oEAAK,WAAU;8EAAwB;;;;;;;;;;;;;;;;;;;;;;;0DAM9C,8OAAC;gDAAI,WAAU;;kEACb,8OAAC;wDACC,MAAK;wDACL,IAAG;wDACH,SAAS;wDACT,UAAU,IAAM,kBAAkB,CAAC;wDACnC,WAAU;;;;;;kEAEZ,8OAAC;wDAAM,SAAQ;wDAAiB,WAAU;kEAAsB;;;;;;;;;;;;;;;;;;oCAKnE,gCACC,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;;kEACb,8OAAC;wDAAM,WAAU;kEAA4B;;;;;;kEAC7C,8OAAC;wDACC,MAAK;wDACL,WAAU;wDACV,SAAS,IAAM,eAAe;wDAC9B,OAAM;kEACP;;;;;;;;;;;;0DAIH,8OAAC;gDACC,MAAK;gDACL,WAAU;gDACV,OAAO;gDACP,UAAU,CAAC;oDACT,MAAM,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK,KAAK,IAAI,WAAW,WAAW,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC;oDAC3F,IAAI,CAAC,MAAM,WAAW;wDACpB,eAAe;oDACjB;gDACF;gDACA,KAAI;gDACJ,MAAK,MAAM,0BAA0B;;gDACrC,aAAY;;;;;;0DAEd,8OAAC;gDAAE,WAAU;;oDAA6B;kEAExC,8OAAC;;;;;oDAAK;oDACoB,oBAAoB,OAAO,CAAC,GAAG,cAAc;;;;;;;;;;;;;kDAM7E,8OAAC;wCAAI,WAAU;;0DAEb,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDAAI,WAAU;;4DAAiD;4DACzD,eAAe,OAAO,CAAC,GAAG,cAAc;0EAC7C,8OAAC;gEAAK,WAAU;0EAA8B;;;;;;;;;;;;;;;;;;0DAKlD,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEACd,iBAAiB,qCAAqC;;;;;;kEAEzD,8OAAC;wDAAI,WAAU;;4DAAiD;4DACzD,iBAAiB,YAAY,OAAO,CAAC,GAAG,cAAc,KAAK,oBAAoB,OAAO,CAAC,GAAG,cAAc;0EAC7G,8OAAC;gEAAK,WAAU;0EACb,iBAAiB,iBAAiB;;;;;;;;;;;;;;;;;;4CAMxC,CAAC,gCACA,8OAAC;gDAAI,WAAU;0DACb,cAAA,8OAAC;oDAAI,WAAU;8DACb,cAAA,8OAAC;wDAAI,WAAU;;0EACb,8OAAC;;oEAAI;oEAAgB,eAAe,OAAO,CAAC,GAAG,cAAc;;;;;;;0EAC7D,8OAAC;;oEAAI;oEAAqB,cAAc,OAAO,CAAC,GAAG,cAAc;;;;;;;0EACjE,8OAAC;;oEAAI;oEAA2B,2BAA2B,OAAO,CAAC,GAAG,cAAc;;;;;;;0EACpF,8OAAC;gEAAI,WAAU;;oEAAgB;oEAAY,oBAAoB,OAAO,CAAC,GAAG,cAAc;;;;;;;;;;;;;;;;;;;;;;;0DAOhG,8OAAC;gDAAI,WAAU;;kEACb,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDAAI,WAAU;;4DAA+E;4DACvF,YAAY,OAAO,CAAC,GAAG,cAAc;0EAC1C,8OAAC;gEAAK,WAAU;;oEACb;oEAAS;oEAAE,aAAa,IAAI,SAAS;oEAAQ;oEAAQ,CAAC,iBAAiB,cAAc,mBAAmB,EAAE,OAAO,CAAC,GAAG,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAShJ,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAM,WAAU;sDAA6C;;;;;;sDAG9D,8OAAC;4CAAI,WAAU;sDACZ,iBAAiB,0BAChB,8OAAC;gDAAI,WAAU;;kEACb,8OAAC;wDAAI,WAAU;;;;;;kEACf,8OAAC;wDAAK,WAAU;kEAAwB;;;;;;;;;;;uDAExC,6BACF,8OAAC;gDAAI,WAAU;;kEACb,8OAAC,6HAAA,CAAA,UAAK;wDACJ,KAAK;wDACL,KAAI;wDACJ,IAAI;wDACJ,OAAO;4DAAE,WAAW;wDAAU;;;;;;kEAEhC,8OAAC;wDACC,MAAK;wDACL,SAAS,IAAM,gBAAgB;wDAC/B,WAAU;wDACV,OAAM;kEACP;;;;;;;;;;;qEAKH,8OAAC;gDAAM,WAAU;;kEACf,8OAAC;wDAAK,WAAU;kEAAgB;;;;;;kEAChC,8OAAC;wDACC,MAAK;wDACL,QAAO;wDACP,WAAU;wDACV,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BASrB,cAAc,mBACb,8OAAC;gCAAI,IAAG;gCAA2B,WAAU;;kDAC3C,8OAAC;wCAAG,WAAU;kDAA6B;;;;;;kDAE3C,8OAAC;wCAAI,WAAU;;0DAEb,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;;4DAAiC;0EAEhD,8OAAC;gEAAK,WAAU;0EAAoB;;;;;;0EACpC,8OAAC;gEAAK,WAAU;;oEAA6B;oEAAO,kBAAkB,OAAO,CAAC,GAAG,cAAc;oEAAG;;;;;;;;;;;;;kEAEpG,8OAAC;wDAAI,WAAU;;0EACb,8OAAC;gEACC,IAAG;gEACH,MAAK;gEACL,WAAW,CAAC,kBAAkB,EAAE,uBAAuB,oBAAoB,mBAAmB,kBAAkB,WAAW,CAAC;gEAC5H,cAAc,qBAAqB,QAAQ;gEAC3C,SAAS,CAAC;oEACR,MAAM,SAAS,EAAE,MAAM;oEACvB,mCAAmC;oEACnC,IAAI,aAAa,OAAO,KAAK,CAAC,OAAO,CAAC,WAAW,KAAK,+CAA+C;oEAErG,gCAAgC;oEAChC,MAAM,eAAe,CAAC,WAAW,KAAK,CAAC,UAAU,EAAE,EAAE,MAAM;oEAC3D,IAAI,eAAe,GAAG;wEACpB,MAAM,QAAQ,WAAW,KAAK,CAAC;wEAC/B,aAAa,KAAK,CAAC,EAAE,GAAG,MAAM,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC;oEACpD;oEAEA,kCAAkC;oEAClC,OAAO,KAAK,GAAG;oEAEf,qBAAqB;oEACrB,MAAM,WAAW,eAAe,KAAK,IAAI,WAAW;oEACpD,IAAI,CAAC,MAAM,WAAW;wEACpB,wBAAwB;oEAC1B;gEACF;gEACA,QAAQ;;;;;;0EAEV,8OAAC;gEACC,MAAK;gEACL,WAAU;gEACV,SAAS;oEACP,wBAAwB;oEACxB,uCAAuC;oEACvC,MAAM,eAAe,SAAS,aAAa,CAAC;oEAC5C,IAAI,cAAc;wEAChB,aAAa,KAAK,GAAG,kBAAkB,QAAQ;oEACjD;gEACF;gEACA,OAAM;0EACP;;;;;;;;;;;;oDAIF,uBAAuB,mCACtB,8OAAC;wDAAE,WAAU;;4DAA4B;4DACL,kBAAkB,OAAO,CAAC,GAAG,cAAc;4DAAG;;;;;;;;;;;;;0DAMtF,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDACC,WAAU;wDACV,OAAO;wDACP,UAAU,CAAC,IAAM,iBAAiB,EAAE,MAAM,CAAC,KAAK;;0EAEhD,8OAAC;gEAAO,OAAM;0EAAO;;;;;;0EACrB,8OAAC;gEAAO,OAAM;0EAAgB;;;;;;0EAC9B,8OAAC;gEAAO,OAAM;0EAAQ;;;;;;0EACtB,8OAAC;gEAAO,OAAM;0EAAc;;;;;;0EAC5B,8OAAC;gEAAO,OAAM;0EAAQ;;;;;;;;;;;;;;;;;;0DAK1B,8OAAC;gDAAI,WAAU;;kEACb,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDACC,WAAU;wDACV,OAAO;wDACP,UAAU,CAAC,IAAM,gBAAgB,EAAE,MAAM,CAAC,KAAK;wDAC/C,MAAM;wDACN,aAAY;;;;;;;;;;;;;;;;;;kDAMlB,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDAAI,WAAU;;4DAAiD;4DACzD,YAAY,OAAO,CAAC,GAAG,cAAc;;;;;;;;;;;;;0DAI9C,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDAAI,WAAU;;4DAAiD;4DACzD,qBAAqB,OAAO,CAAC,GAAG,cAAc;;;;;;;;;;;;;0DAIvD,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAAiC;;;;;;kEAClD,8OAAC;wDAAI,WAAU;;4DAA4E;4DACpF,CAAC,cAAc,oBAAoB,EAAE,OAAO,CAAC,GAAG,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;0CAU7E,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCACC,MAAK;wCACL,WAAU;kDACX;;;;;;kDAGD,8OAAC;wCACC,MAAK;wCACL,WAAU;wCACV,SAAS,IAAM,OAAO,OAAO,CAAC,IAAI;kDACnC;;;;;;;;;;;;;;;;;;;;;;;;YAQN,0BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAqC;;;;;;kCACnD,8OAAC;wBAAE,WAAU;;4BAAyC;0CACC,8OAAC;gCAAK,WAAU;0CAAiB;;;;;;4BAAgB;;;;;;;kCAExG,8OAAC,2IAAA,CAAA,UAAqB;wBAAC,kBAAkB;;;;;;;;;;;;;;;;;;AAKnD;uCAEe","debugId":null}},
    {"offset": {"line": 2476, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}