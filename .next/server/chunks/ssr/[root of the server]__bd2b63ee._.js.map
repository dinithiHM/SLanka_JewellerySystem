{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/services/reportService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002';\n\n// Create axios instance with auth header\nconst axiosInstance = axios.create({\n  baseURL: `${API_URL}/api/reports`,\n});\n\n// Add request interceptor to include auth token\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Get sales report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getSalesReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/sales', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching sales report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get current stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getCurrentStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/current-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching current stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get gold stock report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getGoldStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/gold-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching gold stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get low stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getLowStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/low-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching low stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory valuation report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryValuationReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/valuation', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory valuation report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get customer report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomerReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/customers', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching customer report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get financial report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getFinancialReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/financial', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching financial report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as CSV\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportCSV = async (reportType, params = {}) => {\n  try {\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'csv', ...params },\n      responseType: 'blob'\n    });\n\n    // Create a download link and trigger download\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const date = new Date().toISOString().split('T')[0];\n    link.setAttribute('download', `${reportType}_report_${date}.csv`);\n\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as PDF\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportPDF = async (reportType, params = {}) => {\n  try {\n    // First get the data in JSON format\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'json', ...params }\n    });\n\n    // Import jsPDF and autoTable dynamically\n    const { jsPDF } = await import('jspdf');\n    const { default: autoTable } = await import('jspdf-autotable');\n\n    // Create a new PDF document\n    const doc = new jsPDF();\n\n    // Add title\n    let title = 'Report';\n    switch (reportType) {\n      case 'current-stock':\n        title = 'Current Stock Report';\n        break;\n      case 'gold-stock':\n        title = 'Gold Stock Report';\n        break;\n      case 'low-stock':\n        title = 'Low Stock Report';\n        break;\n      case 'valuation':\n        title = 'Inventory Valuation Report';\n        break;\n      case 'sales':\n        title = 'Sales Report';\n        break;\n    }\n\n    // Add report title\n    doc.setFontSize(18);\n    doc.text(title, 14, 22);\n\n    // Add date\n    doc.setFontSize(11);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 30);\n\n    // Format data for autoTable\n    const tableData = response.data.data.map(item => {\n      return Object.values(item);\n    });\n\n    // Get column headers\n    const headers = Object.keys(response.data.data[0]);\n\n    // Create table\n    autoTable(doc, {\n      head: [headers],\n      body: tableData,\n      startY: 35,\n      styles: { fontSize: 8, cellPadding: 2 },\n      headStyles: { fillColor: [60, 60, 60] }\n    });\n\n    // Save the PDF\n    doc.save(`${response.data.filename}.pdf`);\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report as PDF:', error);\n    throw error;\n  }\n};\n\n/**\n * Get custom report data\n * @param {Object} config - Custom report configuration\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomReport = async (config) => {\n  try {\n    // This would be implemented to handle custom report requests\n    // For now, we'll just return a mock response\n    return {\n      success: true,\n      message: 'Custom report functionality will be implemented here',\n      config\n    };\n  } catch (error) {\n    console.error('Error generating custom report:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/reports/sales/daily/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Calendar, Filter, Download, Printer, BarChart, RefreshCw, ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\nimport { getSalesReport } from '@/services/reportService';\nimport { BarChart as RechartsBarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\n\ninterface SalesData {\n  summary: {\n    totalSales: number;\n    totalTransactions: number;\n    averageOrderValue: number;\n  };\n  salesByDay: {\n    date: string;\n    amount: number;\n    transactions: number;\n  }[];\n  topCategories: {\n    category_name: string;\n    totalQuantity: number;\n    totalAmount: number;\n  }[];\n  topProducts: {\n    item_name: string;\n    totalQuantity: number;\n    totalAmount: number;\n  }[];\n  recentSales: {\n    sale_id: number;\n    customer_name: string;\n    total_amount: number;\n    payment_method: string;\n    sale_date: string;\n    branch_id: number;\n    branch_name: string;\n  }[];\n  branches: {\n    branch_id: number;\n    branch_name: string;\n  }[];\n  paymentMethods: {\n    payment_method: string;\n    count: number;\n    total: number;\n  }[];\n  period: string;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\nexport default function DailySalesReportPage() {\n  const [dateRange, setDateRange] = useState('last7');\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedBranch, setSelectedBranch] = useState<string>('');\n  const [salesData, setSalesData] = useState<SalesData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Format currency\n  const formatCurrency = (amount: number) => {\n    return `LKR ${amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  // Fetch sales data\n  const fetchSalesData = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Build query parameters\n      const params: any = { period: dateRange };\n      if (selectedBranch) {\n        params.branchId = selectedBranch;\n      }\n\n      // Use the reportService to fetch data with authentication\n      const data = await getSalesReport(params);\n      setSalesData(data);\n    } catch (err) {\n      console.error('Error fetching sales data:', err);\n      setError('Failed to load sales data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch data on initial load and when filters change\n  useEffect(() => {\n    fetchSalesData();\n  }, [dateRange, selectedBranch]);\n\n  const handleRefresh = () => {\n    fetchSalesData();\n  };\n\n  // Prepare chart data\n  const prepareChartData = () => {\n    if (!salesData?.salesByDay) return [];\n    \n    return salesData.salesByDay.map(day => ({\n      date: new Date(day.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n      amount: day.amount,\n      transactions: day.transactions,\n    }));\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header with back button */}\n      <div className=\"flex items-center mb-6\">\n        <Link href=\"/DashView/reports/sales\" className=\"mr-4\">\n          <ArrowLeft className=\"h-5 w-5 text-gray-500 hover:text-gray-700\" />\n        </Link>\n        <h1 className=\"text-2xl font-bold text-gray-900\">Daily Sales Report</h1>\n      </div>\n\n      {/* Filters and Actions */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4\">\n        <div className=\"flex flex-wrap items-center gap-3\">\n          {/* Date Range Filter */}\n          <div className=\"relative\">\n            <select\n              className=\"appearance-none pl-3 pr-10 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-yellow-500 focus:border-yellow-500 sm:text-sm\"\n              value={dateRange}\n              onChange={(e) => setDateRange(e.target.value)}\n            >\n              <option value=\"today\">Today</option>\n              <option value=\"yesterday\">Yesterday</option>\n              <option value=\"last7\">Last 7 Days</option>\n              <option value=\"last30\">Last 30 Days</option>\n              <option value=\"thisMonth\">This Month</option>\n              <option value=\"lastMonth\">Last Month</option>\n            </select>\n            <Calendar className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n          </div>\n\n          {/* Branch Filter */}\n          <div className=\"relative\">\n            <select\n              className=\"appearance-none pl-3 pr-10 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-yellow-500 focus:border-yellow-500 sm:text-sm\"\n              value={selectedBranch}\n              onChange={(e) => setSelectedBranch(e.target.value)}\n            >\n              <option value=\"\">All Branches</option>\n              {salesData?.branches?.map((branch) => (\n                <option key={branch.branch_id} value={branch.branch_id}>\n                  {branch.branch_name}\n                </option>\n              ))}\n            </select>\n            <Filter className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n          </div>\n\n          {/* Refresh Button */}\n          <button\n            onClick={handleRefresh}\n            className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n          >\n            <RefreshCw className=\"h-4 w-4 mr-1\" />\n            Refresh\n          </button>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          {/* Export Button */}\n          <button className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\">\n            <Download className=\"h-4 w-4 mr-1\" />\n            Export\n          </button>\n          \n          {/* Print Button */}\n          <button className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\">\n            <Printer className=\"h-4 w-4 mr-1\" />\n            Print\n          </button>\n        </div>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"bg-red-50 border-l-4 border-red-400 p-4 mb-6\">\n          <div className=\"flex\">\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-yellow-500\"></div>\n        </div>\n      ) : (\n        <>\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <div className=\"bg-white p-6 rounded-lg shadow-md border-l-4 border-yellow-500\">\n              <h3 className=\"text-gray-500 text-sm font-medium\">Total Sales</h3>\n              <p className=\"text-2xl font-bold mt-1\">{formatCurrency(salesData?.summary?.totalSales || 0)}</p>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                {salesData?.dateRange?.startDate} to {salesData?.dateRange?.endDate}\n              </p>\n            </div>\n            \n            <div className=\"bg-white p-6 rounded-lg shadow-md border-l-4 border-blue-500\">\n              <h3 className=\"text-gray-500 text-sm font-medium\">Transactions</h3>\n              <p className=\"text-2xl font-bold mt-1\">{salesData?.summary?.totalTransactions || 0}</p>\n              <p className=\"text-sm text-gray-500 mt-1\">Total number of sales</p>\n            </div>\n            \n            <div className=\"bg-white p-6 rounded-lg shadow-md border-l-4 border-green-500\">\n              <h3 className=\"text-gray-500 text-sm font-medium\">Average Order Value</h3>\n              <p className=\"text-2xl font-bold mt-1\">{formatCurrency(salesData?.summary?.averageOrderValue || 0)}</p>\n              <p className=\"text-sm text-gray-500 mt-1\">Per transaction</p>\n            </div>\n          </div>\n\n          {/* Daily Sales Chart */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n            <h2 className=\"text-lg font-medium text-gray-900 mb-4\">Daily Sales Trend</h2>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <RechartsBarChart\n                  data={prepareChartData()}\n                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"#8884d8\" />\n                  <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#82ca9d\" />\n                  <Tooltip formatter={(value) => formatCurrency(Number(value))} />\n                  <Legend />\n                  <Bar yAxisId=\"left\" dataKey=\"amount\" name=\"Sales Amount\" fill=\"#8884d8\" />\n                  <Bar yAxisId=\"right\" dataKey=\"transactions\" name=\"Transactions\" fill=\"#82ca9d\" />\n                </RechartsBarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Sales by Day Table */}\n          <div className=\"bg-white shadow rounded-lg mb-6\">\n            <div className=\"px-4 py-5 sm:px-6 flex justify-between items-center\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Daily Sales Details</h3>\n              <span className=\"text-sm text-gray-500\">\n                {salesData?.salesByDay?.length || 0} days\n              </span>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Sales Amount\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Transactions\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Average\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {salesData?.salesByDay?.map((day) => (\n                    <tr key={day.date} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {new Date(day.date).toLocaleDateString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatCurrency(day.amount)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {day.transactions}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatCurrency(day.amount / day.transactions)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1099, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}