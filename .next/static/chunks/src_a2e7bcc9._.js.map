{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/components/icons/LKRIcon.tsx"],"sourcesContent":["import React from 'react';\n\ninterface LKRIconProps {\n  className?: string;\n  size?: number;\n}\n\nconst LKRIcon: React.FC<LKRIconProps> = ({ className = \"\", size = 24 }) => {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke=\"currentColor\" \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\" \n      className={`lucide lucide-currency-rupee ${className}`}\n    >\n      <path d=\"M6 3h12\" />\n      <path d=\"M6 8h12\" />\n      <path d=\"m6 13 8.5 8\" />\n      <path d=\"M6 13h3\" />\n      <path d=\"M9 13c6.667 0 6.667-10 0-10\" />\n    </svg>\n  );\n};\n\nexport default LKRIcon;\n"],"names":[],"mappings":";;;;;AAOA,MAAM,UAAkC,CAAC,EAAE,YAAY,EAAE,EAAE,OAAO,EAAE,EAAE;IACpE,qBACE,6LAAC;QACC,OAAM;QACN,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,QAAO;QACP,aAAY;QACZ,eAAc;QACd,gBAAe;QACf,WAAW,CAAC,6BAA6B,EAAE,WAAW;;0BAEtD,6LAAC;gBAAK,GAAE;;;;;;0BACR,6LAAC;gBAAK,GAAE;;;;;;0BACR,6LAAC;gBAAK,GAAE;;;;;;0BACR,6LAAC;gBAAK,GAAE;;;;;;0BACR,6LAAC;gBAAK,GAAE;;;;;;;;;;;;AAGd;KArBM;uCAuBS","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/utils/formatters.ts"],"sourcesContent":["/**\n * Format a number as currency\n * @param value The number to format\n * @param locale The locale to use for formatting (default: 'en-US')\n * @param currency The currency code (default: 'LKR')\n * @returns Formatted currency string\n */\nexport const formatCurrency = (\n  value: number | string,\n  locale: string = 'en-US',\n  currency: string = 'LKR'\n): string => {\n  // Convert to number if it's a string\n  const numericValue = typeof value === 'string' ? parseFloat(value) : value;\n\n  // Handle NaN values\n  if (isNaN(numericValue)) {\n    console.warn('Invalid value for currency formatting:', value);\n    return 'Rs. 0.00';\n  }\n\n  // Use the Sri Lankan Rupee symbol (Rs) instead of LKR text\n  return 'Rs. ' + new Intl.NumberFormat(locale, {\n    style: 'decimal',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(numericValue);\n};\n\n/**\n * Format a date string\n * @param dateString The date string to format\n * @param locale The locale to use for formatting (default: 'en-US')\n * @returns Formatted date string\n */\nexport const formatDate = (\n  dateString: string,\n  locale: string = 'en-US'\n): string => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat(locale, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  }).format(date);\n};\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;;AACM,MAAM,iBAAiB,CAC5B,OACA,SAAiB,OAAO,EACxB,WAAmB,KAAK;IAExB,qCAAqC;IACrC,MAAM,eAAe,OAAO,UAAU,WAAW,WAAW,SAAS;IAErE,oBAAoB;IACpB,IAAI,MAAM,eAAe;QACvB,QAAQ,IAAI,CAAC,0CAA0C;QACvD,OAAO;IACT;IAEA,2DAA2D;IAC3D,OAAO,SAAS,IAAI,KAAK,YAAY,CAAC,QAAQ;QAC5C,OAAO;QACP,uBAAuB;QACvB,uBAAuB;IACzB,GAAG,MAAM,CAAC;AACZ;AAQO,MAAM,aAAa,CACxB,YACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,OAAO,IAAI,KAAK,cAAc,CAAC,QAAQ;QACrC,MAAM;QACN,OAAO;QACP,KAAK;QACL,MAAM;QACN,QAAQ;QACR,QAAQ;IACV,GAAG,MAAM,CAAC;AACZ","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/advance-payment/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport {\r\n  CreditCard,\r\n  Package,\r\n  ShoppingBag,\r\n  User,\r\n  FileText,\r\n  CheckCircle,\r\n  X\r\n} from 'lucide-react';\r\nimport LKRIcon from '@/components/icons/LKRIcon';\r\nimport { formatCurrency } from '@/utils/formatters';\r\n\r\n// Define types\r\ninterface JewelleryItem {\r\n  item_id: number;\r\n  product_title: string;\r\n  category: string;\r\n  selling_price: number;\r\n  in_stock: number;\r\n}\r\n\r\ninterface CustomOrder {\r\n  order_id: number;\r\n  order_reference: string;\r\n  customer_name: string;\r\n  total_amount: number;\r\n  estimated_amount?: number;\r\n  advance_amount?: number;\r\n  balance_amount?: number;\r\n  status: string;\r\n  payment_status?: string;\r\n  customer_phone?: string;\r\n  customer_email?: string;\r\n  description?: string;\r\n  special_requirements?: string;\r\n  actual_advance_amount?: number;\r\n  actual_balance_amount?: number;\r\n}\r\n\r\n// Payment type enum\r\nenum PaymentType {\r\n  INVENTORY_ITEM = 'inventory_item',\r\n  CUSTOM_ORDER = 'custom_order'\r\n}\r\n\r\nconst AdvancePaymentPage = () => {\r\n  const router = useRouter();\r\n\r\n  // State for form fields\r\n  const [paymentType, setPaymentType] = useState<PaymentType>(PaymentType.INVENTORY_ITEM);\r\n  const [customerName, setCustomerName] = useState('');\r\n  const [totalAmount, setTotalAmount] = useState<number>(0);\r\n  const [advanceAmount, setAdvanceAmount] = useState<number>(0);\r\n  const [balanceAmount, setBalanceAmount] = useState<number>(0);\r\n  const [paymentMethod, setPaymentMethod] = useState('Cash');\r\n  const [notes, setNotes] = useState('');\r\n  const [quantity, setQuantity] = useState<number>(1);\r\n\r\n  // State for selected items\r\n  const [selectedItemId, setSelectedItemId] = useState<number | null>(null);\r\n  const [selectedOrderId, setSelectedOrderId] = useState<number | null>(null);\r\n\r\n  // State for data\r\n  const [availableItems, setAvailableItems] = useState<JewelleryItem[]>([]);\r\n  const [customOrders, setCustomOrders] = useState<CustomOrder[]>([]);\r\n  const [selectedItem, setSelectedItem] = useState<JewelleryItem | null>(null);\r\n  const [selectedOrder, setSelectedOrder] = useState<CustomOrder | null>(null);\r\n  const [categories, setCategories] = useState<string[]>([]);\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\r\n  const [filteredItems, setFilteredItems] = useState<JewelleryItem[]>([]);\r\n\r\n  // State for UI\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n  const [paymentReference, setPaymentReference] = useState<string | null>(null);\r\n\r\n  // Check for URL query parameters\r\n  useEffect(() => {\r\n    // Get the URL search params\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const typeParam = searchParams.get('type');\r\n\r\n    // Handle custom order parameters\r\n    if (typeParam === 'custom') {\r\n      const orderIdParam = searchParams.get('order_id');\r\n      if (orderIdParam) {\r\n        // If order ID is in URL, set payment type to custom order\r\n        setPaymentType(PaymentType.CUSTOM_ORDER);\r\n        console.log(`Custom order ID found in URL: ${orderIdParam}`);\r\n\r\n        // Wait for custom orders to load before selecting\r\n        const checkAndSelectOrder = () => {\r\n          if (customOrders.length > 0) {\r\n            const orderId = parseInt(orderIdParam);\r\n            setSelectedOrderId(orderId);\r\n\r\n            // Scroll to the payment form\r\n            const paymentForm = document.getElementById('payment-form');\r\n            if (paymentForm) {\r\n              paymentForm.scrollIntoView({ behavior: 'smooth' });\r\n            }\r\n          } else {\r\n            // If custom orders not loaded yet, try again in 500ms\r\n            setTimeout(checkAndSelectOrder, 500);\r\n          }\r\n        };\r\n\r\n        checkAndSelectOrder();\r\n      }\r\n    }\r\n    // Handle inventory item parameters\r\n    else if (typeParam === 'inventory') {\r\n      setPaymentType(PaymentType.INVENTORY_ITEM);\r\n\r\n      const itemIdParam = searchParams.get('item_id');\r\n      const customerNameParam = searchParams.get('customer_name');\r\n      const totalAmountParam = searchParams.get('total_amount');\r\n      const balanceParam = searchParams.get('balance');\r\n      const advanceParam = searchParams.get('advance');\r\n      const paymentIdParam = searchParams.get('payment_id');\r\n      const quantityParam = searchParams.get('quantity');\r\n\r\n      console.log(`Inventory item parameters found in URL: item_id=${itemIdParam}, customer=${customerNameParam}`);\r\n\r\n      // Set customer name if provided\r\n      if (customerNameParam) {\r\n        setCustomerName(customerNameParam);\r\n      }\r\n\r\n      // Set total amount if provided\r\n      if (totalAmountParam) {\r\n        setTotalAmount(parseFloat(totalAmountParam));\r\n      }\r\n\r\n      // Set quantity if provided\r\n      if (quantityParam) {\r\n        const qty = parseInt(quantityParam);\r\n        if (qty > 0) {\r\n          setQuantity(qty);\r\n        }\r\n      }\r\n\r\n      // Set up for additional payments\r\n      // If we have both balance and advance, use them to calculate the correct amount\r\n      if (balanceParam && advanceParam) {\r\n        // Get the remaining balance and previous advance\r\n        const balance = parseFloat(balanceParam);\r\n        const previousAdvance = parseFloat(advanceParam);\r\n\r\n        // For additional payments, we set advance amount to 0 (empty field for user to enter)\r\n        setAdvanceAmount(0);\r\n\r\n        // Set the balance to the remaining balance\r\n        setBalanceAmount(balance);\r\n\r\n        console.log(`Setting advance amount to 0 and balance to remaining balance: ${balance}`);\r\n        console.log(`Previous advance payment: ${previousAdvance}`);\r\n      }\r\n\r\n      // Add note about the previous payment\r\n      if (paymentIdParam && advanceParam) {\r\n        const previousAdvance = parseFloat(advanceParam);\r\n        setNotes(`Additional payment for previous payment ID: ${paymentIdParam}. Previous advance payment: ${previousAdvance.toFixed(2)}`);\r\n      } else if (paymentIdParam) {\r\n        setNotes(`Additional payment for previous payment ID: ${paymentIdParam}`);\r\n      }\r\n\r\n      // Wait for items to load before selecting\r\n      if (itemIdParam) {\r\n        const checkAndSelectItem = () => {\r\n          if (availableItems.length > 0) {\r\n            const itemId = parseInt(itemIdParam);\r\n\r\n            // Find the item to get its category\r\n            const item = availableItems.find(i => i.item_id === itemId);\r\n            if (item) {\r\n              // Set the category first\r\n              setSelectedCategory(item.category);\r\n\r\n              // Then set the item ID after a short delay to ensure the filtered items are updated\r\n              setTimeout(() => {\r\n                setSelectedItemId(itemId);\r\n\r\n                // Scroll to the payment form\r\n                const paymentForm = document.getElementById('payment-form');\r\n                if (paymentForm) {\r\n                  paymentForm.scrollIntoView({ behavior: 'smooth' });\r\n                }\r\n              }, 100);\r\n            }\r\n          } else {\r\n            // If items not loaded yet, try again in 500ms\r\n            setTimeout(checkAndSelectItem, 500);\r\n          }\r\n        };\r\n\r\n        checkAndSelectItem();\r\n      }\r\n    }\r\n    // Legacy support for old URL format\r\n    else {\r\n      const orderIdParam = searchParams.get('order');\r\n      if (orderIdParam) {\r\n        setPaymentType(PaymentType.CUSTOM_ORDER);\r\n        console.log(`Legacy order ID found in URL: ${orderIdParam}`);\r\n\r\n        // Wait for custom orders to load before selecting\r\n        const checkAndSelectOrder = () => {\r\n          if (customOrders.length > 0) {\r\n            const orderId = parseInt(orderIdParam);\r\n            setSelectedOrderId(orderId);\r\n\r\n            // Scroll to the payment form\r\n            const paymentForm = document.getElementById('payment-form');\r\n            if (paymentForm) {\r\n              paymentForm.scrollIntoView({ behavior: 'smooth' });\r\n            }\r\n          } else {\r\n            // If custom orders not loaded yet, try again in 500ms\r\n            setTimeout(checkAndSelectOrder, 500);\r\n          }\r\n        };\r\n\r\n        checkAndSelectOrder();\r\n      }\r\n    }\r\n  }, [customOrders, availableItems]);\r\n\r\n  // Fetch available items and custom orders on component mount\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Fetch available items\r\n        const itemsResponse = await fetch('http://localhost:3002/advance-payments/items/available');\r\n        if (itemsResponse.ok) {\r\n          const itemsData = await itemsResponse.json();\r\n          setAvailableItems(itemsData);\r\n\r\n          // Fetch categories from the database instead of extracting from items\r\n          try {\r\n            const categoriesResponse = await fetch('http://localhost:3002/categories');\r\n            if (categoriesResponse.ok) {\r\n              const categoriesData = await categoriesResponse.json();\r\n              // Extract category names from the response\r\n              const categoryNames = categoriesData.map((cat: any) => cat.category_name);\r\n              console.log('Fetched categories from database:', categoryNames);\r\n              setCategories(categoryNames);\r\n\r\n              if (categoryNames.length > 0) {\r\n                setSelectedCategory(categoryNames[0]);\r\n              }\r\n            } else {\r\n              // Fallback to extracting from items if API fails\r\n              console.warn('Failed to fetch categories, falling back to item categories');\r\n              const uniqueCategories = Array.from(new Set(itemsData.map((item: JewelleryItem) => item.category))) as string[];\r\n              setCategories(uniqueCategories);\r\n              if (uniqueCategories.length > 0) {\r\n                setSelectedCategory(uniqueCategories[0]);\r\n              }\r\n            }\r\n          } catch (catErr) {\r\n            console.error('Error fetching categories:', catErr);\r\n            // Fallback to extracting from items\r\n            const uniqueCategories = Array.from(new Set(itemsData.map((item: JewelleryItem) => item.category))) as string[];\r\n            setCategories(uniqueCategories);\r\n            if (uniqueCategories.length > 0) {\r\n              setSelectedCategory(uniqueCategories[0]);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Fetch custom orders\r\n        const ordersResponse = await fetch('http://localhost:3002/advance-payments/orders/custom');\r\n        if (ordersResponse.ok) {\r\n          const ordersData = await ordersResponse.json();\r\n\r\n          // The backend now filters out completed orders\r\n          setCustomOrders(ordersData);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        setError('Failed to load data. Please try again.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Filter items by selected category\r\n  useEffect(() => {\r\n    if (selectedCategory) {\r\n      const filtered = availableItems.filter(item => item.category === selectedCategory);\r\n      setFilteredItems(filtered);\r\n    } else {\r\n      setFilteredItems(availableItems);\r\n    }\r\n  }, [selectedCategory, availableItems]);\r\n\r\n  // Update selected item when item ID changes\r\n  useEffect(() => {\r\n    if (selectedItemId) {\r\n      const item = availableItems.find(item => item.item_id === selectedItemId);\r\n      setSelectedItem(item || null);\r\n\r\n      if (item) {\r\n        // Calculate total amount based on item price and quantity\r\n        const total = item.selling_price * quantity;\r\n        setTotalAmount(total);\r\n      }\r\n    } else {\r\n      setSelectedItem(null);\r\n    }\r\n  }, [selectedItemId, availableItems, quantity]);\r\n\r\n  // Update selected order when order ID changes\r\n  useEffect(() => {\r\n    if (selectedOrderId) {\r\n      // First, find the order in the customOrders array\r\n      const order = customOrders.find(order => order.order_id === selectedOrderId);\r\n\r\n      if (order) {\r\n        console.log('Selected order from dropdown:', order);\r\n\r\n        // Set customer name from the order\r\n        setCustomerName(order.customer_name);\r\n\r\n        // Set total amount from the estimated amount\r\n        if (order.estimated_amount) {\r\n          const totalAmt = typeof order.estimated_amount === 'string' ?\r\n            parseFloat(order.estimated_amount) : order.estimated_amount;\r\n          setTotalAmount(totalAmt);\r\n          console.log(`Set total amount to ${totalAmt}`);\r\n        }\r\n\r\n        // Fetch the complete order details from the server to get accurate payment information\r\n        fetchOrderDetails(selectedOrderId);\r\n      } else {\r\n        setSelectedOrder(null);\r\n      }\r\n    } else {\r\n      setSelectedOrder(null);\r\n    }\r\n  }, [selectedOrderId, customOrders]);\r\n\r\n  // Function to fetch more details about a custom order\r\n  const fetchOrderDetails = async (orderId: number) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3002/custom-orders/${orderId}`);\r\n      if (response.ok) {\r\n        const orderDetails = await response.json();\r\n        console.log('Fetched order details from server:', orderDetails);\r\n\r\n        // Update the selected order with the accurate data from the server\r\n        setSelectedOrder(orderDetails);\r\n\r\n        // If there's an advance amount, update the balance calculation\r\n        if (orderDetails.advance_amount && orderDetails.advance_amount > 0) {\r\n          const advanceAmount = typeof orderDetails.advance_amount === 'string' ?\r\n            parseFloat(orderDetails.advance_amount) : orderDetails.advance_amount;\r\n\r\n          console.log(`Server reports this order has an advance payment of ${advanceAmount}`);\r\n\r\n          // Calculate the remaining balance (total - advance)\r\n          const totalAmt = typeof orderDetails.estimated_amount === 'string' ?\r\n            parseFloat(orderDetails.estimated_amount) : (orderDetails.estimated_amount || 0);\r\n\r\n          const remainingBalance = totalAmt - advanceAmount;\r\n          console.log(`Server calculation: Total: ${totalAmt}, Advance: ${advanceAmount}, Remaining: ${remainingBalance}`);\r\n\r\n          // Update the balance amount field with the server's calculation\r\n          setBalanceAmount(remainingBalance);\r\n        }\r\n\r\n        // Add any notes about the order\r\n        let orderNotes = '';\r\n        if (orderDetails.description) {\r\n          orderNotes += `Description: ${orderDetails.description}\\n`;\r\n        }\r\n        if (orderDetails.special_requirements) {\r\n          orderNotes += `Special Requirements: ${orderDetails.special_requirements}\\n`;\r\n        }\r\n        if (orderNotes) {\r\n          setNotes(orderNotes);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching order details:', err);\r\n    }\r\n  };\r\n\r\n  // Add a special effect to handle the initial setup for inventory items with existing payments\r\n  useEffect(() => {\r\n    const paymentIdParam = new URLSearchParams(window.location.search).get('payment_id');\r\n    const balanceParam = new URLSearchParams(window.location.search).get('balance');\r\n    const advanceParam = new URLSearchParams(window.location.search).get('advance');\r\n    const totalAmountParam = new URLSearchParams(window.location.search).get('total_amount');\r\n\r\n    if (paymentIdParam && balanceParam && paymentType === PaymentType.INVENTORY_ITEM) {\r\n      // This is for an inventory item with an existing payment\r\n      const remainingBalance = parseFloat(balanceParam);\r\n      const totalAmount = totalAmountParam ? parseFloat(totalAmountParam) : 0;\r\n      const previousAdvance = advanceParam ? parseFloat(advanceParam) : 0;\r\n\r\n      console.log(`Initial setup for inventory item with payment ID ${paymentIdParam}:`);\r\n      console.log(`Total amount: ${totalAmount}, Previous advance: ${previousAdvance}, Remaining balance: ${remainingBalance}`);\r\n\r\n      // Set the advance amount to 0 (empty field for user to enter)\r\n      setAdvanceAmount(0);\r\n\r\n      // Set the balance to the remaining balance\r\n      setBalanceAmount(remainingBalance);\r\n\r\n      console.log(`Setting advance amount to 0`);\r\n      console.log(`Setting balance amount to remaining balance: ${remainingBalance}`);\r\n\r\n      // Force update the form fields after a short delay to ensure they're set correctly\r\n      setTimeout(() => {\r\n        const advanceInput = document.getElementById('advanceAmount') as HTMLInputElement;\r\n        const balanceInput = document.getElementById('balanceAmount') as HTMLInputElement;\r\n\r\n        if (advanceInput && balanceInput) {\r\n          console.log('Directly updating form fields');\r\n          advanceInput.value = '0';\r\n          balanceInput.value = remainingBalance.toString();\r\n        }\r\n      }, 500);\r\n    }\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  // Calculate balance amount when total or advance amount changes\r\n  useEffect(() => {\r\n    // Check if this is an additional payment for an inventory item\r\n    const paymentIdParam = new URLSearchParams(window.location.search).get('payment_id');\r\n    const balanceParam = new URLSearchParams(window.location.search).get('balance');\r\n\r\n    if (paymentType === PaymentType.INVENTORY_ITEM && paymentIdParam && balanceParam) {\r\n      // This is an additional payment for an inventory item\r\n      // For inventory items with existing payments, we don't auto-update the balance\r\n      // This matches the custom order behavior\r\n      const remainingBalance = parseFloat(balanceParam);\r\n      console.log(`For inventory item with existing payment, keeping balance at: ${remainingBalance}`);\r\n\r\n      // Only set the balance once when the component mounts\r\n      if (advanceAmount === 0) {\r\n        setBalanceAmount(remainingBalance);\r\n      }\r\n    }\r\n    // If this is a custom order with existing advance payment, account for it\r\n    else if (selectedOrder && selectedOrder.advance_amount && selectedOrder.advance_amount > 0) {\r\n      // Get the existing advance amount from the server data\r\n      const existingAdvance = typeof selectedOrder.advance_amount === 'string' ?\r\n        parseFloat(selectedOrder.advance_amount) : selectedOrder.advance_amount;\r\n\r\n      // Get the total amount\r\n      const totalAmt = typeof selectedOrder.estimated_amount === 'string' ?\r\n        parseFloat(selectedOrder.estimated_amount) : (selectedOrder.estimated_amount || 0);\r\n\r\n      // For custom orders, we don't auto-update the balance when the advance amount changes\r\n      // Only set it once when the component mounts\r\n      if (advanceAmount === 0) {\r\n        const remainingBalance = totalAmt - existingAdvance;\r\n        setBalanceAmount(remainingBalance);\r\n        console.log(`Setting initial balance for custom order: ${totalAmt} - ${existingAdvance} = ${remainingBalance}`);\r\n      }\r\n    } else {\r\n      // Normal calculation for new payments\r\n      setBalanceAmount(totalAmount - advanceAmount);\r\n      console.log(`Standard balance calculation: ${totalAmount} - ${advanceAmount} = ${totalAmount - advanceAmount}`);\r\n    }\r\n  }, [totalAmount, advanceAmount, selectedOrder, paymentType]);\r\n\r\n  // Handle payment type change\r\n  const handlePaymentTypeChange = (type: PaymentType) => {\r\n    setPaymentType(type);\r\n    // Reset selections\r\n    setSelectedItemId(null);\r\n    setSelectedOrderId(null);\r\n    setCustomerName('');\r\n    setTotalAmount(0);\r\n    setAdvanceAmount(0);\r\n    setQuantity(1);\r\n  };\r\n\r\n  // Handle category change\r\n  const handleCategoryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedCategory(e.target.value);\r\n    setSelectedItemId(null);\r\n  };\r\n\r\n  // Handle item selection\r\n  const handleItemChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const itemId = parseInt(e.target.value);\r\n    setSelectedItemId(itemId);\r\n  };\r\n\r\n  // Handle order selection\r\n  const handleOrderChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const orderId = parseInt(e.target.value);\r\n    setSelectedOrderId(orderId);\r\n  };\r\n\r\n  // Handle quantity change\r\n  const handleQuantityChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const qty = parseInt(e.target.value);\r\n    if (qty > 0) {\r\n      setQuantity(qty);\r\n\r\n      // Update total amount if item is selected\r\n      if (selectedItem) {\r\n        setTotalAmount(selectedItem.selling_price * qty);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    // Validate form\r\n    if (!customerName.trim()) {\r\n      setError('Please enter customer name');\r\n      return;\r\n    }\r\n\r\n    if (totalAmount <= 0) {\r\n      setError('Total amount must be greater than zero');\r\n      return;\r\n    }\r\n\r\n    if (advanceAmount <= 0) {\r\n      setError('Advance amount must be greater than zero');\r\n      return;\r\n    }\r\n\r\n    if (advanceAmount > totalAmount) {\r\n      setError('Advance amount cannot be greater than total amount');\r\n      return;\r\n    }\r\n\r\n    if (paymentType === PaymentType.INVENTORY_ITEM && !selectedItemId) {\r\n      setError('Please select an item');\r\n      return;\r\n    }\r\n\r\n    if (paymentType === PaymentType.CUSTOM_ORDER && !selectedOrderId) {\r\n      setError('Please select a custom order');\r\n      return;\r\n    }\r\n\r\n    // Get user info from localStorage\r\n    const userId = localStorage.getItem('userId');\r\n    const branchId = localStorage.getItem('branchId');\r\n\r\n    // Prepare data for submission\r\n    const paymentData: any = {\r\n      customer_name: customerName,\r\n      total_amount: totalAmount,\r\n      advance_amount: advanceAmount,\r\n      payment_method: paymentMethod,\r\n      notes,\r\n      created_by: userId ? parseInt(userId) : null,\r\n      branch_id: branchId ? parseInt(branchId) : null,\r\n      is_custom_order: paymentType === PaymentType.CUSTOM_ORDER,\r\n      order_id: paymentType === PaymentType.CUSTOM_ORDER ? parseInt(selectedOrderId as unknown as string) : null,\r\n      item_id: paymentType === PaymentType.INVENTORY_ITEM ? selectedItemId : null,\r\n      item_quantity: paymentType === PaymentType.INVENTORY_ITEM ? quantity : null\r\n    };\r\n\r\n    // Check if this is an additional payment for an inventory item\r\n    const paymentIdParam = new URLSearchParams(window.location.search).get('payment_id');\r\n    const advanceParam = new URLSearchParams(window.location.search).get('advance');\r\n    const balanceParam = new URLSearchParams(window.location.search).get('balance');\r\n\r\n    if (paymentType === PaymentType.INVENTORY_ITEM && paymentIdParam && advanceParam && balanceParam) {\r\n      // This is an additional payment for an inventory item\r\n      const previousAdvance = parseFloat(advanceParam);\r\n      const remainingBalance = parseFloat(balanceParam);\r\n\r\n      // Include the existing payment ID and advance amount\r\n      paymentData.previous_payment_id = parseInt(paymentIdParam);\r\n      paymentData.existing_advance_amount = previousAdvance;\r\n      console.log(`Including existing advance amount for inventory item: ${previousAdvance}`);\r\n\r\n      // Calculate the new balance amount: remaining balance - new advance\r\n      const calculatedBalance = remainingBalance - advanceAmount;\r\n      paymentData.balance_amount = calculatedBalance;\r\n      console.log(`Calculated balance for inventory item: ${remainingBalance} - ${advanceAmount} = ${calculatedBalance}`);\r\n    }\r\n    // If this is a custom order with existing advance payment, include it\r\n    else if (paymentType === PaymentType.CUSTOM_ORDER && selectedOrder?.advance_amount) {\r\n      const existingAdvance = typeof selectedOrder.advance_amount === 'string' ?\r\n        parseFloat(selectedOrder.advance_amount) : selectedOrder.advance_amount;\r\n\r\n      // Include the existing advance amount from the server\r\n      paymentData.existing_advance_amount = existingAdvance;\r\n      console.log(`Including existing advance amount from server: ${existingAdvance}`);\r\n\r\n      // Get the total amount from the server data\r\n      const totalAmt = typeof selectedOrder.estimated_amount === 'string' ?\r\n        parseFloat(selectedOrder.estimated_amount) : (selectedOrder.estimated_amount || 0);\r\n\r\n      // Calculate the balance amount: total - (existing + new)\r\n      const calculatedBalance = totalAmt - (existingAdvance + advanceAmount);\r\n      paymentData.balance_amount = calculatedBalance;\r\n      console.log(`Calculated balance for submission: ${totalAmt} - (${existingAdvance} + ${advanceAmount}) = ${calculatedBalance}`);\r\n    } else {\r\n      // Standard calculation for new payments\r\n      paymentData.balance_amount = totalAmount - advanceAmount;\r\n      console.log(`Standard balance calculation for submission: ${totalAmount} - ${advanceAmount} = ${paymentData.balance_amount}`);\r\n    }\r\n\r\n    // Log the data being sent\r\n    console.log('Sending payment data:', paymentData);\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3002/advance-payments/create', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(paymentData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to create advance payment');\r\n      }\r\n\r\n      const result = await response.json();\r\n\r\n      // Show success message\r\n      setSuccess('Advance payment created successfully!');\r\n      setPaymentReference(result.payment_reference);\r\n      setShowSuccessModal(true);\r\n\r\n      // Reset form after successful submission\r\n      if (paymentType === PaymentType.INVENTORY_ITEM) {\r\n        setSelectedItemId(null);\r\n        setQuantity(1);\r\n      } else {\r\n        setSelectedOrderId(null);\r\n      }\r\n\r\n      setCustomerName('');\r\n      setTotalAmount(0);\r\n      setAdvanceAmount(0);\r\n      setNotes('');\r\n\r\n    } catch (err) {\r\n      console.error('Error creating advance payment:', err);\r\n      setError(err instanceof Error ? err.message : 'An error occurred while creating the advance payment');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle cancel button\r\n  const handleCancel = () => {\r\n    router.back();\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-6xl mx-auto\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold text-gray-800\">Advance Payment</h1>\r\n        <button\r\n          onClick={() => router.push('/DashView/advance-payment/view')}\r\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center\"\r\n        >\r\n          <FileText className=\"mr-2 h-5 w-5\" />\r\n          View All Payments\r\n        </button>\r\n      </div>\r\n\r\n\r\n\r\n      {/* Error message */}\r\n      {error && (\r\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\r\n          <span className=\"block sm:inline\">{error}</span>\r\n          <button\r\n            className=\"absolute top-0 bottom-0 right-0 px-4 py-3\"\r\n            onClick={() => setError(null)}\r\n          >\r\n            <X size={18} />\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Success message */}\r\n      {success && !showSuccessModal && (\r\n        <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\">\r\n          <span className=\"block sm:inline\">{success}</span>\r\n          <button\r\n            className=\"absolute top-0 bottom-0 right-0 px-4 py-3\"\r\n            onClick={() => setSuccess(null)}\r\n          >\r\n            <X size={18} />\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Payment type selection */}\r\n      <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n        <h2 className=\"text-lg font-semibold mb-4\">Payment Type</h2>\r\n        <div className=\"flex space-x-4\">\r\n          <button\r\n            type=\"button\"\r\n            className={`flex items-center px-4 py-2 rounded-md ${\r\n              paymentType === PaymentType.INVENTORY_ITEM\r\n                ? 'bg-yellow-500 text-white'\r\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n            }`}\r\n            onClick={() => handlePaymentTypeChange(PaymentType.INVENTORY_ITEM)}\r\n          >\r\n            <ShoppingBag className=\"mr-2\" size={18} />\r\n            Inventory Item\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className={`flex items-center px-4 py-2 rounded-md ${\r\n              paymentType === PaymentType.CUSTOM_ORDER\r\n                ? 'bg-yellow-500 text-white'\r\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n            }`}\r\n            onClick={() => handlePaymentTypeChange(PaymentType.CUSTOM_ORDER)}\r\n          >\r\n            <Package className=\"mr-2\" size={18} />\r\n            Custom Order\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <form id=\"payment-form\" onSubmit={handleSubmit} className=\"bg-white p-6 rounded-lg shadow-md\">\r\n        {/* Item or Order Selection */}\r\n        {paymentType === PaymentType.INVENTORY_ITEM ? (\r\n          <div className=\"mb-6 space-y-4\">\r\n            <div>\r\n              <label htmlFor=\"category\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Category\r\n              </label>\r\n              <div className=\"relative\">\r\n                <select\r\n                  id=\"category\"\r\n                  className=\"block w-full p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\r\n                  value={selectedCategory}\r\n                  onChange={handleCategoryChange}\r\n                >\r\n                  {categories.map(category => (\r\n                    <option key={category} value={category}>\r\n                      {category}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"item\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Item\r\n              </label>\r\n              <div className=\"relative\">\r\n                <select\r\n                  id=\"item\"\r\n                  className=\"block w-full p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\r\n                  value={selectedItemId || ''}\r\n                  onChange={handleItemChange}\r\n                >\r\n                  <option value=\"\">Select an item</option>\r\n                  {filteredItems.map(item => (\r\n                    <option key={item.item_id} value={item.item_id}>\r\n                      {item.product_title} - {formatCurrency(item.selling_price)} ({item.in_stock} in stock)\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              {/* Show notification for additional payment */}\r\n              {selectedItem && new URLSearchParams(window.location.search).get('payment_id') && (\r\n                <div className=\"mt-2 p-2 bg-blue-50 text-blue-800 rounded-md text-sm\">\r\n                  <strong>Order Status: Partially Paid</strong>\r\n                  <br />\r\n                  <span>Current advance payment: {formatCurrency(parseFloat(new URLSearchParams(window.location.search).get('total_amount') || '0') - parseFloat(new URLSearchParams(window.location.search).get('balance') || '0'))}</span>\r\n                  <br />\r\n                  <span>Remaining balance: {formatCurrency(parseFloat(new URLSearchParams(window.location.search).get('balance') || '0'))}</span>\r\n                  <br />\r\n                  <span className=\"text-green-700\">Any amount entered below will be an additional payment.</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"quantity\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Quantity\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"quantity\"\r\n                min=\"1\"\r\n                className=\"block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                value={quantity}\r\n                onChange={handleQuantityChange}\r\n                disabled={!selectedItem}\r\n                max={selectedItem?.in_stock || 1}\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"mb-6\">\r\n            <label htmlFor=\"order\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Custom Order <span className=\"text-xs text-gray-500\">(Only showing orders that need payment)</span>\r\n            </label>\r\n            <div className=\"relative\">\r\n              <select\r\n                id=\"order\"\r\n                className=\"block w-full p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\r\n                value={selectedOrderId || ''}\r\n                onChange={handleOrderChange}\r\n              >\r\n                <option value=\"\">Select a custom order</option>\r\n                {customOrders.length > 0 ? (\r\n                  customOrders.map(order => (\r\n                    <option key={order.order_id} value={order.order_id}>\r\n                      {order.order_reference} - {order.customer_name} - {formatCurrency(order.estimated_amount || order.total_amount)}\r\n                      {order.advance_amount && order.advance_amount > 0 ? ` (Advance: ${formatCurrency(order.advance_amount)})` : ''}\r\n                    </option>\r\n                  ))\r\n                ) : (\r\n                  <option value=\"\" disabled>No orders requiring payment found</option>\r\n               )}\r\n              </select>\r\n            </div>\r\n\r\n            {selectedOrder && (\r\n              <div className=\"mt-2 p-2 bg-blue-50 text-blue-800 rounded-md text-sm\">\r\n                <strong>Order Status:</strong> {selectedOrder.payment_status || 'Not Paid'}\r\n                {selectedOrder.advance_amount && selectedOrder.advance_amount > 0 ? (\r\n                  <>\r\n                    <br />\r\n                    <strong>Current advance payment:</strong> {formatCurrency(selectedOrder.advance_amount || 0)}\r\n                    <br />\r\n                    <strong>Remaining balance:</strong> {formatCurrency(selectedOrder.balance_amount || ((selectedOrder.estimated_amount || 0) - (selectedOrder.advance_amount || 0)))}\r\n                    <br />\r\n                    <span className=\"text-green-700\">Any amount entered below will be an additional payment.</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <br />\r\n                    <strong>Total amount:</strong> {formatCurrency(selectedOrder.estimated_amount || 0)}\r\n                    <br />\r\n                    <span className=\"text-green-700\">No payments have been made yet.</span>\r\n                  </>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Customer Information */}\r\n        <div className=\"mb-6\">\r\n          <label htmlFor=\"customerName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Customer Name\r\n          </label>\r\n          <div className=\"relative\">\r\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <User className=\"h-5 w-5 text-gray-400\" />\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              id=\"customerName\"\r\n              className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\r\n              placeholder=\"Enter customer name\"\r\n              value={customerName}\r\n              onChange={(e) => setCustomerName(e.target.value)}\r\n              readOnly={paymentType === PaymentType.CUSTOM_ORDER && !!selectedOrder}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Payment Details */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n          <div>\r\n            <label htmlFor=\"totalAmount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Total Amount\r\n            </label>\r\n            <div className=\"relative\">\r\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                <LKRIcon className=\"h-5 w-5 text-gray-400\" />\r\n              </div>\r\n              <input\r\n                type=\"number\"\r\n                id=\"totalAmount\"\r\n                className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\r\n                placeholder=\"0.00\"\r\n                value={totalAmount || ''}\r\n                onChange={(e) => setTotalAmount(parseFloat(e.target.value) || 0)}\r\n                readOnly={\r\n                  (paymentType === PaymentType.INVENTORY_ITEM && !!selectedItem) ||\r\n                  (paymentType === PaymentType.CUSTOM_ORDER && !!selectedOrder)\r\n                }\r\n                min=\"0\"\r\n                step=\"0.01\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"advanceAmount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Advance Amount\r\n            </label>\r\n            <div className=\"relative\">\r\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                <LKRIcon className=\"h-5 w-5 text-gray-400\" />\r\n              </div>\r\n              <input\r\n                type=\"number\"\r\n                id=\"advanceAmount\"\r\n                className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\r\n                placeholder=\"0.00\"\r\n                value={advanceAmount || ''}\r\n                onChange={(e) => {\r\n                  const newAdvance = parseFloat(e.target.value) || 0;\r\n                  setAdvanceAmount(newAdvance);\r\n\r\n                  // Check if this is an additional payment\r\n                  const paymentIdParam = new URLSearchParams(window.location.search).get('payment_id');\r\n                  const balanceParam = new URLSearchParams(window.location.search).get('balance');\r\n\r\n                  if (paymentIdParam && balanceParam) {\r\n                    // For additional payments, balance remains the same - we don't auto-update it\r\n                    // This matches the custom order behavior\r\n                    const remainingBalance = parseFloat(balanceParam);\r\n                    console.log(`Keeping balance at: ${remainingBalance} (not auto-updating)`);\r\n                  } else {\r\n                    // Standard calculation for new payments\r\n                    setBalanceAmount(totalAmount - newAdvance);\r\n                  }\r\n                }}\r\n                min=\"0\"\r\n                max={totalAmount}\r\n                step=\"0.01\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"balanceAmount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Balance Amount\r\n            </label>\r\n            <div className=\"relative\">\r\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                <LKRIcon className=\"h-5 w-5 text-gray-400\" />\r\n              </div>\r\n              <input\r\n                type=\"number\"\r\n                id=\"balanceAmount\"\r\n                className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md bg-gray-50 focus:ring-yellow-500 focus:border-yellow-500\"\r\n                value={balanceAmount || ''}\r\n                readOnly\r\n                // Add key to force re-render when balance changes\r\n                key={`balance-${balanceAmount}-${Date.now()}`}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"paymentMethod\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Payment Method\r\n            </label>\r\n            <div className=\"relative\">\r\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                <CreditCard className=\"h-5 w-5 text-gray-400\" />\r\n              </div>\r\n              <select\r\n                id=\"paymentMethod\"\r\n                className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\r\n                value={paymentMethod}\r\n                onChange={(e) => setPaymentMethod(e.target.value)}\r\n              >\r\n                <option value=\"Cash\">Cash</option>\r\n                <option value=\"Credit Card\">Credit Card</option>\r\n                <option value=\"Debit Card\">Debit Card</option>\r\n                <option value=\"Bank Transfer\">Bank Transfer</option>\r\n                <option value=\"Cheque\">Cheque</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Notes */}\r\n        <div className=\"mb-6\">\r\n          <label htmlFor=\"notes\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Notes (Optional)\r\n          </label>\r\n          <div className=\"relative\">\r\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <FileText className=\"h-5 w-5 text-gray-400\" />\r\n            </div>\r\n            <textarea\r\n              id=\"notes\"\r\n              className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\r\n              placeholder=\"Add any additional notes here\"\r\n              value={notes}\r\n              onChange={(e) => setNotes(e.target.value)}\r\n              rows={3}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Action Buttons */}\r\n        <div className=\"flex justify-between\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleCancel}\r\n            className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-yellow-500 hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n            disabled={loading}\r\n          >\r\n            {loading ? 'Processing...' : 'Confirm Payment'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      {/* Success Modal */}\r\n      {showSuccessModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white p-8 rounded-lg shadow-lg max-w-md w-full\">\r\n            <div className=\"flex items-center justify-center mb-4 text-green-500\">\r\n              <CheckCircle size={48} />\r\n            </div>\r\n            <h2 className=\"text-2xl font-bold text-center mb-4\">Payment Successful!</h2>\r\n            <p className=\"text-center mb-2\">Your advance payment has been processed successfully.</p>\r\n            {paymentReference && (\r\n              <p className=\"text-center font-semibold mb-6\">Reference: {paymentReference}</p>\r\n            )}\r\n            <div className=\"flex justify-center space-x-4\">\r\n              <button\r\n                onClick={() => setShowSuccessModal(false)}\r\n                className=\"px-4 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600\"\r\n              >\r\n                Close\r\n              </button>\r\n              <button\r\n                onClick={() => {\r\n                  // Implement print functionality here\r\n                  window.print();\r\n                }}\r\n                className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300\"\r\n              >\r\n                Print Receipt\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdvancePaymentPage;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1801, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}