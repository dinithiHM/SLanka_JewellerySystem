{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/services/reportService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002';\n\n// Create axios instance with auth header\nconst axiosInstance = axios.create({\n  baseURL: `${API_URL}/api/reports`,\n});\n\n// Add request interceptor to include auth token\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // Try to get token from localStorage\n    let token = localStorage.getItem('token');\n\n    // If token not found in localStorage, try to get it from userInfo\n    if (!token) {\n      const userInfo = localStorage.getItem('userInfo');\n      if (userInfo) {\n        try {\n          const parsedUserInfo = JSON.parse(userInfo);\n          token = parsedUserInfo.token;\n        } catch (e) {\n          console.error('Error parsing userInfo:', e);\n        }\n      }\n    }\n\n    // If token found, add it to headers\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    } else {\n      console.warn('No authentication token found for API request');\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Get sales report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getSalesReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/sales', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching sales report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get current stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getCurrentStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/current-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching current stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get gold stock report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getGoldStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/gold-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching gold stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get low stock report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getLowStockReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/low-stock', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching low stock report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get inventory valuation report data\n * @param {Object} params - Query parameters for the report (branchId for filtering)\n * @returns {Promise} - Promise with report data\n */\nexport const getInventoryValuationReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/inventory/valuation', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory valuation report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get customer report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomerReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/customers', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching customer report:', error);\n    throw error;\n  }\n};\n\n/**\n * Get financial report data\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with report data\n */\nexport const getFinancialReport = async (params = {}) => {\n  try {\n    const response = await axiosInstance.get('/financial', { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching financial report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as CSV\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportCSV = async (reportType, params = {}) => {\n  try {\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'csv', ...params },\n      responseType: 'blob'\n    });\n\n    // Create a download link and trigger download\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const date = new Date().toISOString().split('T')[0];\n    link.setAttribute('download', `${reportType}_report_${date}.csv`);\n\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report:', error);\n    throw error;\n  }\n};\n\n/**\n * Export report as PDF\n * @param {String} reportType - Type of report to export\n * @param {Object} params - Query parameters for the report\n * @param {Object} chartRef - Optional reference to chart component for including in PDF\n * @returns {Promise} - Promise with export result\n */\nexport const exportReportPDF = async (reportType, params = {}, chartRef = null) => {\n  try {\n    // Always get data from the API first\n    let data = [];\n    let filename = `${reportType}_report_${new Date().toISOString().split('T')[0]}`;\n\n    // Get data from the API\n    console.log('Fetching report data from API for', reportType);\n    const response = await axiosInstance.get('/export', {\n      params: { reportType, format: 'json', ...params }\n    });\n\n    // Log the response for debugging\n    console.log('API response:', response.data);\n\n    // Check if we have data from the API\n    if (response.data && response.data.data && response.data.data.length > 0) {\n      console.log('Using API data for report');\n      data = response.data.data;\n      filename = response.data.filename || filename;\n    } else {\n      console.log('No data from API, checking for chart data');\n      // If no data from API, try to use chart data as fallback\n      if (chartRef && chartRef.current) {\n        try {\n          // Create data from the chart for PDF\n          const chartData = window.chartData || [];\n\n          if (chartData && chartData.length > 0) {\n            console.log('Using chart data for report');\n            data = chartData;\n          } else {\n            console.log('No chart data available');\n          }\n        } catch (chartError) {\n          console.error('Error getting chart data:', chartError);\n        }\n      }\n    }\n\n    // Get user info from server response or fallback to localStorage\n    let userName = 'System User';\n\n    // Check if the server provided a user name in the response\n    if (response.data && response.data.generatedBy) {\n      console.log('Using server-provided user name:', response.data.generatedBy);\n      userName = response.data.generatedBy;\n    } else {\n      // Fallback to localStorage if server didn't provide a name\n      const userInfo = JSON.parse(localStorage.getItem('userInfo')) || { name: 'System User' };\n      console.log('Using localStorage user name:', userInfo.name);\n      userName = userInfo.name;\n    }\n\n    // Import jsPDF and autoTable dynamically\n    const { jsPDF } = await import('jspdf');\n    const { default: autoTable } = await import('jspdf-autotable');\n\n    // Define gold-themed colors for charts\n    const COLORS = ['#D4AF37', '#CFB53B', '#B8860B', '#DAA520', '#FFD700', '#FFC125', '#FFBF00', '#F0E68C'];\n\n    // Create a new PDF document\n    const doc = new jsPDF();\n\n    // Add company header\n    doc.setFontSize(22);\n    doc.setTextColor(184, 134, 11); // Gold color\n    doc.text(\"S Lanaka Jewellery\", 105, 15, { align: 'center' });\n\n    // Add title\n    let title = 'Report';\n    let titleColor = [184, 134, 11]; // Default gold color\n\n    switch (reportType) {\n      case 'current-stock':\n        title = 'Current Stock Report';\n        titleColor = [0, 128, 0]; // Green\n        break;\n      case 'gold-stock':\n        title = 'Gold Stock Report';\n        titleColor = [184, 134, 11]; // Gold\n        break;\n      case 'low-stock':\n        title = 'Low Stock Report';\n        titleColor = [255, 0, 0]; // Red\n        break;\n      case 'valuation':\n        title = 'Inventory Valuation Report';\n        titleColor = [0, 0, 128]; // Navy\n        break;\n      case 'sales-daily':\n        title = 'Daily Sales Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n      case 'sales-monthly':\n        title = 'Monthly Sales Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n      case 'sales-category':\n        title = 'Sales by Category Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n      case 'sales-branch':\n        title = 'Sales by Branch Report';\n        titleColor = [75, 0, 130]; // Indigo\n        break;\n    }\n\n    // Add report title\n    doc.setFontSize(18);\n    doc.setTextColor(titleColor[0], titleColor[1], titleColor[2]);\n    doc.text(title, 105, 25, { align: 'center' });\n\n    // Add date and user info\n    doc.setFontSize(10);\n    doc.setTextColor(100, 100, 100);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()} by ${userName}`, 105, 32, { align: 'center' });\n\n    // Add decorative line\n    doc.setDrawColor(titleColor[0], titleColor[1], titleColor[2]);\n    doc.setLineWidth(0.5);\n    doc.line(14, 35, 196, 35);\n\n    // Set starting Y position for the table\n    let yPos = 40;\n\n    // For sales reports, ensure we have the correct columns in the right order\n    let formattedData = data;\n    let headers = [];\n\n    // Special handling for category report\n    if (reportType === 'sales-category' && window.chartData && window.chartData.length > 0) {\n      console.log('Using chart data for category report PDF');\n\n      // Use the category data from the chart\n      const categoryData = window.chartData;\n\n      // Define the expected columns for category report\n      headers = ['Category', 'Quantity Sold', 'Sales Amount', '% of Total Sales'];\n\n      // Calculate total sales for percentage\n      const totalSales = categoryData.reduce((sum, item) => sum + item.value, 0);\n\n      // Format the data\n      formattedData = categoryData.map(item => {\n        const percentage = ((item.value / totalSales) * 100).toFixed(2) + '%';\n        return {\n          category: item.name,\n          quantity: '0', // We don't have this in chartData, will be updated if available\n          amount: item.value.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n          percentage: percentage\n        };\n      });\n\n      // Try to get quantity data from the page if available\n      if (typeof window !== 'undefined' && window.categoryQuantities) {\n        formattedData.forEach(item => {\n          if (window.categoryQuantities[item.category]) {\n            item.quantity = window.categoryQuantities[item.category];\n          }\n        });\n      }\n    }\n    else if (reportType.startsWith('sales-') && data.length > 0) {\n      // Define the expected columns for sales reports\n      const expectedColumns = [\n        'sale_id', 'sale_date', 'total_amount', 'discount',\n        'payment_method', 'customer_name', 'branch_name', 'employee_name'\n      ];\n\n      // Format the headers\n      headers = [\n        'Sale ID', 'Sale Date', 'Total Amount', 'Discount',\n        'Payment Method', 'Customer Name', 'Branch Name', 'Employee Name'\n      ];\n\n      // Ensure data has all expected columns in the right order\n      formattedData = data.map(item => {\n        const formattedItem = {};\n        expectedColumns.forEach(col => {\n          formattedItem[col] = item[col] !== undefined ? item[col] : 'N/A';\n        });\n        return formattedItem;\n      });\n    } else {\n      // For other reports, use the default approach\n      headers = Object.keys(data[0] || {}).map(header => {\n        // Convert camelCase or snake_case to Title Case with spaces\n        return header\n          .replace(/_/g, ' ')\n          .replace(/([A-Z])/g, ' $1')\n          .replace(/^./, str => str.toUpperCase())\n          .trim();\n      });\n    }\n\n    // Format data for autoTable\n    const tableData = formattedData.map(item => {\n      return Object.values(item);\n    });\n\n    // Define gold-themed colors for different report types\n    let headColor, alternateColor;\n\n    switch (true) {\n      case reportType.startsWith('sales-'):\n        headColor = [75, 0, 130]; // Deep purple for sales\n        alternateColor = [245, 245, 255]; // Light purple-ish\n        break;\n      case reportType === 'gold-stock':\n        headColor = [184, 134, 11]; // Gold\n        alternateColor = [255, 248, 220]; // Cornsilk\n        break;\n      case reportType === 'current-stock':\n        headColor = [0, 128, 0]; // Green\n        alternateColor = [240, 255, 240]; // Honeydew\n        break;\n      case reportType === 'low-stock':\n        headColor = [178, 34, 34]; // Firebrick\n        alternateColor = [255, 240, 240]; // Light red\n        break;\n      case reportType === 'valuation':\n        headColor = [0, 0, 128]; // Navy\n        alternateColor = [240, 248, 255]; // Alice blue\n        break;\n      default:\n        headColor = [218, 165, 32]; // Goldenrod (default)\n        alternateColor = [253, 245, 230]; // Light gold\n        break;\n    }\n\n    // Check if we have data to display in the table\n    if (tableData.length > 0) {\n      console.log('Creating table with data:', tableData.length, 'rows');\n\n      // Create table with gold-themed styling\n      autoTable(doc, {\n        head: [headers],\n        body: tableData,\n        startY: yPos,\n        styles: {\n          fontSize: 8,\n          cellPadding: 3,\n          lineColor: [200, 200, 200]\n        },\n        headStyles: {\n          fillColor: headColor,\n          textColor: [255, 255, 255],\n          fontStyle: 'bold',\n          halign: 'center'\n        },\n        alternateRowStyles: {\n          fillColor: alternateColor\n        },\n        columnStyles: {\n          // Apply specific formatting based on report type\n          ...(reportType === 'sales-daily' ? {\n            0: { halign: 'center' },  // Sale ID\n            1: { halign: 'center' },  // Sale Date\n            2: { halign: 'right' },   // Total Amount\n            3: { halign: 'right' },   // Discount\n            4: { halign: 'center' },  // Payment Method\n            5: { halign: 'left' },    // Customer Name\n            6: { halign: 'left' },    // Branch Name\n            7: { halign: 'left' }     // Employee Name\n          } : reportType === 'sales-monthly' ? {\n            0: { halign: 'center' },  // Month\n            1: { halign: 'right' },   // Sales Amount\n            2: { halign: 'center' },  // Transactions\n            3: { halign: 'right' }    // Average\n          } : {\n            // Default formatting for other reports\n            2: { halign: 'right' },\n            3: { halign: 'right' },\n            4: { halign: 'right' }\n          })\n        },\n        didDrawPage: () => {\n          // Add footer with page numbers\n          doc.setFontSize(8);\n          doc.setTextColor(100, 100, 100);\n          doc.text(\n            `S Lanaka Jewellery - Page ${doc.internal.getNumberOfPages()}`,\n            105,\n            doc.internal.pageSize.height - 10,\n            { align: 'center' }\n          );\n        }\n      });\n    } else {\n      console.log('No data for table, skipping table creation');\n      // Add a message indicating no data\n      doc.setFontSize(12);\n      doc.setTextColor(100, 100, 100);\n      doc.text(\"No data available for the selected filters\", 105, yPos + 20, { align: 'center' });\n\n      // Update yPos for chart placement\n      yPos += 30;\n    }\n\n    // Get the final Y position after the table\n    // Use the current yPos if no table was created or autoTable is not available\n    let finalY = yPos;\n    if (doc.autoTable && doc.autoTable.previous) {\n      finalY = doc.autoTable.previous.finalY;\n      console.log('Final Y position from autoTable:', finalY);\n    } else {\n      console.log('Using default Y position:', finalY);\n    }\n\n    // Always add a page break for the chart\n    doc.addPage();\n\n    // Add chart after the table if available (for sales reports)\n    if (reportType.startsWith('sales-')) {\n      try {\n        console.log('Adding chart to PDF on new page');\n\n        // Add a title for the chart section\n        doc.setFontSize(16);\n        doc.setTextColor(titleColor[0], titleColor[1], titleColor[2]);\n\n        // Use different title based on report type\n        const chartTitle = reportType === 'sales-category'\n          ? \"Sales Distribution by Category\"\n          : \"Sales Trend Chart\";\n\n        doc.text(chartTitle, 105, 20, { align: 'center' });\n\n        // Create a simple chart directly in the PDF\n        if (typeof window !== 'undefined' && window.chartData) {\n          // Validate chart data\n          if (!Array.isArray(window.chartData)) {\n            console.error('Chart data is not an array:', window.chartData);\n            throw new Error('Invalid chart data format');\n          }\n\n          if (window.chartData.length === 0) {\n            console.warn('Chart data array is empty');\n            doc.setFontSize(12);\n            doc.setTextColor(100, 100, 100);\n            doc.text(\n              \"No data available for chart visualization\",\n              105,\n              60,\n              { align: 'center' }\n            );\n            return;\n          }\n\n          const chartData = window.chartData;\n          console.log('Using chart data from window object:', chartData.length, 'data points');\n\n          // Set up chart dimensions for A4 page (210 x 297 mm)\n          const pageWidth = doc.internal.pageSize.width;\n\n          // Center the chart on the page with proper margins\n          const chartX = 25;\n          const chartY = 40;\n          const chartWidth = pageWidth - 50; // 25mm margins on each side\n          const chartHeight = 120; // Taller chart\n\n          // Calculate bar spacing and width based on data points\n          // Adjust based on number of data points to prevent overcrowding\n          const maxBars = Math.min(chartData.length, 15); // Limit to 15 data points max\n          const barSpacing = chartWidth / (maxBars * 2);\n          const barWidth = Math.min(barSpacing * 0.8, 12); // Limit max width\n\n          // Find max values for scaling\n          let maxAmount = 0;\n          let maxTransactions = 0;\n\n          // Validate and find max values\n          chartData.forEach(item => {\n            // Ensure values are numbers and valid\n            if (item && typeof item.amount !== 'undefined') {\n              const amount = typeof item.amount === 'number' ? item.amount : parseFloat(item.amount) || 0;\n              maxAmount = Math.max(maxAmount, amount);\n            }\n\n            if (item && typeof item.transactions !== 'undefined') {\n              const transactions = typeof item.transactions === 'number' ? item.transactions : parseFloat(item.transactions) || 0;\n              maxTransactions = Math.max(maxTransactions, transactions);\n            }\n          });\n\n          console.log('Chart max values:', { maxAmount, maxTransactions });\n\n          // Ensure we have non-zero max values\n          if (maxAmount <= 0) maxAmount = 1000;\n          if (maxTransactions <= 0) maxTransactions = 10;\n\n          // Add some padding to max values\n          maxAmount = maxAmount * 1.1;\n          maxTransactions = maxTransactions * 1.1;\n\n          // Draw chart axes\n          doc.setDrawColor(200, 200, 200);\n          doc.setLineWidth(0.5);\n\n          // Y-axis\n          doc.line(chartX, chartY, chartX, chartY + chartHeight);\n\n          // X-axis\n          doc.line(chartX, chartY + chartHeight, chartX + chartWidth, chartY + chartHeight);\n\n          // Determine which data points to show if we have too many\n          let dataToShow = chartData;\n          if (chartData.length > maxBars) {\n            // If we have too many data points, sample them evenly\n            const step = Math.ceil(chartData.length / maxBars);\n            dataToShow = [];\n            for (let i = 0; i < chartData.length; i += step) {\n              dataToShow.push(chartData[i]);\n            }\n            // Always include the last data point\n            if (dataToShow[dataToShow.length - 1] !== chartData[chartData.length - 1]) {\n              dataToShow.push(chartData[chartData.length - 1]);\n            }\n          }\n\n          // Draw chart based on report type\n          if (reportType === 'sales-category') {\n            // Draw pie chart for category data\n            const centerX = chartX + chartWidth / 2;\n            const centerY = chartY + chartHeight / 2;\n            const radius = Math.min(chartWidth, chartHeight) / 2.5;\n\n            // Calculate total for percentages\n            const total = chartData.reduce((sum, item) => sum + (typeof item.value === 'number' ? item.value : 0), 0);\n\n            // Draw pie slices\n            let startAngle = 0;\n            let endAngle = 0;\n\n            // Draw legend\n            doc.setFontSize(10);\n            const legendX = chartX + 10;\n            let legendY = chartY + 10;\n            const legendSpacing = 15;\n\n            chartData.forEach((item, index) => {\n              const value = typeof item.value === 'number' ? item.value : 0;\n              const percentage = total > 0 ? value / total : 0;\n              endAngle = startAngle + percentage * 2 * Math.PI;\n\n              // Set slice color\n              const colorIndex = index % COLORS.length;\n              const r = parseInt(COLORS[colorIndex].substring(1, 3), 16);\n              const g = parseInt(COLORS[colorIndex].substring(3, 5), 16);\n              const b = parseInt(COLORS[colorIndex].substring(5, 7), 16);\n\n              // Draw pie slice\n              doc.setFillColor(r, g, b);\n              doc.setDrawColor(255, 255, 255);\n              doc.setLineWidth(1);\n\n              // Draw the slice\n              doc.circle(centerX, centerY, radius, 'S');\n              doc.setLineWidth(0.5);\n\n              // Calculate angles for the slice\n\n              // Draw slice\n              if (percentage > 0) {\n                doc.moveTo(centerX, centerY);\n                doc.lineTo(\n                  centerX + Math.cos(startAngle) * radius,\n                  centerY + Math.sin(startAngle) * radius\n                );\n\n                // Draw arc (approximated with lines)\n                const steps = Math.max(10, Math.floor(percentage * 60));\n                for (let i = 1; i <= steps; i++) {\n                  const angle = startAngle + (i / steps) * (endAngle - startAngle);\n                  doc.lineTo(\n                    centerX + Math.cos(angle) * radius,\n                    centerY + Math.sin(angle) * radius\n                  );\n                }\n\n                doc.lineTo(centerX, centerY);\n                doc.fill();\n              }\n\n              // Add to legend\n              doc.setFillColor(r, g, b);\n              doc.rect(legendX, legendY - 6, 10, 10, 'F');\n              doc.setTextColor(0, 0, 0);\n              doc.text(\n                `${item.name}: ${(percentage * 100).toFixed(1)}%`,\n                legendX + 15,\n                legendY\n              );\n              legendY += legendSpacing;\n\n              // Update start angle for next slice\n              startAngle = endAngle;\n            });\n          }\n          else if (reportType === 'sales-monthly') {\n            // Check if we have enough data points for a line chart\n            if (dataToShow.length <= 1) {\n              // Not enough data for a line chart\n              doc.setFontSize(12);\n              doc.setTextColor(100, 100, 100);\n              doc.text(\n                \"Not enough data points for chart visualization\",\n                chartX + chartWidth / 2,\n                chartY + chartHeight / 2,\n                { align: 'center' }\n              );\n              return; // Exit early\n            }\n\n            // Draw line chart for monthly data\n            const pointSpacing = chartWidth / (Math.max(dataToShow.length - 1, 1));\n\n            // Draw lines\n            // Amount line (dark gold)\n            doc.setDrawColor(184, 134, 11); // DarkGoldenRod\n            doc.setLineWidth(2);\n\n            // Draw amount line\n            let prevX, prevY;\n            dataToShow.forEach((item, index) => {\n              // Skip items with invalid data\n              if (typeof item.amount !== 'number' || isNaN(item.amount)) {\n                console.warn('Invalid amount value in chart data:', item);\n                return;\n              }\n\n              const x = chartX + (index * pointSpacing);\n              const y = chartY + chartHeight - ((item.amount / maxAmount) * chartHeight);\n\n              // Draw point\n              doc.setFillColor(184, 134, 11); // DarkGoldenRod\n              doc.circle(x, y, 3, 'F');\n\n              // Draw line segment\n              if (index > 0 && prevX !== undefined && prevY !== undefined) {\n                doc.line(prevX, prevY, x, y);\n              }\n\n              prevX = x;\n              prevY = y;\n            });\n\n            // Transactions line (gold)\n            doc.setDrawColor(218, 165, 32); // GoldenRod\n            doc.setLineWidth(2);\n\n            // Draw transactions line\n            prevX = undefined;\n            prevY = undefined;\n            dataToShow.forEach((item, index) => {\n              // Skip items with invalid data\n              if (typeof item.transactions !== 'number' || isNaN(item.transactions)) {\n                console.warn('Invalid transactions value in chart data:', item);\n                return;\n              }\n\n              const x = chartX + (index * pointSpacing);\n              const y = chartY + chartHeight - ((item.transactions / maxTransactions) * chartHeight);\n\n              // Draw point\n              doc.setFillColor(218, 165, 32); // GoldenRod\n              doc.circle(x, y, 3, 'F');\n\n              // Draw line segment\n              if (index > 0 && prevX !== undefined && prevY !== undefined) {\n                doc.line(prevX, prevY, x, y);\n              }\n\n              prevX = x;\n              prevY = y;\n\n              // Add month label\n              doc.setFontSize(7);\n              doc.setTextColor(100, 100, 100);\n\n              // Rotate labels if we have many data points\n              if (dataToShow.length > 7) {\n                doc.text(\n                  item.month || item.date,\n                  x,\n                  chartY + chartHeight + 10,\n                  {\n                    align: 'right',\n                    angle: 45\n                  }\n                );\n              } else {\n                doc.text(\n                  item.month || item.date,\n                  x,\n                  chartY + chartHeight + 8,\n                  { align: 'center' }\n                );\n              }\n            });\n          } else {\n            // Draw bar chart for daily data\n            dataToShow.forEach((item, index) => {\n              const x = chartX + (index * barSpacing * 2) + barSpacing;\n\n              // Amount bar (dark gold)\n              const amountHeight = (item.amount / maxAmount) * chartHeight;\n              doc.setFillColor(184, 134, 11); // DarkGoldenRod\n              doc.rect(\n                x,\n                chartY + chartHeight - amountHeight,\n                barWidth,\n                amountHeight,\n                'F'\n              );\n\n              // Transactions bar (gold)\n              const transactionsHeight = (item.transactions / maxTransactions) * chartHeight;\n              doc.setFillColor(218, 165, 32); // GoldenRod\n              doc.rect(\n                x + barWidth,\n                chartY + chartHeight - transactionsHeight,\n                barWidth,\n                transactionsHeight,\n                'F'\n              );\n\n              // Add date label\n              doc.setFontSize(7);\n              doc.setTextColor(100, 100, 100);\n\n              // Rotate labels if we have many data points\n              if (dataToShow.length > 7) {\n                doc.text(\n                  item.date,\n                  x + barWidth / 2,\n                  chartY + chartHeight + 10,\n                  {\n                    align: 'right',\n                    angle: 45\n                  }\n                );\n              } else {\n                doc.text(\n                  item.date,\n                  x + barWidth / 2,\n                  chartY + chartHeight + 8,\n                  { align: 'center' }\n                );\n              }\n            });\n          }\n\n          // Calculate legend position based on chart dimensions\n          const legendY = chartY + chartHeight + (dataToShow.length > 7 ? 25 : 15);\n\n          // Add legend with better spacing\n          doc.setFillColor(184, 134, 11); // DarkGoldenRod\n          doc.rect(chartX, legendY, 10, 5, 'F');\n          doc.setFontSize(9);\n          doc.setTextColor(50, 50, 50);\n          doc.text('Sales Amount', chartX + 15, legendY + 4);\n\n          doc.setFillColor(218, 165, 32); // GoldenRod\n          doc.rect(chartX + 80, legendY, 10, 5, 'F');\n          doc.text('Transactions', chartX + 95, legendY + 4);\n\n          // Add grid lines for better readability\n          doc.setDrawColor(220, 220, 220);\n          doc.setLineWidth(0.2);\n\n          // Horizontal grid lines\n          for (let i = 1; i < 4; i++) {\n            const y = chartY + (chartHeight / 4) * i;\n            doc.line(chartX, y, chartX + chartWidth, y);\n          }\n\n          // Add Y-axis labels with better formatting\n          doc.setFontSize(8);\n          doc.setTextColor(80, 80, 80);\n\n          // Format large numbers with K/M suffix\n          const formatLargeNumber = (num) => {\n            if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n            if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n            return num.toString();\n          };\n\n          // Amount labels (left)\n          doc.text(\n            formatLargeNumber(maxAmount),\n            chartX - 3,\n            chartY + 5,\n            { align: 'right' }\n          );\n          doc.text(\n            formatLargeNumber(maxAmount * 0.75),\n            chartX - 3,\n            chartY + (chartHeight * 0.25),\n            { align: 'right' }\n          );\n          doc.text(\n            formatLargeNumber(maxAmount * 0.5),\n            chartX - 3,\n            chartY + (chartHeight * 0.5),\n            { align: 'right' }\n          );\n          doc.text(\n            formatLargeNumber(maxAmount * 0.25),\n            chartX - 3,\n            chartY + (chartHeight * 0.75),\n            { align: 'right' }\n          );\n          doc.text('0', chartX - 3, chartY + chartHeight, { align: 'right' });\n\n          // Transactions labels (right)\n          doc.text(\n            formatLargeNumber(maxTransactions),\n            chartX + chartWidth + 3,\n            chartY + 5,\n            { align: 'left' }\n          );\n          doc.text(\n            formatLargeNumber(maxTransactions * 0.75),\n            chartX + chartWidth + 3,\n            chartY + (chartHeight * 0.25),\n            { align: 'left' }\n          );\n          doc.text(\n            formatLargeNumber(maxTransactions * 0.5),\n            chartX + chartWidth + 3,\n            chartY + (chartHeight * 0.5),\n            { align: 'left' }\n          );\n          doc.text(\n            formatLargeNumber(maxTransactions * 0.25),\n            chartX + chartWidth + 3,\n            chartY + (chartHeight * 0.75),\n            { align: 'left' }\n          );\n          doc.text('0', chartX + chartWidth + 3, chartY + chartHeight, { align: 'left' });\n\n          // Add axis titles\n          doc.setFontSize(8);\n          doc.setTextColor(184, 134, 11); // DarkGoldenRod\n          doc.text(\n            \"Sales Amount (LKR)\",\n            chartX - 15,\n            chartY - 10,\n            { angle: 90 }\n          );\n\n          doc.setTextColor(218, 165, 32); // GoldenRod\n          doc.text(\n            \"Transactions\",\n            chartX + chartWidth + 15,\n            chartY - 10,\n            { angle: 270 }\n          );\n\n          // Add a note about the chart\n          doc.setFontSize(8);\n          doc.setTextColor(100, 100, 100);\n          doc.text(\n            \"Chart shows sales amount and transaction count trends over the selected period\",\n            105,\n            legendY + 20,\n            { align: 'center' }\n          );\n        } else {\n          // If no chart data is available, add a message\n          doc.setFontSize(12);\n          doc.setTextColor(100, 100, 100);\n          doc.text(\n            \"Chart visualization not available - no data\",\n            105,\n            60,\n            { align: 'center' }\n          );\n          console.log('No chart data available in window.chartData');\n        }\n      } catch (chartErr) {\n        console.error('Error adding chart to PDF:', chartErr);\n        // If there's an error, add a message\n        doc.setFontSize(12);\n        doc.setTextColor(100, 100, 100);\n        doc.text(\n          \"Chart visualization not available - error occurred\",\n          105,\n          60,\n          { align: 'center' }\n        );\n      }\n    } else {\n      console.log('Chart not added to PDF - not a sales report');\n    }\n\n    // Save the PDF\n    doc.save(`${filename}.pdf`);\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error exporting report as PDF:', error);\n    throw error;\n  }\n};\n\n/**\n * Get custom report data\n * @param {Object} config - Custom report configuration\n * @returns {Promise} - Promise with report data\n */\nexport const getCustomReport = async (config) => {\n  try {\n    // This would be implemented to handle custom report requests\n    // For now, we'll just return a mock response\n    return {\n      success: true,\n      message: 'Custom report functionality will be implemented here',\n      config\n    };\n  } catch (error) {\n    console.error('Error generating custom report:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 980, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 986, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/reports/inventory/gold-stock/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BarChart, Download, Printer, ArrowLeft, RefreshCw, FileText } from 'lucide-react';\nimport Link from 'next/link';\nimport { getGoldStockReport, exportReportCSV, exportReportPDF } from '@/services/reportService';\nimport { BarChart as RechartsBarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\n\ninterface GoldStockItem {\n  purity: string;\n  weight: number;\n  price_per_gram: number;\n  value: number;\n  description?: string;\n  status?: string;\n}\n\ninterface Transaction {\n  stock_id: number;\n  purity: string;\n  quantity_in_grams: number;\n  price_per_gram: number;\n  last_updated: string;\n  description?: string;\n}\n\ninterface GoldStockData {\n  goldStock: GoldStockItem[];\n  summary: {\n    totalWeight: number;\n    totalValue: number;\n    averagePrice: number;\n  };\n  recentTransactions: Transaction[];\n}\n\nexport default function GoldStockReportPage() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [goldStockData, setGoldStockData] = useState<GoldStockData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isExporting, setIsExporting] = useState(false);\n  const chartRef = useRef<HTMLDivElement>(null);\n\n  // Format currency\n  const formatCurrency = (amount: number) => {\n    return `LKR ${amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  // Format weight\n  const formatWeight = (weight: number) => {\n    return `${weight.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} g`;\n  };\n\n  // Fetch gold stock data\n  const fetchGoldStockData = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const data = await getGoldStockReport();\n      setGoldStockData(data);\n    } catch (err) {\n      console.error('Error fetching gold stock data:', err);\n      setError('Failed to load gold stock data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch data on initial load\n  useEffect(() => {\n    fetchGoldStockData();\n  }, []);\n\n  const handleRefresh = () => {\n    fetchGoldStockData();\n  };\n\n  // Handle export to CSV\n  const handleExportCSV = async () => {\n    try {\n      setIsExporting(true);\n      await exportReportCSV('gold-stock');\n    } catch (err) {\n      console.error('Error exporting CSV:', err);\n      setError('Failed to export CSV. Please try again.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Handle export to PDF\n  const handleExportPDF = async () => {\n    try {\n      setIsExporting(true);\n      await exportReportPDF('gold-stock', {}, chartRef);\n    } catch (err) {\n      console.error('Error exporting PDF:', err);\n      setError('Failed to export PDF. Please try again.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Handle print\n  const handlePrint = () => {\n    window.print();\n  };\n\n  // Prepare chart data\n  const prepareChartData = () => {\n    if (!goldStockData?.goldStock) return [];\n\n    return goldStockData.goldStock.map(item => ({\n      purity: `${item.purity}K`,\n      weight: item.weight,\n      value: item.value\n    }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with back button */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div className=\"flex items-center\">\n          <Link href=\"/DashView/reports/inventory\" className=\"mr-4\">\n            <ArrowLeft className=\"h-5 w-5 text-gray-500 hover:text-gray-700\" />\n          </Link>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Gold Stock Report</h1>\n        </div>\n\n        <div className=\"mt-3 sm:mt-0 flex items-center space-x-3\">\n          <button\n            className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n            onClick={handleRefresh}\n          >\n            {isLoading ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n            )}\n            Refresh\n          </button>\n          <button\n            className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n            onClick={handlePrint}\n          >\n            <Printer className=\"h-4 w-4 mr-2\" />\n            Print\n          </button>\n          <div className=\"relative inline-block text-left\">\n            <div>\n              <button\n                type=\"button\"\n                className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n                id=\"export-menu-button\"\n                aria-expanded=\"true\"\n                aria-haspopup=\"true\"\n                onClick={() => document.getElementById('export-dropdown')?.classList.toggle('hidden')}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                {isExporting ? 'Exporting...' : 'Export'}\n              </button>\n            </div>\n            <div\n              id=\"export-dropdown\"\n              className=\"hidden origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10\"\n              role=\"menu\"\n              aria-orientation=\"vertical\"\n              aria-labelledby=\"export-menu-button\"\n              tabIndex={-1}\n            >\n              <div className=\"py-1\" role=\"none\">\n                <button\n                  className=\"text-gray-700 block w-full text-left px-4 py-2 text-sm hover:bg-gray-100\"\n                  role=\"menuitem\"\n                  tabIndex={-1}\n                  id=\"export-menu-item-0\"\n                  onClick={handleExportCSV}\n                  disabled={isExporting}\n                >\n                  <div className=\"flex items-center\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Export as CSV\n                  </div>\n                </button>\n                <button\n                  className=\"text-gray-700 block w-full text-left px-4 py-2 text-sm hover:bg-gray-100\"\n                  role=\"menuitem\"\n                  tabIndex={-1}\n                  id=\"export-menu-item-1\"\n                  onClick={handleExportPDF}\n                  disabled={isExporting}\n                >\n                  <div className=\"flex items-center\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Export as PDF\n                  </div>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-yellow-500\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"bg-red-50 border-l-4 border-red-400 p-4\">\n          <div className=\"flex\">\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      ) : goldStockData ? (\n        <>\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0 bg-yellow-100 rounded-md p-3\">\n                  <BarChart className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Total Gold Weight</h3>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{formatWeight(goldStockData.summary.totalWeight)}</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0 bg-yellow-100 rounded-md p-3\">\n                  <BarChart className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Total Value</h3>\n                  <p className=\"text-2xl font-semibold text-gray-900\">{formatCurrency(goldStockData.summary.totalValue)}</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0 bg-yellow-100 rounded-md p-3\">\n                  <BarChart className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div className=\"ml-5\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Average Price</h3>\n                  <p className=\"text-2xl font-semibold text-gray-900\">\n                    {formatCurrency(goldStockData.summary.averagePrice)} / g\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Gold Stock Chart */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Gold Stock by Purity</h3>\n            <div className=\"h-80\" ref={chartRef}>\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <RechartsBarChart\n                  data={prepareChartData()}\n                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"purity\" />\n                  <YAxis\n                    yAxisId=\"left\"\n                    orientation=\"left\"\n                    stroke=\"#B8860B\"\n                    label={{\n                      value: 'Weight (g)',\n                      angle: -90,\n                      position: 'insideLeft',\n                      style: { fill: '#B8860B' }\n                    }}\n                  />\n                  <YAxis\n                    yAxisId=\"right\"\n                    orientation=\"right\"\n                    stroke=\"#DAA520\"\n                    label={{\n                      value: 'Value (LKR)',\n                      angle: 90,\n                      position: 'insideRight',\n                      style: { fill: '#DAA520' }\n                    }}\n                  />\n                  <Tooltip\n                    formatter={(value, name) => {\n                      if (name === 'weight') return [`${value.toFixed(2)} g`, 'Weight'];\n                      if (name === 'value') return [`LKR ${value.toLocaleString()}`, 'Value'];\n                      return [value, name];\n                    }}\n                    contentStyle={{\n                      backgroundColor: '#FFF8DC', // Cornsilk\n                      borderColor: '#B8860B', // DarkGoldenRod\n                      border: '1px solid #B8860B'\n                    }}\n                    labelStyle={{ color: '#B8860B' }}\n                  />\n                  <Legend />\n                  <Bar\n                    yAxisId=\"left\"\n                    dataKey=\"weight\"\n                    name=\"Weight (g)\"\n                    fill=\"#B8860B\"\n                    radius={[4, 4, 0, 0]}\n                  />\n                  <Bar\n                    yAxisId=\"right\"\n                    dataKey=\"value\"\n                    name=\"Value (LKR)\"\n                    fill=\"#DAA520\"\n                    radius={[4, 4, 0, 0]}\n                  />\n                </RechartsBarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Gold Stock Table */}\n          <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n            <div className=\"px-4 py-5 sm:px-6\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Gold Stock Details</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Gold Purity\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Weight\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Price per Gram\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Total Value\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Description\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {goldStockData.goldStock.map((item, index) => (\n                    <tr key={index} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {item.purity}K\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatWeight(item.weight)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatCurrency(item.price_per_gram)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatCurrency(item.value)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {item.description || '-'}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Recent Transactions */}\n          <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n            <div className=\"px-4 py-5 sm:px-6\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Recent Gold Transactions</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Purity\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Quantity\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Price per Gram\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Description\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {goldStockData.recentTransactions.map((transaction) => (\n                    <tr key={transaction.stock_id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {new Date(transaction.last_updated).toLocaleDateString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {transaction.purity}K\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatWeight(transaction.quantity_in_grams)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatCurrency(transaction.price_per_gram)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {transaction.description || '-'}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </>\n      ) : (\n        <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4\">\n          <div className=\"flex\">\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-yellow-700\">No gold stock data available. Please try refreshing.</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2051, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}