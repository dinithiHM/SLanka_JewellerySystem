{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/utils/formatters.ts"],"sourcesContent":["/**\n * Format a number as currency\n * @param value The number to format\n * @param locale The locale to use for formatting (default: 'en-US')\n * @param currency The currency code (default: 'LKR')\n * @returns Formatted currency string\n */\nexport const formatCurrency = (\n  value: number | string,\n  locale: string = 'en-US',\n  currency: string = 'LKR'\n): string => {\n  // Convert to number if it's a string\n  const numericValue = typeof value === 'string' ? parseFloat(value) : value;\n\n  // Handle NaN values\n  if (isNaN(numericValue)) {\n    console.warn('Invalid value for currency formatting:', value);\n    return 'Rs. 0.00';\n  }\n\n  // Use the Sri Lankan Rupee symbol (Rs) instead of LKR text\n  return 'Rs. ' + new Intl.NumberFormat(locale, {\n    style: 'decimal',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(numericValue);\n};\n\n/**\n * Format a date string\n * @param dateString The date string to format\n * @param locale The locale to use for formatting (default: 'en-US')\n * @returns Formatted date string\n */\nexport const formatDate = (\n  dateString: string,\n  locale: string = 'en-US'\n): string => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat(locale, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  }).format(date);\n};\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;;AACM,MAAM,iBAAiB,CAC5B,OACA,SAAiB,OAAO,EACxB,WAAmB,KAAK;IAExB,qCAAqC;IACrC,MAAM,eAAe,OAAO,UAAU,WAAW,WAAW,SAAS;IAErE,oBAAoB;IACpB,IAAI,MAAM,eAAe;QACvB,QAAQ,IAAI,CAAC,0CAA0C;QACvD,OAAO;IACT;IAEA,2DAA2D;IAC3D,OAAO,SAAS,IAAI,KAAK,YAAY,CAAC,QAAQ;QAC5C,OAAO;QACP,uBAAuB;QACvB,uBAAuB;IACzB,GAAG,MAAM,CAAC;AACZ;AAQO,MAAM,aAAa,CACxB,YACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,OAAO,IAAI,KAAK,cAAc,CAAC,QAAQ;QACrC,MAAM;QACN,OAAO;QACP,KAAK;QACL,MAAM;QACN,QAAQ;QACR,QAAQ;IACV,GAAG,MAAM,CAAC;AACZ","debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/sales/add/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { ChevronDown, Plus, X, Search } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { formatCurrency } from '@/utils/formatters';\n\ninterface JewelleryItem {\n  item_id: number | string;\n  product_title: string;\n  category: string;\n  in_stock: number;\n  selling_price: number;\n  gold_carat?: number;\n  weight?: number;\n  is_solid_gold?: boolean;\n  assay_certificate?: string;\n  assay_status?: string;\n  making_charges?: number;\n  additional_materials_charges?: number;\n}\n\ninterface SaleItem {\n  item_id: number | string;\n  product_title: string;\n  quantity: number;\n  unit_price: number;\n  original_price?: number;\n  discount_amount?: number;\n  discount_type?: 'percentage' | 'fixed';\n  subtotal: number;\n  // Gold-related properties\n  gold_carat?: number;\n  gold_weight?: number;\n  gold_price_per_gram?: number;\n  is_gold_price_based?: boolean;\n  // Charges\n  making_charges?: number;\n  additional_materials_charges?: number;\n}\n\nconst AddSalePage = () => {\n  const router = useRouter();\n\n  // Available items from inventory\n  const [availableItems, setAvailableItems] = useState<JewelleryItem[]>([]);\n  const [filteredItems, setFilteredItems] = useState<JewelleryItem[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Current sale\n  const [selectedItem, setSelectedItem] = useState<JewelleryItem | null>(null);\n  const [customerName, setCustomerName] = useState('');\n  const [quantity, setQuantity] = useState(1);\n  const [customPrice, setCustomPrice] = useState<number | null>(null);\n  const [discountAmount, setDiscountAmount] = useState<number>(0);\n  const [discountType, setDiscountType] = useState<'percentage' | 'fixed'>('fixed');\n  const [paymentMethod, setPaymentMethod] = useState('Cash');\n  const [saleItems, setSaleItems] = useState<SaleItem[]>([]);\n  const [userId, setUserId] = useState<string | null>(null);\n  const [branchId, setBranchId] = useState<string | null>(null);\n\n  // UI states\n  const [showItemDropdown, setShowItemDropdown] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n\n  // Gold price states\n  const [baseGoldPrice, setBaseGoldPrice] = useState<number>(0);\n  const [isLoadingGoldPrice, setIsLoadingGoldPrice] = useState<boolean>(false);\n  const [goldPriceLastUpdated, setGoldPriceLastUpdated] = useState<string>('');\n  const [useGoldPriceCalculation, setUseGoldPriceCalculation] = useState<boolean>(false);\n  const [calculatedPrice, setCalculatedPrice] = useState<number | null>(null);\n  const [baseGoldPricePerUnit, setBaseGoldPricePerUnit] = useState<number>(0);\n\n  // Karat purity mapping\n  const karatPurityMap: Record<string, { purity: number; label: string }> = {\n    '24KT': { purity: 1.0000, label: '24-Karat Gold (99.99% Pure)' },\n    '22KT': { purity: 0.9167, label: '22-Karat Gold (92% Pure)' },\n    '21KT': { purity: 0.8750, label: '21-Karat Gold (88% Pure)' },\n    '18KT': { purity: 0.7500, label: '18-Karat Gold (75% Pure)' },\n    '16KT': { purity: 0.6667, label: '16-Karat Gold (67% Pure)' },\n  };\n\n  // Get user info from localStorage and fetch initial gold price\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('userId');\n    const storedBranchId = localStorage.getItem('branchId');\n\n    if (storedUserId) {\n      setUserId(storedUserId);\n      console.log('User ID set from localStorage:', storedUserId);\n    }\n\n    if (storedBranchId) {\n      setBranchId(storedBranchId);\n      console.log('Branch ID set from localStorage:', storedBranchId);\n    }\n\n    // Fetch initial gold price\n    fetchGoldPrice();\n  }, []);\n\n  // Function to fetch current gold price (24K)\n  const fetchGoldPrice = async () => {\n    try {\n      setIsLoadingGoldPrice(true);\n      const response = await fetch('http://localhost:3002/gold-prices/current-price');\n      const data = await response.json();\n\n      if (data.success) {\n        // Store the 24K base price\n        setBaseGoldPrice(data.price);\n\n        // Format the timestamp\n        const date = new Date(data.timestamp);\n        setGoldPriceLastUpdated(date.toLocaleString());\n\n        return data.price;\n      } else {\n        console.error('Failed to fetch gold price:', data.message);\n        return 0;\n      }\n    } catch (error) {\n      console.error('Error fetching gold price:', error);\n      return 0;\n    } finally {\n      setIsLoadingGoldPrice(false);\n    }\n  };\n\n  // Function to fetch gold price for a specific karat\n  const fetchKaratPrice = async (karat: number) => {\n    try {\n      setIsLoadingGoldPrice(true);\n      const response = await fetch(`http://localhost:3002/gold-prices/karat-price/${karat}KT`);\n      const data = await response.json();\n\n      if (data.success) {\n        // Format the timestamp\n        const date = new Date(data.timestamp);\n        setGoldPriceLastUpdated(date.toLocaleString());\n\n        return data.price;\n      } else {\n        console.error(`Failed to fetch ${karat}KT gold price:`, data.message);\n        return 0;\n      }\n    } catch (error) {\n      console.error(`Error fetching ${karat}KT gold price:`, error);\n      return 0;\n    } finally {\n      setIsLoadingGoldPrice(false);\n    }\n  };\n\n  // Function to fetch gold stock data\n  const fetchGoldStock = async () => {\n    try {\n      const response = await fetch('http://localhost:3002/gold-stock');\n      const data = await response.json();\n\n      if (data.success) {\n        return data.data;\n      } else {\n        console.error('Failed to fetch gold stock:', data.message);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching gold stock:', error);\n      return [];\n    }\n  };\n\n  // Helper function to get purity for a karat\n  const getPurity = (karat: string): number => {\n    return karatPurityMap[karat]?.purity || 0;\n  };\n\n  // Fetch available items\n  useEffect(() => {\n    const fetchAvailableItems = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // First test if the sale items router is working\n        console.log('Testing sale items router...');\n        const testResponse = await fetch(`http://localhost:3002/sale-items/test?t=${new Date().getTime()}`);\n\n        if (!testResponse.ok) {\n          console.error('Test route failed:', testResponse.status);\n          throw new Error(`Sale items API test failed: ${testResponse.status}`);\n        }\n\n        const testData = await testResponse.json();\n        console.log('Test route response:', testData);\n\n        // If test route works, try the actual endpoint with branch filtering\n        console.log('Fetching available items for branch:', branchId);\n\n        // Construct URL with branch_id parameter if available\n        let url = `http://localhost:3002/sale-items/available?t=${new Date().getTime()}`;\n        if (branchId) {\n          url += `&branch_id=${branchId}`;\n        }\n\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}));\n          const errorMessage = errorData.message || `Failed to fetch available items: ${response.status}`;\n          throw new Error(errorMessage);\n        }\n\n        let data = await response.json();\n        console.log('Initial fetch - available items:', data); // Debug log\n\n        // Add test gold items for demonstration\n        const hasGoldItems = data.some((item: JewelleryItem) => item.is_solid_gold && item.gold_carat && item.weight);\n\n        if (!hasGoldItems) {\n          console.log('Adding test gold items for demonstration');\n\n          // Add test gold items\n          const testGoldItems = [\n            {\n              item_id: 'gold-1',\n              product_title: 'Gold Necklace 22KT',\n              category: 'Necklace',\n              in_stock: 5,\n              selling_price: 150000,\n              is_solid_gold: true,\n              gold_carat: 22,\n              weight: 15.5,\n              assay_certificate: 'CERT-001'\n            },\n            {\n              item_id: 'gold-2',\n              product_title: 'Gold Ring 18KT',\n              category: 'Rings',\n              in_stock: 10,\n              selling_price: 55000,\n              is_solid_gold: true,\n              gold_carat: 18,\n              weight: 5.2\n            },\n            {\n              item_id: 'gold-3',\n              product_title: 'Pure Gold Bangle 24KT',\n              category: 'Bangles',\n              in_stock: 3,\n              selling_price: 200000,\n              is_solid_gold: true,\n              gold_carat: 24,\n              weight: 12.8,\n              assay_certificate: 'CERT-002'\n            }\n          ];\n\n          data = [...data, ...testGoldItems];\n        }\n\n        setAvailableItems(data);\n        setFilteredItems(data);\n\n        // Fetch gold price to have it ready\n        fetchGoldPrice();\n      } catch (err) {\n        console.error('Error fetching available items:', err);\n        setError('Failed to fetch items. Please try again.');\n\n        // Initialize with empty arrays instead of sample data\n        setAvailableItems([]);\n        setFilteredItems([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAvailableItems();\n  }, [branchId]);\n\n  // Filter items based on search term\n  useEffect(() => {\n    if (searchTerm.trim() === '') {\n      setFilteredItems(availableItems);\n    } else {\n      const term = searchTerm.toLowerCase();\n      const filtered = availableItems.filter(item =>\n        item.product_title.toLowerCase().includes(term) ||\n        item.category.toLowerCase().includes(term)\n      );\n      setFilteredItems(filtered);\n    }\n  }, [searchTerm, availableItems]);\n\n  // Calculate price after discount\n  const calculatePriceAfterDiscount = (originalPrice: number, discountAmount: number, discountType: 'percentage' | 'fixed'): number => {\n    console.log('calculatePriceAfterDiscount - Inputs:', { originalPrice, discountAmount, discountType });\n\n    if (discountAmount <= 0) {\n      console.log('calculatePriceAfterDiscount - No discount applied, returning original price:', originalPrice);\n      return originalPrice;\n    }\n\n    let finalPrice: number;\n\n    if (discountType === 'percentage') {\n      // Limit percentage discount to 75%\n      const limitedPercentage = Math.min(discountAmount, 75);\n      finalPrice = originalPrice * (1 - limitedPercentage / 100);\n      console.log('calculatePriceAfterDiscount - Percentage discount:', {\n        originalPrice,\n        discountPercentage: limitedPercentage,\n        finalPrice\n      });\n    } else {\n      // For fixed discount, ensure it doesn't exceed 75% of the original price\n      const maxDiscount = originalPrice * 0.75;\n      const limitedDiscount = Math.min(discountAmount, maxDiscount);\n      finalPrice = originalPrice - limitedDiscount;\n      console.log('calculatePriceAfterDiscount - Fixed discount:', {\n        originalPrice,\n        requestedDiscount: discountAmount,\n        limitedDiscount,\n        maxDiscount,\n        finalPrice\n      });\n    }\n\n    return finalPrice;\n  };\n\n  // Calculate final price for the current item\n  const getFinalUnitPrice = () => {\n    if (!selectedItem) return 0;\n\n    // Start with either custom price, calculated gold price, or original selling price\n    let basePrice = selectedItem.selling_price;\n\n    // Log the initial state for debugging\n    console.log('getFinalUnitPrice - Initial state:', {\n      selectedItem: {\n        selling_price: selectedItem.selling_price,\n        making_charges: selectedItem.making_charges,\n        additional_materials_charges: selectedItem.additional_materials_charges\n      },\n      customPrice,\n      calculatedPrice,\n      useGoldPriceCalculation,\n      discountAmount,\n      discountType\n    });\n\n    if (customPrice !== null) {\n      // If custom price is set, use it directly (it already includes charges if \"Use Total Price with Charges\" was clicked)\n      basePrice = customPrice;\n\n      console.log('getFinalUnitPrice - Using custom price:', basePrice);\n\n      // Apply discount directly to the custom price\n      const finalPrice = calculatePriceAfterDiscount(basePrice, discountAmount, discountType);\n      console.log('getFinalUnitPrice - Final price with custom price:', finalPrice);\n      return finalPrice;\n    } else if (useGoldPriceCalculation && calculatedPrice && calculatedPrice > 0) {\n      // Using gold price calculation\n      basePrice = calculatedPrice;\n      console.log('getFinalUnitPrice - Using calculated gold price:', basePrice);\n    } else {\n      // Using catalog price (selling_price)\n      console.log('getFinalUnitPrice - Using catalog price:', basePrice);\n\n      // When explicitly using catalog price, apply discount directly to the catalog price\n      // without adding any charges\n      const finalPrice = calculatePriceAfterDiscount(basePrice, discountAmount, discountType);\n      console.log('getFinalUnitPrice - Final price with catalog price:', finalPrice);\n      return finalPrice;\n    }\n\n    // For gold items, prioritize using the baseGoldPricePerUnit for discount calculation\n    let priceForDiscount;\n\n    if (selectedItem.gold_carat && selectedItem.weight) {\n      // For gold items, always try to use the gold price calculation\n      if (baseGoldPricePerUnit > 0) {\n        // Use the calculated base gold price if available\n        priceForDiscount = baseGoldPricePerUnit;\n      } else if (calculatedPrice && calculatedPrice > 0) {\n        // Fall back to calculated price if baseGoldPricePerUnit isn't set yet\n        priceForDiscount = calculatedPrice;\n      } else if (baseGoldPrice && selectedItem.weight) {\n        // Calculate directly if we have the base gold price and weight\n        priceForDiscount = baseGoldPrice * selectedItem.weight;\n      } else {\n        // Last resort, use the base price\n        priceForDiscount = basePrice;\n      }\n    } else {\n      // For non-gold items, use the base price\n      priceForDiscount = basePrice;\n    }\n\n    // Add making charges and additional materials charges if they exist\n    const makingCharges = selectedItem.making_charges || 0;\n    if (makingCharges > 0) {\n      priceForDiscount += makingCharges;\n      console.log('getFinalUnitPrice - Added making charges:', makingCharges, 'New total:', priceForDiscount);\n    }\n\n    const additionalMaterialsCharges = selectedItem.additional_materials_charges || 0;\n    if (additionalMaterialsCharges > 0) {\n      priceForDiscount += additionalMaterialsCharges;\n      console.log('getFinalUnitPrice - Added additional materials charges:', additionalMaterialsCharges, 'New total:', priceForDiscount);\n    }\n\n    // Apply discount\n    const finalPrice = calculatePriceAfterDiscount(priceForDiscount, discountAmount, discountType);\n    console.log('getFinalUnitPrice - Final price after discount:', finalPrice, 'Original price:', priceForDiscount);\n    return finalPrice;\n  };\n\n  // Calculate total\n  const totalAmount = saleItems.reduce((sum, item) => sum + item.subtotal, 0);\n\n  // Handle item selection\n  const handleSelectItem = async (item: JewelleryItem) => {\n    console.log('handleSelectItem called with item:', item);\n    if (item.in_stock <= 0) {\n      setError(`${item.product_title} is out of stock`);\n      return;\n    }\n\n    setSelectedItem(item);\n    setQuantity(1);\n    setCustomPrice(null); // Reset custom price\n    setDiscountAmount(0); // Reset discount\n    setDiscountType('fixed'); // Reset discount type\n    setShowItemDropdown(false);\n\n    // Reset gold price related values\n    setBaseGoldPricePerUnit(0);\n    setError(null);\n\n    // Check if it's a gold item with carat and weight\n    // Note: We check for weight and gold_carat directly since is_solid_gold might not be properly set\n    if ((item.is_solid_gold ||\n         (item.gold_carat !== undefined && item.gold_carat > 0) ||\n         (item.weight !== undefined && item.weight > 0)) &&\n        item.gold_carat &&\n        item.weight) {\n      console.log('Gold item detected:', item);\n      setUseGoldPriceCalculation(true);\n\n      try {\n        // Fetch gold stock data to get the price for the specific karat\n        const goldStockData = await fetchGoldStock();\n\n        // Find the matching karat in gold stock\n        const karat = `${item.gold_carat}KT`;\n        const goldStockItem = goldStockData.find((stock: any) => stock.purity === karat);\n\n        let goldPrice;\n\n        if (goldStockItem && goldStockItem.price_per_gram > 0) {\n          // Use the price from gold stock if available\n          goldPrice = goldStockItem.price_per_gram;\n          console.log(`Using gold price from stock for ${karat}: ${goldPrice}`);\n\n          // Update the base gold price for display\n          setBaseGoldPrice(goldPrice);\n        } else {\n          // Try to fetch the specific karat price directly\n          const karatNumber = parseInt(karat.replace('KT', ''));\n          const directKaratPrice = await fetchKaratPrice(karatNumber);\n\n          if (directKaratPrice > 0) {\n            // Use the directly fetched karat price\n            goldPrice = directKaratPrice;\n            console.log(`Using directly fetched price for ${karat}: ${goldPrice}`);\n\n            // Also update the base gold price for display\n            setBaseGoldPrice(directKaratPrice);\n          } else {\n            // Fallback to fetching 24K price and calculating based on purity\n            const baseGoldPrice = await fetchGoldPrice();\n            const purity = getPurity(karat);\n            goldPrice = baseGoldPrice * purity;\n            console.log(`Calculated gold price for ${karat}: ${goldPrice} (base: ${baseGoldPrice}, purity: ${purity})`);\n\n            // Update the base gold price for display\n            setBaseGoldPrice(goldPrice);\n          }\n        }\n\n        // Calculate price based on gold price and weight\n        const calculatedGoldPrice = goldPrice * item.weight;\n\n        if (calculatedGoldPrice > 0) {\n          // Update all the state variables in one go to ensure consistency\n          setCalculatedPrice(calculatedGoldPrice);\n          setBaseGoldPricePerUnit(calculatedGoldPrice);\n          setUseGoldPriceCalculation(true);\n\n          // Force a re-render by updating a non-critical state\n          setGoldPriceLastUpdated(new Date().toLocaleString());\n\n          console.log('Setting baseGoldPricePerUnit to:', calculatedGoldPrice, 'and useGoldPriceCalculation to true');\n          // We don't automatically set custom price to allow user to see both prices\n        } else {\n          // If we couldn't calculate the gold price, calculate it directly\n          if (baseGoldPrice > 0 && item.weight) {\n            const directCalculation = baseGoldPrice * item.weight;\n            setCalculatedPrice(directCalculation);\n            setBaseGoldPricePerUnit(directCalculation);\n            setUseGoldPriceCalculation(true);\n            setGoldPriceLastUpdated(new Date().toLocaleString());\n            console.log('Direct calculation of baseGoldPricePerUnit:', directCalculation);\n          }\n        }\n      } catch (error) {\n        console.error('Error calculating gold price:', error);\n\n        // Fallback to original calculation method\n        // Try to fetch the specific karat price first\n        const karatNumber = item.gold_carat || 0;\n        let goldPrice;\n\n        if (karatNumber > 0) {\n          goldPrice = await fetchKaratPrice(karatNumber);\n          if (goldPrice <= 0) {\n            // If that fails, fall back to 24K price and calculate\n            const basePrice = await fetchGoldPrice();\n            const karat = `${item.gold_carat}KT`;\n            const purity = getPurity(karat);\n            goldPrice = basePrice * purity;\n          }\n\n          // Update the base gold price for display\n          setBaseGoldPrice(goldPrice);\n        } else {\n          goldPrice = await fetchGoldPrice();\n          // Update the base gold price for display\n          setBaseGoldPrice(goldPrice);\n        }\n\n        const calculatedGoldPrice = goldPrice * item.weight;\n\n        if (calculatedGoldPrice > 0) {\n          // Update all the state variables in one go to ensure consistency\n          setCalculatedPrice(calculatedGoldPrice);\n          setBaseGoldPricePerUnit(calculatedGoldPrice);\n          setUseGoldPriceCalculation(true);\n\n          // Force a re-render by updating a non-critical state\n          setGoldPriceLastUpdated(new Date().toLocaleString());\n\n          console.log('Setting baseGoldPricePerUnit (fallback) to:', calculatedGoldPrice, 'and useGoldPriceCalculation to true');\n        } else {\n          // If we still couldn't calculate, try direct calculation\n          if (baseGoldPrice > 0 && item.weight) {\n            const directCalculation = baseGoldPrice * item.weight;\n            setCalculatedPrice(directCalculation);\n            setBaseGoldPricePerUnit(directCalculation);\n            setUseGoldPriceCalculation(true);\n            setGoldPriceLastUpdated(new Date().toLocaleString());\n            console.log('Direct calculation of baseGoldPricePerUnit (fallback):', directCalculation);\n          }\n        }\n      }\n    } else {\n      setUseGoldPriceCalculation(false);\n      setCalculatedPrice(null);\n      setBaseGoldPricePerUnit(0);\n    }\n  };\n\n  // Handle adding item to sale\n  const handleAddItem = () => {\n    return new Promise<boolean>((resolve) => {\n      if (!selectedItem) {\n        setError('Please select an item');\n        resolve(false);\n        return;\n      }\n\n      if (quantity <= 0) {\n        setError('Quantity must be greater than 0');\n        resolve(false);\n        return;\n      }\n\n      if (quantity > selectedItem.in_stock) {\n        setError(`Only ${selectedItem.in_stock} items available in stock`);\n        resolve(false);\n        return;\n      }\n\n      // Get the original price (either custom, calculated gold price, or from the item)\n      let originalPrice = selectedItem.selling_price;\n\n      if (customPrice !== null) {\n        originalPrice = customPrice;\n      } else if (useGoldPriceCalculation && calculatedPrice && calculatedPrice > 0) {\n        originalPrice = calculatedPrice;\n      }\n\n      // Calculate the final unit price after discount\n      const finalPrice = getFinalUnitPrice();\n\n      // Calculate subtotal based on the final price\n      // Ensure it's a proper number by using parseFloat and rounding to 2 decimal places\n      const subtotal = Math.round((quantity * finalPrice) * 100) / 100;\n\n      // For gold items, determine the original price based on gold calculation\n      let itemOriginalPrice;\n      let isGoldPriceBased = false;\n\n      if (selectedItem.gold_carat && selectedItem.weight) {\n        // For gold items, prioritize using the gold price calculation\n        if (baseGoldPricePerUnit > 0) {\n          // Use the calculated base gold price if available\n          itemOriginalPrice = baseGoldPricePerUnit;\n          isGoldPriceBased = true;\n        } else if (calculatedPrice && calculatedPrice > 0) {\n          // Fall back to calculated price if baseGoldPricePerUnit isn't set yet\n          itemOriginalPrice = calculatedPrice;\n          isGoldPriceBased = true;\n        } else if (baseGoldPrice && selectedItem.weight) {\n          // Calculate directly if we have the base gold price and weight\n          itemOriginalPrice = baseGoldPrice * selectedItem.weight;\n          isGoldPriceBased = true;\n        } else {\n          // Last resort, use the original price\n          itemOriginalPrice = originalPrice;\n        }\n      } else {\n        // For non-gold items, use the original price\n        itemOriginalPrice = originalPrice;\n      }\n\n      // Create the new item with gold information if applicable\n      const newItem: SaleItem = {\n        item_id: selectedItem.item_id,\n        product_title: selectedItem.product_title,\n        quantity,\n        original_price: itemOriginalPrice,\n        unit_price: finalPrice,\n        discount_amount: discountAmount > 0 ? discountAmount : undefined,\n        discount_type: discountAmount > 0 ? discountType : undefined,\n        subtotal,\n        // Add gold-related information if this is a gold item\n        gold_carat: (selectedItem.is_solid_gold || (selectedItem.gold_carat !== undefined && selectedItem.gold_carat > 0)) ? selectedItem.gold_carat : undefined,\n        gold_weight: (selectedItem.is_solid_gold || (selectedItem.weight !== undefined && selectedItem.weight > 0)) ? selectedItem.weight : undefined,\n        gold_price_per_gram: (useGoldPriceCalculation && baseGoldPrice > 0) ? baseGoldPrice : undefined,\n        is_gold_price_based: isGoldPriceBased,\n        // Add making charges and additional materials charges if they exist\n        making_charges: selectedItem.making_charges,\n        additional_materials_charges: selectedItem.additional_materials_charges\n      };\n\n      // Check if item already exists in sale\n      const existingItemIndex = saleItems.findIndex(item => item.item_id === selectedItem.item_id);\n\n      if (existingItemIndex >= 0) {\n        // Update existing item\n        const updatedItems = [...saleItems];\n        const existingItem = updatedItems[existingItemIndex];\n\n        // Check if new total quantity exceeds stock\n        const newTotalQuantity = existingItem.quantity + quantity;\n\n        if (newTotalQuantity > selectedItem.in_stock) {\n          setError(`Cannot add more than ${selectedItem.in_stock} items (${existingItem.quantity} already in cart)`);\n          resolve(false);\n          return;\n        }\n\n        updatedItems[existingItemIndex] = {\n          ...existingItem,\n          quantity: newTotalQuantity,\n          subtotal: Math.round((newTotalQuantity * existingItem.unit_price) * 100) / 100\n        };\n\n        setSaleItems(updatedItems);\n      } else {\n        // Add new item\n        setSaleItems(prevItems => [...prevItems, newItem]);\n      }\n\n      // Reset selection\n      setSelectedItem(null);\n      setQuantity(1);\n      setError(null);\n      resolve(true);\n    });\n  };\n\n  // Handle removing item from sale\n  const handleRemoveItem = (index: number) => {\n    const updatedItems = [...saleItems];\n    updatedItems.splice(index, 1);\n    setSaleItems(updatedItems);\n  };\n\n  // Handle form submission\n  const handleSubmit = async () => {\n    // Validate form\n    if (!customerName.trim()) {\n      setError('Please enter customer name');\n      return;\n    }\n\n    // Check if there are items in the cart\n    if (saleItems.length === 0) {\n      // If no items in cart, check if an item is selected\n      if (selectedItem) {\n        // Try to add the selected item\n        const added = await handleAddItem();\n        if (!added) {\n          return; // If adding the item failed, stop the submission\n        }\n\n        // Wait a moment for state to update\n        await new Promise(resolve => setTimeout(resolve, 100));\n      } else {\n        // No items in cart and no item selected\n        setError('Please select and add at least one item');\n        return;\n      }\n\n      // Double-check that we now have items in the cart\n      if (saleItems.length === 0) {\n        setError('Please add at least one item using the ADD MORE button');\n        return;\n      }\n    }\n\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      // Helper function to ensure numeric values are properly formatted\n      const formatNumericValue = (value: any): number | null => {\n        if (value === undefined || value === null) return null;\n        // Make sure we're working with a number, not a string\n        const numValue = typeof value === 'string' ? parseFloat(value) : value;\n        // Check if it's a valid number\n        if (isNaN(numValue)) return null;\n        // Round to 2 decimal places\n        return Math.round(numValue * 100) / 100;\n      };\n\n      // Debug the subtotal calculation\n      console.log('Sale items before formatting:', saleItems.map(item => ({\n        item_id: item.item_id,\n        quantity: item.quantity,\n        unit_price: item.unit_price,\n        subtotal: item.subtotal,\n        calculated_subtotal: item.quantity * item.unit_price\n      })));\n\n      const saleData = {\n        customer_name: customerName,\n        total_amount: formatNumericValue(totalAmount), // Add the total amount field\n        payment_method: paymentMethod,\n        items: saleItems.map(item => {\n          // Recalculate subtotal to ensure it's correct\n          const recalculatedSubtotal = item.quantity * item.unit_price;\n\n          return {\n            item_id: item.item_id,\n            quantity: item.quantity,\n            unit_price: formatNumericValue(item.unit_price),\n            original_price: formatNumericValue(item.original_price),\n            discount_amount: item.discount_amount ? formatNumericValue(item.discount_amount) : null,\n            discount_type: item.discount_type,\n            subtotal: formatNumericValue(recalculatedSubtotal),\n            // Include gold-related information if available\n            gold_carat: item.gold_carat,\n            gold_weight: item.gold_weight ? formatNumericValue(item.gold_weight) : null,\n            gold_price_per_gram: item.gold_price_per_gram ? formatNumericValue(item.gold_price_per_gram) : null,\n            is_gold_price_based: item.is_gold_price_based,\n            // Include making charges and additional materials charges\n            making_charges: item.making_charges ? formatNumericValue(item.making_charges) : null,\n            additional_materials_charges: item.additional_materials_charges ? formatNumericValue(item.additional_materials_charges) : null\n          };\n        }),\n        user_id: userId,\n        branch_id: branchId\n      };\n\n      // Log the formatted data for debugging\n      console.log('Formatted sale data:', JSON.stringify(saleData, null, 2));\n\n      console.log('Submitting sale with user_id:', userId, 'and branch_id:', branchId);\n\n      const response = await fetch('http://localhost:3002/sales/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(saleData)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        let errorMessage = errorData.message || `Failed to create sale: ${response.status}`;\n\n        // Check for specific error messages\n        if (errorData.error && errorData.error.includes('foreign key constraint fails')) {\n          errorMessage = 'One or more items do not exist in the inventory. Please refresh the page and try again.';\n        }\n\n        throw new Error(errorMessage);\n      }\n\n      const result = await response.json();\n\n      alert(`Sale created successfully! Invoice #: ${result.invoice_number}`);\n\n      // Redirect to view sales page\n      router.push('/DashView/sales/view');\n    } catch (err) {\n      console.error('Error creating sale:', err);\n      setError(err instanceof Error ? err.message : 'An unknown error occurred');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Handle view sales\n  const handleViewSales = () => {\n    router.push('/DashView/sales/view');\n  };\n\n  // Payment method options\n  const paymentMethods = ['Cash', 'Credit Card', 'Debit Card', 'Bank Transfer', 'Check'];\n\n  if (loading) {\n    return (\n      <div className=\"p-6 max-w-4xl mx-auto flex justify-center items-center h-64\">\n        <div className=\"w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 className=\"text-2xl font-bold mb-6\">Add Sale</h2>\n\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by item name\"\n              className=\"w-full p-3 pl-10 pr-4 border border-gray-300 rounded-md\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              onFocus={() => setShowItemDropdown(true)}\n            />\n            <Search className=\"absolute left-3 top-3.5 text-gray-400\" size={18} />\n            <button\n              className=\"absolute right-3 top-2.5 bg-yellow-400 text-black px-4 py-1 rounded-full\"\n              onClick={() => {\n                setShowItemDropdown(true);\n                setIsFetching(true);\n                setError(null); // Clear any previous errors\n\n                // First test if the sale items router is working\n                fetch(`http://localhost:3002/sale-items/test?t=${new Date().getTime()}`)\n                  .then(response => {\n                    if (!response.ok) {\n                      throw new Error(`Test route failed: ${response.status}`);\n                    }\n                    return response.json();\n                  })\n                  .then(data => {\n                    console.log('Test route response:', data);\n                    // If test route works, try the actual endpoint with branch filtering\n                    let url = `http://localhost:3002/sale-items/available?t=${new Date().getTime()}`;\n                    if (branchId) {\n                      url += `&branch_id=${branchId}`;\n                    }\n                    console.log('Fetching available items for branch:', branchId);\n                    return fetch(url)\n                  })\n                  .then(response => {\n                    if (!response.ok) {\n                      throw new Error(`Failed to fetch: ${response.status}`);\n                    }\n                    return response.json();\n                  })\n                  .then(data => {\n                    console.log('Fetched items:', data); // Debug log\n                    setAvailableItems(data);\n\n                    // Filter based on search term if provided\n                    const filtered = searchTerm.trim() ?\n                      data.filter((item: JewelleryItem) =>\n                        item.product_title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                        item.category.toLowerCase().includes(searchTerm.toLowerCase())\n                      ) : data;\n\n                    setFilteredItems(filtered);\n                    setIsFetching(false);\n                  })\n                  .catch(err => {\n                    console.error('Error fetching items:', err);\n                    setError('Failed to fetch items. Please try again.');\n                    setIsFetching(false);\n                  });\n              }}\n            >\n              {isFetching ? (\n                <span className=\"flex items-center\">\n                  <span className=\"w-3 h-3 mr-1 border-2 border-t-transparent border-white rounded-full animate-spin\"></span>\n                  Loading...\n                </span>\n              ) : 'Find'}\n            </button>\n          </div>\n\n          {/* Item Dropdown */}\n          {showItemDropdown && (\n            <div className=\"absolute z-10 mt-1 w-full max-w-3xl bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto\">\n              {filteredItems.length === 0 ? (\n                <div className=\"p-3 text-gray-500\">\n                  {availableItems.length === 0 ?\n                    'No items available in stock. Please add inventory first.' :\n                    'No items found matching your search. Try a different search term.'}\n                </div>\n              ) : (\n                filteredItems.map(item => (\n                  <div\n                    key={item.item_id}\n                    className={`p-3 hover:bg-gray-100 cursor-pointer flex justify-between items-center ${\n                      (item.is_solid_gold || (item.gold_carat !== undefined && item.gold_carat > 0) || (item.weight !== undefined && item.weight > 0)) ? 'border-l-4 border-yellow-400' : ''\n                    }`}\n                    onClick={() => handleSelectItem(item)}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{item.product_title}</div>\n                      <div className=\"text-sm text-gray-500\">{item.category}</div>\n                      {((item.is_solid_gold || (item.gold_carat !== undefined && item.gold_carat > 0) || (item.weight !== undefined && item.weight > 0)) && item.gold_carat && item.weight) && (\n                        <div className=\"flex items-center mt-1\">\n                          <span className=\"inline-block w-3 h-3 bg-yellow-400 rounded-full mr-1\"></span>\n                          <span className=\"text-xs font-medium text-yellow-700\">\n                            {item.gold_carat}KT Gold • {item.weight}g\n                            {item.assay_certificate && (\n                              <span className=\"ml-1 text-green-600\">• Certified</span>\n                            )}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-right ml-4\">\n                      <div className=\"font-medium\">{formatCurrency(item.selling_price)}</div>\n                      <div className={`text-sm ${item.in_stock > 0 ? 'text-gray-500' : 'text-red-500 font-bold'}`}>\n                        In stock: {item.in_stock}\n                      </div>\n                      {(item.is_solid_gold || (item.gold_carat !== undefined && item.gold_carat > 0) || (item.weight !== undefined && item.weight > 0)) && (\n                        <div className=\"text-xs text-yellow-600 mt-1\">\n                          Gold Item\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Sale Form */}\n        <div className=\"space-y-4\">\n          {/* Selected Item */}\n          <div className=\"flex items-center\">\n            <div className=\"w-32 font-medium\">Item</div>\n            <div className=\"flex-1\">\n              <div className=\"p-3 bg-gray-100 rounded-md\">\n                {selectedItem ? selectedItem.product_title : 'No item selected'}\n              </div>\n            </div>\n          </div>\n\n          {/* Customer Name */}\n          <div className=\"flex items-center\">\n            <div className=\"w-32 font-medium\">Customer Name</div>\n            <div className=\"flex-1\">\n              <input\n                type=\"text\"\n                className=\"w-full p-3 border border-gray-300 rounded-md\"\n                value={customerName}\n                onChange={(e) => setCustomerName(e.target.value)}\n                placeholder=\"Enter customer name\"\n              />\n            </div>\n          </div>\n\n          {/* Gold Item Details (if applicable) */}\n          {selectedItem && (selectedItem.is_solid_gold || (selectedItem.gold_carat !== undefined && selectedItem.gold_carat > 0) || (selectedItem.weight !== undefined && selectedItem.weight > 0)) && selectedItem.gold_carat && selectedItem.weight && (\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-32 font-medium\">Gold Details</div>\n              <div className=\"flex-1\">\n                <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Karat:</span>\n                    <span className=\"text-sm font-bold\">{selectedItem.gold_carat}KT</span>\n                  </div>\n                  <div className=\"flex justify-between mt-1\">\n                    <span className=\"text-sm font-medium\">Weight:</span>\n                    <span className=\"text-sm font-bold\">{selectedItem.weight} grams</span>\n                  </div>\n\n                  {/* Gold Price Information */}\n                  <div className=\"mt-3 pt-2 border-t border-yellow-200\">\n                    <div className=\"text-sm font-medium mb-1\">Gold Price Information:</div>\n\n                    {isLoadingGoldPrice ? (\n                      <div className=\"flex items-center justify-center py-2\">\n                        <span className=\"inline-block w-4 h-4 mr-1 border-2 border-t-transparent border-yellow-400 rounded-full animate-spin\"></span>\n                        <span className=\"text-sm\">Loading gold price...</span>\n                      </div>\n                    ) : (\n                      <>\n                        <div className=\"flex justify-between mt-1\">\n                          <span className=\"text-sm\">{selectedItem.gold_carat}KT Base Price:</span>\n                          <div className=\"flex items-center\">\n                            <span className=\"text-sm mr-2\">{formatCurrency(baseGoldPrice)}/gram</span>\n                            <button\n                              type=\"button\"\n                              className=\"text-xs bg-yellow-400 text-black px-2 py-0.5 rounded\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                // Fetch the specific karat price\n                                const karatNumber = selectedItem?.gold_carat || 0;\n                                if (karatNumber > 0) {\n                                  fetchKaratPrice(karatNumber).then(price => {\n                                    if (price > 0 && selectedItem?.gold_carat && selectedItem?.weight) {\n                                      // Calculate the base gold price directly\n                                      const calculatedGoldPrice = price * selectedItem.weight;\n                                      console.log('Refresh button: Setting baseGoldPricePerUnit to:', calculatedGoldPrice);\n\n                                      // Update all the state variables in one go to ensure consistency\n                                      setBaseGoldPricePerUnit(calculatedGoldPrice);\n                                      setCalculatedPrice(calculatedGoldPrice);\n                                      setUseGoldPriceCalculation(true);\n\n                                      // Force a re-render by updating a non-critical state\n                                      setGoldPriceLastUpdated(new Date().toLocaleString());\n\n                                      // Re-trigger the item selection to recalculate everything\n                                      // handleSelectItem(selectedItem);\n                                    }\n                                  });\n                                }\n                              }}\n                            >\n                              Refresh\n                            </button>\n                          </div>\n                        </div>\n\n                        {goldPriceLastUpdated && (\n                          <div className=\"text-xs text-gray-500 mt-1 text-right\">\n                            Last updated: {goldPriceLastUpdated}\n                          </div>\n                        )}\n                      </>\n                    )}\n                  </div>\n\n                  {/* Calculation */}\n                  {calculatedPrice && calculatedPrice > 0 && (\n                    <div className=\"mt-3 pt-2 border-t border-yellow-200\">\n                      <div className=\"text-sm font-medium mb-1\">Price Calculation:</div>\n                      <div className=\"grid grid-cols-2 gap-1 text-sm\">\n                        <span>Gold Price:</span>\n                        <span className=\"text-right\">\n                          {formatCurrency(baseGoldPrice)}/gram\n                        </span>\n                        <span>Weight:</span>\n                        <span className=\"text-right\">{selectedItem.weight} grams</span>\n                        <span className=\"font-medium\">Total Gold Value:</span>\n                        <span className=\"text-right font-bold\">{formatCurrency(calculatedPrice)}</span>\n\n                        {/* Show making charges if they exist */}\n                        {selectedItem.making_charges && selectedItem.making_charges > 0 && (\n                          <>\n                            <span>Making Charges:</span>\n                            <span className=\"text-right\">{formatCurrency(selectedItem.making_charges)}</span>\n                          </>\n                        )}\n\n                        {/* Show additional materials charges if they exist */}\n                        {selectedItem.additional_materials_charges && selectedItem.additional_materials_charges > 0 && (\n                          <>\n                            <span>Additional Materials:</span>\n                            <span className=\"text-right\">{formatCurrency(selectedItem.additional_materials_charges)}</span>\n                          </>\n                        )}\n\n                        {/* Show total with charges if they exist */}\n                        {(selectedItem.making_charges || selectedItem.additional_materials_charges) && (\n                          <>\n                            <span className=\"font-medium\">Total with Charges:</span>\n                            <span className=\"text-right font-bold\">\n                              {(() => {\n                                // Calculate the total with charges correctly\n                                const makingCharges = selectedItem.making_charges ? parseFloat(String(selectedItem.making_charges)) : 0;\n                                const additionalMaterialsCharges = selectedItem.additional_materials_charges ? parseFloat(String(selectedItem.additional_materials_charges)) : 0;\n                                const totalWithCharges = calculatedPrice + makingCharges + additionalMaterialsCharges;\n\n                                // Force to 2 decimal places for display\n                                const roundedTotal = Math.round(totalWithCharges * 100) / 100;\n\n                                // Log for debugging\n                                console.log('Total with Charges calculation:', {\n                                  calculatedPrice,\n                                  makingCharges,\n                                  additionalMaterialsCharges,\n                                  totalWithCharges,\n                                  roundedTotal\n                                });\n\n                                return formatCurrency(roundedTotal);\n                              })()}\n                            </span>\n                          </>\n                        )}\n                      </div>\n\n                      <div className=\"mt-2 flex justify-end\">\n                        <button\n                          type=\"button\"\n                          className=\"bg-yellow-400 text-black px-2 py-1 rounded text-xs\"\n                          onClick={() => {\n                            // Calculate total price including making charges and additional materials charges\n                            const makingCharges = selectedItem.making_charges ? parseFloat(String(selectedItem.making_charges)) : 0;\n                            const additionalMaterialsCharges = selectedItem.additional_materials_charges ? parseFloat(String(selectedItem.additional_materials_charges)) : 0;\n                            const totalWithCharges = calculatedPrice + makingCharges + additionalMaterialsCharges;\n\n                            // Force to 2 decimal places for consistency\n                            const roundedTotal = Math.round(totalWithCharges * 100) / 100;\n\n                            console.log('Setting custom price to total with charges:', {\n                              calculatedPrice,\n                              makingCharges,\n                              additionalMaterialsCharges,\n                              totalWithCharges,\n                              roundedTotal\n                            });\n\n                            // Set the custom price to the rounded total with charges\n                            setCustomPrice(roundedTotal);\n                          }}\n                        >\n                          Use Total Price with Charges\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Unit Price */}\n          <div className=\"flex items-center\">\n            <div className=\"w-32 font-medium\">Unit price</div>\n            <div className=\"flex-1\">\n              {selectedItem ? (\n                <div className=\"relative\">\n                  <input\n                    type=\"number\"\n                    className={`w-full p-3 border ${\n                      calculatedPrice && calculatedPrice > 0\n                        ? 'border-yellow-400'\n                        : 'border-gray-300'\n                    } rounded-md`}\n                    value={customPrice !== null ? customPrice : selectedItem.selling_price}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value);\n                      if (!isNaN(value) && value > 0) {\n                        setCustomPrice(value);\n                      } else if (e.target.value === '') {\n                        setCustomPrice(null); // Reset to original price\n                      }\n                    }}\n                    placeholder=\"Enter custom price\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n\n                  {/* Price selection buttons */}\n                  <div className=\"absolute right-2 top-2 flex space-x-1\">\n                    {calculatedPrice && calculatedPrice > 0 && (\n                      <button\n                        type=\"button\"\n                        className={`px-2 py-1 rounded text-xs ${\n                          customPrice === calculatedPrice\n                            ? 'bg-yellow-500 text-white'\n                            : 'bg-yellow-400 text-black'\n                        }`}\n                        onClick={() => setCustomPrice(calculatedPrice)}\n                      >\n                        Use Gold Price\n                      </button>\n                    )}\n\n                    {/* Button to explicitly use catalog price */}\n                    <button\n                      type=\"button\"\n                      className={`px-2 py-1 rounded text-xs ${\n                        customPrice === null\n                          ? 'bg-blue-500 text-white'\n                          : 'bg-blue-400 text-black'\n                      }`}\n                      onClick={() => {\n                        setCustomPrice(null);\n                        setUseGoldPriceCalculation(false);\n                        console.log('Using catalog price, setting useGoldPriceCalculation to false');\n                      }}\n                    >\n                      Use Catalog Price\n                    </button>\n\n                    {customPrice !== null && (\n                      <button\n                        type=\"button\"\n                        className=\"bg-gray-200 text-gray-700 px-2 py-1 rounded text-xs\"\n                        onClick={() => {\n                          setCustomPrice(null);\n                          setUseGoldPriceCalculation(false);\n                          console.log('Reset button clicked, setting useGoldPriceCalculation to false');\n                        }}\n                      >\n                        Reset\n                      </button>\n                    )}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"p-3 bg-gray-100 rounded-md\">0.00</div>\n              )}\n\n              {/* Price comparison information */}\n              <div className=\"mt-2 grid grid-cols-2 gap-2\">\n                {selectedItem && (\n                  <div className={`text-xs ${customPrice !== null ? 'text-gray-500' : 'text-blue-600 font-medium'}`}>\n                    <span className=\"mr-1\">Catalog price:</span>\n                    <span>{formatCurrency(selectedItem.selling_price)}</span>\n                    {customPrice === null && (\n                      <span className=\"ml-1 text-blue-600 font-medium\">(Selected)</span>\n                    )}\n                  </div>\n                )}\n\n                {calculatedPrice && calculatedPrice > 0 && (\n                  <div className={`text-xs ${customPrice === calculatedPrice ? 'text-yellow-600 font-medium' : 'text-yellow-600'}`}>\n                    <span className=\"mr-1\">Gold value price:</span>\n                    <span>{formatCurrency(calculatedPrice)}</span>\n                    {customPrice === calculatedPrice && (\n                      <span className=\"ml-1 text-yellow-600 font-medium\">(Selected)</span>\n                    )}\n                  </div>\n                )}\n\n                {/* Show total with charges as a separate line if it exists */}\n                {selectedItem && (selectedItem.making_charges || selectedItem.additional_materials_charges) && calculatedPrice && calculatedPrice > 0 && (\n                  <div className=\"text-xs text-green-600\">\n                    <span className=\"mr-1\">Gold value with charges:</span>\n                    <span>{(() => {\n                      const makingCharges = selectedItem.making_charges ? parseFloat(String(selectedItem.making_charges)) : 0;\n                      const additionalMaterialsCharges = selectedItem.additional_materials_charges ? parseFloat(String(selectedItem.additional_materials_charges)) : 0;\n                      const totalWithCharges = calculatedPrice + makingCharges + additionalMaterialsCharges;\n\n                      // Force to 2 decimal places for consistency\n                      const roundedTotal = Math.round(totalWithCharges * 100) / 100;\n                      return formatCurrency(roundedTotal);\n                    })()}</span>\n                    {(() => {\n                      const makingCharges = selectedItem.making_charges ? parseFloat(String(selectedItem.making_charges)) : 0;\n                      const additionalMaterialsCharges = selectedItem.additional_materials_charges ? parseFloat(String(selectedItem.additional_materials_charges)) : 0;\n                      const totalWithCharges = calculatedPrice + makingCharges + additionalMaterialsCharges;\n                      const roundedTotal = Math.round(totalWithCharges * 100) / 100;\n\n                      // Check if this is the selected price\n                      const isSelected = customPrice !== null && Math.abs(customPrice - roundedTotal) < 0.01;\n\n                      return isSelected ? <span className=\"ml-1 text-green-600 font-medium\">(Selected)</span> : null;\n                    })()}\n                  </div>\n                )}\n\n                {customPrice !== null && customPrice !== calculatedPrice && selectedItem && customPrice !== selectedItem.selling_price && (\n                  <div className=\"text-xs text-blue-600 font-medium\">\n                    <span className=\"mr-1\">Custom price:</span>\n                    <span>{formatCurrency(customPrice)}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Base Gold Price (per unit) */}\n          {/* Debug info */}\n          {(() => {\n            console.log('Rendering Base Gold Price section, conditions:', {\n              selectedItem: !!selectedItem,\n              baseGoldPricePerUnit,\n              useGoldPriceCalculation,\n              shouldShow: selectedItem && baseGoldPricePerUnit > 0\n            });\n            return null;\n          })()}\n\n          {/* Show Base Gold Price for gold items */}\n          {selectedItem && selectedItem.gold_carat && selectedItem.weight && (\n            <div className=\"flex items-center\">\n              <div className=\"w-32 font-medium\">Base Gold Price (per unit)</div>\n              <div className=\"flex-1\">\n                <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">\n                      {baseGoldPricePerUnit > 0\n                        ? formatCurrency(baseGoldPricePerUnit)\n                        : calculatedPrice\n                          ? formatCurrency(calculatedPrice)\n                          : baseGoldPrice && selectedItem.weight\n                            ? formatCurrency(baseGoldPrice * selectedItem.weight)\n                            : 'Calculating...'}\n                    </span>\n                    <div className=\"flex items-center\">\n                      <span className=\"text-xs text-gray-500 mr-2\">Gold price × weight</span>\n                      <button\n                        type=\"button\"\n                        className=\"text-xs bg-yellow-400 text-black px-2 py-0.5 rounded\"\n                        onClick={() => {\n                          // Calculate directly based on current values\n                          if (baseGoldPrice > 0 && selectedItem?.weight) {\n                            const directCalculation = baseGoldPrice * selectedItem.weight;\n                            console.log('Direct calculation of baseGoldPricePerUnit:', directCalculation);\n\n                            // Update all relevant state variables\n                            setBaseGoldPricePerUnit(directCalculation);\n                            setCalculatedPrice(directCalculation);\n                            setUseGoldPriceCalculation(true);\n\n                            // Force a re-render\n                            setGoldPriceLastUpdated(new Date().toLocaleString());\n                          } else {\n                            // If we don't have the base price yet, fetch it first\n                            const karatNumber = selectedItem?.gold_carat || 0;\n                            if (karatNumber > 0) {\n                              fetchKaratPrice(karatNumber).then(price => {\n                                if (price > 0 && selectedItem?.weight) {\n                                  const calculatedGoldPrice = price * selectedItem.weight;\n                                  console.log('Fetched and calculated baseGoldPricePerUnit:', calculatedGoldPrice);\n\n                                  // Update all relevant state variables\n                                  setBaseGoldPricePerUnit(calculatedGoldPrice);\n                                  setCalculatedPrice(calculatedGoldPrice);\n                                  setUseGoldPriceCalculation(true);\n                                  setBaseGoldPrice(price);\n\n                                  // Force a re-render\n                                  setGoldPriceLastUpdated(new Date().toLocaleString());\n                                }\n                              });\n                            }\n                          }\n                        }}\n                      >\n                        Refresh\n                      </button>\n                    </div>\n                  </div>\n                  {/* Show the calculation details */}\n                  <div className=\"mt-2 text-xs text-gray-600\">\n                    <div className=\"flex justify-between\">\n                      <span>Gold Price per gram:</span>\n                      <span>{formatCurrency(baseGoldPrice)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Weight:</span>\n                      <span>{selectedItem.weight} grams</span>\n                    </div>\n                    <div className=\"flex justify-between font-medium\">\n                      <span>Total Gold Value:</span>\n                      <span>\n                        {baseGoldPricePerUnit > 0\n                          ? formatCurrency(baseGoldPricePerUnit)\n                          : calculatedPrice\n                            ? formatCurrency(calculatedPrice)\n                            : baseGoldPrice && selectedItem.weight\n                              ? formatCurrency(baseGoldPrice * selectedItem.weight)\n                              : 'Calculating...'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Discount */}\n          <div className=\"flex items-center\">\n            <div className=\"w-32 font-medium\">Discount</div>\n            <div className=\"flex-1 flex space-x-2\">\n              <input\n                type=\"number\"\n                className=\"flex-1 p-3 border border-gray-300 rounded-md\"\n                value={discountAmount}\n                onChange={(e) => {\n                  const value = parseFloat(e.target.value);\n                  if (!isNaN(value) && value >= 0) {\n                    // For percentage, limit to 75%\n                    if (discountType === 'percentage' && value > 75) {\n                      setError('Maximum discount allowed is 75%');\n                      setDiscountAmount(75);\n                    } else if (discountType === 'fixed' && selectedItem) {\n                      // For fixed amount, limit to 75% of the price\n                      // Use baseGoldPricePerUnit if available, otherwise use custom price or selling price\n                      let basePrice;\n\n                      if (selectedItem.gold_carat && selectedItem.weight) {\n                        // For gold items, prioritize using the gold price calculation\n                        if (baseGoldPricePerUnit > 0) {\n                          // Use the calculated base gold price if available\n                          basePrice = baseGoldPricePerUnit;\n                        } else if (calculatedPrice && calculatedPrice > 0) {\n                          // Fall back to calculated price if baseGoldPricePerUnit isn't set yet\n                          basePrice = calculatedPrice;\n                        } else if (baseGoldPrice && selectedItem.weight) {\n                          // Calculate directly if we have the base gold price and weight\n                          basePrice = baseGoldPrice * selectedItem.weight;\n                        } else if (customPrice !== null) {\n                          basePrice = customPrice;\n                        } else {\n                          basePrice = selectedItem.selling_price;\n                        }\n                      } else if (customPrice !== null) {\n                        basePrice = customPrice;\n                      } else {\n                        basePrice = selectedItem.selling_price;\n                      }\n\n                      const maxDiscount = basePrice * 0.75;\n                      if (value > maxDiscount) {\n                        setError(`Maximum discount allowed is ${formatCurrency(maxDiscount)}`);\n                        setDiscountAmount(maxDiscount);\n                      } else {\n                        setDiscountAmount(value);\n                        setError(null);\n                      }\n                    } else {\n                      setDiscountAmount(value);\n                      setError(null);\n                    }\n                  } else {\n                    setDiscountAmount(0);\n                  }\n                }}\n                min=\"0\"\n                step={discountType === 'percentage' ? '1' : '0.01'}\n                disabled={!selectedItem}\n              />\n              <select\n                className=\"p-3 border border-gray-300 rounded-md\"\n                value={discountType}\n                onChange={(e) => setDiscountType(e.target.value as 'percentage' | 'fixed')}\n                disabled={!selectedItem}\n              >\n                <option value=\"fixed\">₹</option>\n                <option value=\"percentage\">%</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Final Price After Discount */}\n          <div className=\"flex items-center\">\n            <div className=\"w-32 font-medium\">Final price</div>\n            <div className=\"flex-1\">\n              <div className=\"p-3 bg-gray-100 rounded-md font-bold\">\n                {selectedItem ? formatCurrency(getFinalUnitPrice()) : '0.00'}\n              </div>\n              {discountAmount > 0 && selectedItem && (\n                <div className=\"text-xs text-green-600 mt-1\">\n                  {discountType === 'percentage'\n                    ? `${discountAmount}% discount applied`\n                    : `${formatCurrency(discountAmount)} discount applied`}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Quantity */}\n          <div className=\"flex items-center\">\n            <div className=\"w-32 font-medium\">Quantity</div>\n            <div className=\"flex-1 relative\">\n              <input\n                type=\"number\"\n                className=\"w-full p-3 border border-gray-300 rounded-md pr-10\"\n                value={quantity}\n                onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                min=\"1\"\n                max={selectedItem?.in_stock || 1}\n              />\n              <div className=\"absolute right-3 top-3\">\n                <ChevronDown size={18} className=\"text-gray-400\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Total for current item */}\n          <div className=\"flex items-center\">\n            <div className=\"w-32 font-medium\">Total</div>\n            <div className=\"flex-1\">\n              <div className=\"p-3 bg-gray-100 rounded-md\">\n                {selectedItem ? formatCurrency(getFinalUnitPrice() * quantity) : '0.00'}\n              </div>\n            </div>\n          </div>\n\n          {/* Payment Method */}\n          <div className=\"flex items-center\">\n            <div className=\"w-32 font-medium\">Payment Method</div>\n            <div className=\"flex-1 relative\">\n              <select\n                className=\"w-full p-3 border border-gray-300 rounded-md appearance-none\"\n                value={paymentMethod}\n                onChange={(e) => setPaymentMethod(e.target.value)}\n              >\n                {paymentMethods.map(method => (\n                  <option key={method} value={method}>{method}</option>\n                ))}\n              </select>\n              <div className=\"absolute right-3 top-3 pointer-events-none\">\n                <ChevronDown size={18} className=\"text-gray-400\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n              {error}\n            </div>\n          )}\n\n          {/* Add More Button */}\n          <div className=\"flex justify-center\">\n            <button\n              type=\"button\"\n              className={`${saleItems.length === 0 ? 'bg-yellow-400 animate-pulse' : 'bg-yellow-400'} text-black px-6 py-2 rounded-full font-medium flex items-center`}\n              onClick={handleAddItem}\n              disabled={!selectedItem || isSubmitting}\n              title=\"Add this item to the sale\"\n            >\n              <Plus size={18} className=\"mr-1\" />\n              {saleItems.length === 0 ? 'ADD ITEM ' : 'ADD MORE'}\n            </button>\n          </div>\n          {saleItems.length === 0 && selectedItem && (\n            <div className=\"text-center text-sm text-yellow-600 mt-2\">\n              ⚠️ You must click the button above to add the item to your cart first\n            </div>\n          )}\n\n          {/* Sale Items List */}\n          {saleItems.length > 0 && (\n            <div className=\"mt-6\">\n              <h3 className=\"font-bold mb-2\">Items in this sale:</h3>\n              <div className=\"border rounded-md overflow-hidden\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Item</th>\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Quantity</th>\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Original Price</th>\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Discount</th>\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Final Price</th>\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Subtotal</th>\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Action</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {saleItems.map((item, index) => (\n                      <tr key={index} className={item.is_gold_price_based ? 'bg-yellow-50' : ''}>\n                        <td className=\"px-4 py-2\">\n                          <div>{item.product_title}</div>\n                          {item.gold_carat && item.gold_weight && (\n                            <div className=\"text-xs text-yellow-600\">\n                              {item.gold_carat}KT Gold • {item.gold_weight}g\n                              {item.gold_price_per_gram && (\n                                <span className=\"ml-1\">• {formatCurrency(item.gold_price_per_gram)}/g</span>\n                              )}\n                            </div>\n                          )}\n                        </td>\n                        <td className=\"px-4 py-2\">{item.quantity}</td>\n                        <td className=\"px-4 py-2\">{formatCurrency(item.original_price || item.unit_price)}</td>\n                        <td className=\"px-4 py-2\">\n                          {item.discount_amount ? (\n                            item.discount_type === 'percentage'\n                              ? `${item.discount_amount}%`\n                              : formatCurrency(item.discount_amount)\n                          ) : '-'}\n                        </td>\n                        <td className=\"px-4 py-2\">\n                          <div className=\"font-medium\">{formatCurrency(item.unit_price)}</div>\n                          {item.is_gold_price_based && (\n                            <div className=\"text-xs text-yellow-600\">Gold price based</div>\n                          )}\n                        </td>\n                        <td className=\"px-4 py-2\">{formatCurrency(item.subtotal)}</td>\n                        <td className=\"px-4 py-2\">\n                          <button\n                            className=\"text-red-500 hover:text-red-700\"\n                            onClick={() => handleRemoveItem(index)}\n                            title=\"Remove item\"\n                          >\n                            <X size={18} />\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                    <tr className=\"bg-gray-50 font-bold\">\n                      <td className=\"px-4 py-2\" colSpan={5}>Total</td>\n                      <td className=\"px-4 py-2\">{formatCurrency(totalAmount)}</td>\n                      <td className=\"px-4 py-2\"></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between mt-6\">\n            <button\n              type=\"button\"\n              className=\"bg-yellow-400 text-black px-6 py-2 rounded-full font-medium\"\n              onClick={handleSubmit}\n              disabled={isSubmitting}\n              title=\"Confirm this sale\"\n            >\n              {isSubmitting ? 'Processing...' : 'Confirm'}\n            </button>\n            <div className=\"text-xs text-gray-500 mt-1\">\n              {saleItems.length === 0 && 'First select an item, then click ADD MORE'}\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <button\n                type=\"button\"\n                className=\"bg-white border border-gray-300 text-gray-700 px-6 py-2 rounded-full font-medium\"\n                onClick={handleViewSales}\n              >\n                View Sale\n              </button>\n\n              {/* <button\n                type=\"button\"\n                className=\"bg-yellow-400 text-black px-6 py-2 rounded-full font-medium\"\n                onClick={() => alert('Invoice generation will be implemented')}\n                disabled={isSubmitting || saleItems.length === 0}\n              >\n                Generate Invoice\n              </button> */}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddSalePage;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2666, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}