{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://F%3A/JewelleryWEBApp/front_end/src/utils/imageCompression.ts"],"sourcesContent":["/**\n * Compresses an image file to reduce its size\n * @param file The image file to compress\n * @param maxSizeMB Maximum size in MB\n * @param maxWidthOrHeight Maximum width or height in pixels\n * @returns A promise that resolves to a base64 string of the compressed image\n */\nexport const compressImage = async (\n  file: File,\n  maxSizeMB: number = 1,\n  maxWidthOrHeight: number = 1024\n): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    \n    reader.onload = (event) => {\n      const img = new Image();\n      img.src = event.target?.result as string;\n      \n      img.onload = () => {\n        // Create a canvas to resize the image\n        const canvas = document.createElement('canvas');\n        let width = img.width;\n        let height = img.height;\n        \n        // Calculate new dimensions while maintaining aspect ratio\n        if (width > height) {\n          if (width > maxWidthOrHeight) {\n            height = Math.round(height * maxWidthOrHeight / width);\n            width = maxWidthOrHeight;\n          }\n        } else {\n          if (height > maxWidthOrHeight) {\n            width = Math.round(width * maxWidthOrHeight / height);\n            height = maxWidthOrHeight;\n          }\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        // Draw the resized image on the canvas\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          reject(new Error('Could not get canvas context'));\n          return;\n        }\n        \n        ctx.drawImage(img, 0, 0, width, height);\n        \n        // Convert to base64 with reduced quality\n        const quality = 0.7; // 70% quality\n        const compressedBase64 = canvas.toDataURL(file.type, quality);\n        \n        // Check if the compressed image is still too large\n        const base64Size = (compressedBase64.length * 3) / 4 / 1024 / 1024; // Size in MB\n        \n        if (base64Size > maxSizeMB) {\n          // If still too large, compress more aggressively\n          const furtherQuality = Math.min(maxSizeMB / base64Size * quality, 0.5);\n          const furtherCompressed = canvas.toDataURL(file.type, furtherQuality);\n          resolve(furtherCompressed);\n        } else {\n          resolve(compressedBase64);\n        }\n      };\n      \n      img.onerror = () => {\n        reject(new Error('Error loading image'));\n      };\n    };\n    \n    reader.onerror = () => {\n      reject(new Error('Error reading file'));\n    };\n  });\n};\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;AACM,MAAM,gBAAgB,OAC3B,MACA,YAAoB,CAAC,EACrB,mBAA2B,IAAI;IAE/B,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI;QACnB,OAAO,aAAa,CAAC;QAErB,OAAO,MAAM,GAAG,CAAC;YACf,MAAM,MAAM,IAAI;YAChB,IAAI,GAAG,GAAG,MAAM,MAAM,EAAE;YAExB,IAAI,MAAM,GAAG;gBACX,sCAAsC;gBACtC,MAAM,SAAS,SAAS,aAAa,CAAC;gBACtC,IAAI,QAAQ,IAAI,KAAK;gBACrB,IAAI,SAAS,IAAI,MAAM;gBAEvB,0DAA0D;gBAC1D,IAAI,QAAQ,QAAQ;oBAClB,IAAI,QAAQ,kBAAkB;wBAC5B,SAAS,KAAK,KAAK,CAAC,SAAS,mBAAmB;wBAChD,QAAQ;oBACV;gBACF,OAAO;oBACL,IAAI,SAAS,kBAAkB;wBAC7B,QAAQ,KAAK,KAAK,CAAC,QAAQ,mBAAmB;wBAC9C,SAAS;oBACX;gBACF;gBAEA,OAAO,KAAK,GAAG;gBACf,OAAO,MAAM,GAAG;gBAEhB,uCAAuC;gBACvC,MAAM,MAAM,OAAO,UAAU,CAAC;gBAC9B,IAAI,CAAC,KAAK;oBACR,OAAO,IAAI,MAAM;oBACjB;gBACF;gBAEA,IAAI,SAAS,CAAC,KAAK,GAAG,GAAG,OAAO;gBAEhC,yCAAyC;gBACzC,MAAM,UAAU,KAAK,cAAc;gBACnC,MAAM,mBAAmB,OAAO,SAAS,CAAC,KAAK,IAAI,EAAE;gBAErD,mDAAmD;gBACnD,MAAM,aAAa,AAAC,iBAAiB,MAAM,GAAG,IAAK,IAAI,OAAO,MAAM,aAAa;gBAEjF,IAAI,aAAa,WAAW;oBAC1B,iDAAiD;oBACjD,MAAM,iBAAiB,KAAK,GAAG,CAAC,YAAY,aAAa,SAAS;oBAClE,MAAM,oBAAoB,OAAO,SAAS,CAAC,KAAK,IAAI,EAAE;oBACtD,QAAQ;gBACV,OAAO;oBACL,QAAQ;gBACV;YACF;YAEA,IAAI,OAAO,GAAG;gBACZ,OAAO,IAAI,MAAM;YACnB;QACF;QAEA,OAAO,OAAO,GAAG;YACf,OAAO,IAAI,MAAM;QACnB;IACF;AACF","debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://F%3A/JewelleryWEBApp/front_end/src/components/SupplierCategoryChart.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer\n} from 'recharts';\n\ninterface ChartProps {\n  selectedCategory: string;\n}\n\ninterface Supplier {\n  supplier_id: string;\n  supplier_name: string;\n  name?: string;\n  category?: string;\n  manufacturing_items?: string;\n}\n\ninterface Order {\n  supplier_id: string;\n  [key: string]: any;\n}\n\ninterface ChartDataItem {\n  supplier_id: string;\n  name: string;\n  orderCount: number;\n}\n\nconst SupplierCategoryChart: React.FC<ChartProps> = ({ selectedCategory }) => {\n  const [chartData, setChartData] = useState<ChartDataItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Skip if no category is selected\n        if (!selectedCategory) {\n          setChartData([]);\n          setLoading(false);\n          return;\n        }\n\n        console.log(`Fetching suppliers for category: ${selectedCategory}`);\n\n        // Add a timestamp to prevent caching and ensure fresh data\n        const timestamp = new Date().getTime();\n\n        // First, fetch all suppliers from the database\n        const suppliersResponse = await fetch(`http://localhost:3002/suppliers?t=${timestamp}`);\n        if (!suppliersResponse.ok) {\n          throw new Error(`Failed to fetch suppliers: ${suppliersResponse.status}`);\n        }\n\n        let suppliers = await suppliersResponse.json() as Supplier[];\n        console.log('Fetched suppliers:', suppliers);\n\n        // Log each supplier's name and ID for debugging\n        suppliers.forEach(supplier => {\n          console.log(`Supplier ID: ${supplier.supplier_id}, Name: ${supplier.supplier_name || supplier.name || 'No name'}, Category: ${supplier.category || 'No category'}`);\n        });\n\n        // Filter suppliers by category if a specific category is selected\n        if (selectedCategory !== 'All') {\n          suppliers = suppliers.filter(supplier =>\n            supplier.category === selectedCategory ||\n            (supplier.manufacturing_items && supplier.manufacturing_items.includes(selectedCategory))\n          );\n          console.log(`Filtered suppliers for category ${selectedCategory}:`, suppliers);\n        }\n\n        // Then, fetch all orders to count them manually (with timestamp to prevent caching)\n        const ordersResponse = await fetch(`http://localhost:3002/suppliers/check-orders-data?t=${timestamp}`);\n        let orders: Order[] = [];\n\n        if (ordersResponse.ok) {\n          orders = await ordersResponse.json();\n          console.log('Fetched orders:', orders);\n        } else {\n          console.warn('Could not fetch orders, will show suppliers with zero orders');\n        }\n\n        // Count orders for each supplier\n        const orderCountMap: Record<string, number> = {};\n        if (orders && orders.length > 0) {\n          orders.forEach((order: Order) => {\n            if (order.supplier_id) {\n              orderCountMap[order.supplier_id] = (orderCountMap[order.supplier_id] || 0) + 1;\n            }\n          });\n        }\n\n        console.log('Order counts by supplier:', orderCountMap);\n\n        // Create chart data with real suppliers and their order counts\n        const realData: ChartDataItem[] = suppliers.map((supplier: Supplier) => {\n          // Get the actual name from the supplier data\n          // Check all possible name fields and use the first one that exists\n          let supplierName = '';\n\n          if (supplier.name && supplier.name !== '') {\n            supplierName = supplier.name;\n          } else if (supplier.supplier_name && supplier.supplier_name !== '') {\n            supplierName = supplier.supplier_name;\n          } else {\n            // If no name is found, use a generic name but log this issue\n            supplierName = `Unknown Supplier ${supplier.supplier_id}`;\n            console.warn(`No name found for supplier with ID ${supplier.supplier_id}`);\n          }\n\n          // Log the name we're using\n          console.log(`Using name \"${supplierName}\" for supplier ID ${supplier.supplier_id}`);\n\n          return {\n            supplier_id: supplier.supplier_id || 'unknown',\n            name: supplierName,\n            orderCount: supplier.supplier_id ? (orderCountMap[supplier.supplier_id] || 0) : 0\n          };\n        });\n\n        // Sort by order count (highest first)\n        realData.sort((a: ChartDataItem, b: ChartDataItem) => b.orderCount - a.orderCount);\n\n        // For a specific category, show ALL suppliers in that category\n        // For 'All' categories, show suppliers with orders or top suppliers\n        let finalData: ChartDataItem[] = [];\n\n        if (selectedCategory !== 'All') {\n          // For a specific category, show ALL suppliers regardless of order count\n          // This ensures new suppliers are always displayed\n          finalData = [...realData];\n          console.log(`Showing all ${finalData.length} suppliers in the ${selectedCategory} category`);\n        } else {\n          // For 'All' categories, show suppliers with orders\n          const suppliersWithOrders = realData.filter((item: ChartDataItem) => item.orderCount > 0);\n\n          if (suppliersWithOrders.length > 0) {\n            // We have suppliers with orders, show them\n            finalData = suppliersWithOrders;\n          } else {\n            // No suppliers with orders, show top suppliers\n            finalData = realData.slice(0, 5);\n          }\n        }\n\n        console.log('Final chart data:', finalData);\n\n        // Log each item in the final chart data for debugging\n        finalData.forEach(item => {\n          console.log(`Chart item - ID: ${item.supplier_id}, Name: ${item.name}, Orders: ${item.orderCount}`);\n        });\n\n        setChartData(finalData);\n      } catch (err) {\n        console.error('Error fetching chart data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch chart data');\n\n        // Fallback to empty data\n        setChartData([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [selectedCategory]);\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center h-64\">\n      <div className=\"w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n    </div>;\n  }\n\n  if (error) {\n    return <div className=\"text-red-500\">Error loading chart: {error}</div>;\n  }\n\n  if (chartData.length === 0) {\n    return <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold mb-6 text-center\">Leading Supplier Experts by Order Count</h2>\n      <div className=\"text-right mb-2\">\n        <span className=\"inline-block bg-yellow-400 w-4 h-4 mr-2\"></span>\n        <span className=\"text-sm\">{selectedCategory === 'All' ? 'All Categories' : selectedCategory}</span>\n      </div>\n      <div className=\"text-center py-10 text-gray-500\">\n        {selectedCategory ?\n          `No suppliers found for ${selectedCategory === 'All' ? 'any category' : `the ${selectedCategory} category`}. Please select a different category or add suppliers for this category.` :\n          'Please select a category to see supplier performance'}\n      </div>\n    </div>;\n  }\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold mb-6 text-center\">Leading Supplier Experts by Order Count</h2>\n      <div className=\"text-right mb-2\">\n        <span className=\"inline-block bg-yellow-400 w-4 h-4 mr-2\"></span>\n        <span className=\"text-sm\">{selectedCategory === 'All' ? 'All Categories' : selectedCategory}</span>\n      </div>\n      <div className=\"text-center text-sm text-gray-500 mb-2\">\n        Showing suppliers ranked by number of orders in {selectedCategory === 'All' ? 'all categories' : `the ${selectedCategory} category`}\n      </div>\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart\n            layout=\"vertical\"\n            data={chartData}\n            margin={{ top: 5, right: 30, left: 50, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" horizontal={true} vertical={false} />\n            <XAxis type=\"number\" domain={[0, 'dataMax + 5']} label={{ value: 'Order Times', position: 'bottom', offset: 0 }} />\n            <YAxis\n              type=\"category\"\n              dataKey=\"name\"\n              width={120}\n              label={{ value: 'Supplier Name', angle: -90, position: 'left' }}\n              tick={{ fontSize: 12 }}\n            />\n            <Tooltip\n              formatter={(value) => [`${value} orders`, 'Orders']}\n              labelFormatter={(label) => {\n                // Find the supplier by name\n                const supplier = chartData.find(item => item.name === label);\n                if (!supplier) return label;\n\n                // Just return the supplier name as is\n                return label;\n              }}\n            />\n            <Bar dataKey=\"orderCount\" fill=\"#FFDD00\" barSize={30} />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default SupplierCategoryChart;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"sources":["file://F%3A/JewelleryWEBApp/front_end/src/app/DashView/orders/add/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { compressImage } from '@/utils/imageCompression';\nimport SupplierCategoryChart from '@/components/SupplierCategoryChart';\n\nconst AddOrderPage = () => {\n  // State for form fields\n  const [category, setCategory] = useState('');\n  const [supplier, setSupplier] = useState('');\n  const [quantity, setQuantity] = useState(20);\n  const [offerGold, setOfferGold] = useState('yes');\n  const [selectedKarats, setSelectedKarats] = useState({\n    '24KT': false,\n    '22KT': false,\n    '21KT': false,\n    '18KT': false,\n    '16KT': false,\n  });\n  const [karatValues, setKaratValues] = useState({\n    '24KT': 50,\n    '22KT': 50,\n    '21KT': 50,\n    '18KT': 50,\n    '16KT': 50,\n  });\n  const [imagePreview, setImagePreview] = useState<string | 'loading' | null>(null);\n  const [suppliers, setSuppliers] = useState<any[]>([]);\n\n  // User info state\n  const [userRole, setUserRole] = useState<string>('');\n  const [userBranchId, setUserBranchId] = useState<number | null>(null);\n\n  // State for categories\n  const [categories, setCategories] = useState<{category_id: number, category_name: string}[]>([]);\n\n  // Get user info from localStorage\n  useEffect(() => {\n    // Get user info from localStorage\n    const role = localStorage.getItem('role');\n    const branchId = localStorage.getItem('branchId');\n\n    console.log('Retrieved from localStorage - Role:', role, 'Branch ID:', branchId);\n\n    // Set user role (convert to lowercase for consistency)\n    const normalizedRole = role === 'Admin' ? 'admin' : (role?.toLowerCase() || '');\n    setUserRole(normalizedRole);\n\n    // Set branch ID\n    const numericBranchId = branchId ? Number(branchId) : null;\n    setUserBranchId(numericBranchId);\n  }, []);\n\n  // Fetch categories from the database\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:3002/categories');\n        if (response.ok) {\n          const data = await response.json();\n          setCategories(data);\n        } else {\n          console.error('Failed to fetch categories');\n          // Fallback to default categories if fetch fails\n          setCategories([\n            { category_id: 1, category_name: \"Necklace\" },\n            { category_id: 2, category_name: \"Ring\" },\n            { category_id: 3, category_name: \"Earrings\" },\n            { category_id: 4, category_name: \"Bracelet\" },\n            { category_id: 5, category_name: \"Other\" }\n          ]);\n        }\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n        // Fallback to default categories if fetch fails\n        setCategories([\n          { category_id: 1, category_name: \"Necklace\" },\n          { category_id: 2, category_name: \"Ring\" },\n          { category_id: 3, category_name: \"Earrings\" },\n          { category_id: 4, category_name: \"Bracelet\" },\n          { category_id: 5, category_name: \"Other\" }\n        ]);\n      }\n    };\n\n    fetchCategories();\n  }, []);\n\n  // Fetch suppliers from the database\n  useEffect(() => {\n    const fetchSuppliers = async () => {\n      try {\n        const response = await fetch('http://localhost:3002/suppliers');\n        if (response.ok) {\n          const data = await response.json();\n          setSuppliers(data);\n        } else {\n          console.error('Failed to fetch suppliers');\n        }\n      } catch (error) {\n        console.error('Error fetching suppliers:', error);\n        // Use dummy data if fetch fails\n        setSuppliers([\n          { supplier_id: '001', name: 'Mohamad Nazeem', category: 'Wedding Sets' },\n          { supplier_id: '002', name: 'Abdulla Nazeem', category: 'Rings' },\n          { supplier_id: '003', name: 'Vaseem Akram', category: 'Bracelets' },\n          { supplier_id: '004', name: 'Mohamad Sami', category: 'Pendants' },\n        ]);\n      }\n    };\n\n    fetchSuppliers();\n  }, []);\n\n  // Handle karat checkbox change\n  const handleKaratChange = (karat: string) => {\n    setSelectedKarats({\n      ...selectedKarats,\n      [karat]: !selectedKarats[karat as keyof typeof selectedKarats]\n    });\n  };\n\n  // Handle karat value change\n  const handleKaratValueChange = (karat: string, value: number) => {\n    setKaratValues({\n      ...karatValues,\n      [karat]: value\n    });\n  };\n\n  // Handle image upload with compression\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      try {\n        // Show loading state\n        setImagePreview('loading');\n\n        // Check file type\n        if (!file.type.startsWith('image/')) {\n          alert('Please upload an image file');\n          setImagePreview(null);\n          return;\n        }\n\n        // Check initial file size (limit to 10MB for raw upload)\n        if (file.size > 10 * 1024 * 1024) {\n          alert('Image size should be less than 10MB');\n          setImagePreview(null);\n          return;\n        }\n\n        // Compress the image if larger than 1MB\n        let imageData: string;\n        if (file.size > 1 * 1024 * 1024) {\n          console.log(`Compressing image: ${(file.size / 1024 / 1024).toFixed(2)}MB`);\n          imageData = await compressImage(file, 1, 1200); // Max 1MB, max 1200px width/height\n          console.log(`Compressed to approximately: ${(imageData.length / 1024 / 1024 * 0.75).toFixed(2)}MB`);\n        } else {\n          // For small images, just read as data URL without compression\n          imageData = await new Promise<string>((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result as string);\n            reader.onerror = reject;\n            reader.readAsDataURL(file);\n          });\n        }\n\n        // Set the preview\n        setImagePreview(imageData);\n      } catch (error) {\n        console.error('Error processing image:', error);\n        alert('Error processing image. Please try again with a different image.');\n        setImagePreview(null);\n      }\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      // Prepare the data to be sent\n      const orderData = {\n        category,\n        supplier,\n        quantity,\n        offerGold,\n        selectedKarats: Object.keys(selectedKarats).filter(k => selectedKarats[k as keyof typeof selectedKarats]),\n        karatValues: Object.fromEntries(\n          Object.entries(karatValues).filter(([k]) => selectedKarats[k as keyof typeof selectedKarats])\n        ),\n        image: imagePreview,\n        branch_id: userBranchId // Include branch_id from user info\n      };\n\n      console.log('Including branch_id:', userBranchId);\n\n      console.log('Order data:', orderData);\n\n      // Send the data to the backend\n      const response = await fetch('http://localhost:3002/orders/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || 'Failed to create order');\n      }\n\n      alert('Order submitted successfully!');\n\n      // Reset form fields\n      setCategory('');\n      setSupplier('');\n      setQuantity(20);\n      setOfferGold('yes');\n      setSelectedKarats({\n        '24KT': false,\n        '22KT': false,\n        '21KT': false,\n        '18KT': false,\n        '16KT': false,\n      });\n      setKaratValues({\n        '24KT': 50,\n        '22KT': 50,\n        '21KT': 50,\n        '18KT': 50,\n        '16KT': 50,\n      });\n      setImagePreview(null);\n\n    } catch (error) {\n      console.error('Error submitting order:', error);\n      alert(`Failed to submit order: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n        <h2 className=\"text-2xl font-bold text-center mb-6\">Add New Order</h2>\n\n        <form onSubmit={handleSubmit}>\n          {/* Item Category */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-1\">Item Category</label>\n            <select\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={category}\n              onChange={(e) => {\n                const newCategory = e.target.value;\n                setCategory(newCategory);\n                // Reset supplier selection when category changes\n                setSupplier('');\n                console.log('Category changed to:', newCategory);\n              }}\n              required\n            >\n              <option value=\"\">Select Category</option>\n              {categories.map((cat) => (\n                <option key={cat.category_id} value={cat.category_name}>{cat.category_name}</option>\n              ))}\n            </select>\n          </div>\n\n          {/* Select Supplier */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-1\">Select Supplier</label>\n            <select\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={supplier}\n              onChange={(e) => setSupplier(e.target.value)}\n              required\n            >\n              <option value=\"\">Select Supplier</option>\n              {suppliers\n                .filter(sup => !category || sup.category === category)\n                .map((sup) => (\n                  <option key={sup.supplier_id} value={sup.supplier_id}>\n                    {sup.supplier_id} - {sup.name} {sup.category ? `(${sup.category})` : ''}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          {/* Quantity */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-1\">Quantity</label>\n            <input\n              type=\"number\"\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={quantity}\n              onChange={(e) => setQuantity(Number(e.target.value))}\n              min=\"1\"\n              required\n            />\n          </div>\n\n          {/* Gold Material Option */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-1\">Do You Offer Gold Material?</label>\n            <div className=\"flex items-center space-x-4\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  name=\"offerGold\"\n                  value=\"yes\"\n                  checked={offerGold === 'yes'}\n                  onChange={() => setOfferGold('yes')}\n                  className=\"mr-2\"\n                />\n                Yes\n              </label>\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  name=\"offerGold\"\n                  value=\"no\"\n                  checked={offerGold === 'no'}\n                  onChange={() => setOfferGold('no')}\n                  className=\"mr-2\"\n                />\n                No\n              </label>\n            </div>\n          </div>\n\n          {/* Gold Karat Options - Only show if offerGold is 'yes' */}\n          {offerGold === 'yes' && (\n            <div className=\"mb-4 grid grid-cols-2 gap-4\">\n              <div>\n                {Object.keys(selectedKarats).map((karat) => (\n                  <div key={karat} className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      id={karat}\n                      checked={selectedKarats[karat as keyof typeof selectedKarats]}\n                      onChange={() => handleKaratChange(karat)}\n                      className=\"mr-2\"\n                    />\n                    <label htmlFor={karat} className=\"mr-4 w-12\">{karat}</label>\n                    <input\n                      type=\"number\"\n                      value={karatValues[karat as keyof typeof karatValues]}\n                      onChange={(e) => handleKaratValueChange(karat, Number(e.target.value))}\n                      className=\"w-16 p-1 border border-gray-300 rounded-md\"\n                      disabled={!selectedKarats[karat as keyof typeof selectedKarats]}\n                    />\n                  </div>\n                ))}\n              </div>\n\n              {/* Image Upload */}\n              <div className=\"flex flex-col items-center\">\n                <label className=\"block text-sm font-medium mb-2 text-center\">\n                  Add a image of Design\n                </label>\n                <div className=\"border border-gray-300 rounded-md p-2 w-full h-32 flex items-center justify-center\">\n                  {imagePreview === 'loading' ? (\n                    <div className=\"flex flex-col items-center justify-center\">\n                      <div className=\"w-8 h-8 border-4 border-gray-300 border-t-blue-500 rounded-full animate-spin mb-2\"></div>\n                      <span className=\"text-sm text-gray-500\">Compressing image...</span>\n                    </div>\n                  ) : imagePreview ? (\n                    <div className=\"relative w-full h-full\">\n                      <Image\n                        src={imagePreview}\n                        alt=\"Design Preview\"\n                        fill\n                        style={{ objectFit: 'contain' }}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setImagePreview(null)}\n                        className=\"absolute top-0 right-0 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs\"\n                        title=\"Remove image\"\n                      >\n                        ×\n                      </button>\n                    </div>\n                  ) : (\n                    <label className=\"cursor-pointer text-center\">\n                      <span className=\"text-blue-500\">Click to upload</span>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        onChange={handleImageUpload}\n                      />\n                    </label>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Add More Button */}\n          <div className=\"flex justify-center mb-4\">\n            <button\n              type=\"button\"\n              className=\"bg-yellow-400 text-black px-6 py-2 rounded-full font-medium\"\n              onClick={() => alert('Add more functionality will be implemented later')}\n            >\n              ADD MORE\n            </button>\n          </div>\n\n          {/* Submit and Cancel Buttons */}\n          <div className=\"flex justify-between\">\n            <button\n              type=\"submit\"\n              className=\"bg-yellow-400 text-black px-8 py-2 rounded-full font-medium\"\n            >\n              Submit\n            </button>\n            <button\n              type=\"button\"\n              className=\"bg-gray-200 text-black px-8 py-2 rounded-full font-medium\"\n              onClick={() => window.history.back()}\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n\n      {/* Supplier Category Chart - Only show if category is selected */}\n      {category && (\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h2 className=\"text-xl font-bold text-center mb-6\">Leading Supplier Expert in the Field</h2>\n          <p className=\"text-center text-sm text-gray-500 mb-4\">\n            This chart shows the performance of suppliers in the <span className=\"font-semibold\">{category}</span> category\n          </p>\n          <SupplierCategoryChart selectedCategory={category} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddOrderPage;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1254, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}