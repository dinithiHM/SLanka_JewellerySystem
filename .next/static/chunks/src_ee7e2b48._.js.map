{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://F%3A/JewelleryWEBApp/front_end/src/components/CustomOrderCategoryChart.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\ninterface Category {\n  category_id: number;\n  category_name: string;\n}\n\ninterface Supplier {\n  supplier_id: number;\n  supplier_name: string;\n}\n\nconst CustomOrderCategoryChart = () => {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\n  const [chartData, setChartData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch categories and suppliers\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        \n        // Fetch categories\n        const categoriesResponse = await fetch('http://localhost:3002/categories');\n        if (!categoriesResponse.ok) {\n          throw new Error(`Failed to fetch categories: ${categoriesResponse.status}`);\n        }\n        \n        const categoriesData = await categoriesResponse.json();\n        setCategories(categoriesData);\n        \n        // Fetch suppliers\n        const suppliersResponse = await fetch('http://localhost:3002/suppliers');\n        if (!suppliersResponse.ok) {\n          throw new Error(`Failed to fetch suppliers: ${suppliersResponse.status}`);\n        }\n        \n        const suppliersData = await suppliersResponse.json();\n        setSuppliers(suppliersData);\n        \n        // Create chart data\n        const chartData = categoriesData.map((category: Category) => {\n          const result: any = {\n            name: category.category_name,\n            categoryId: category.category_id\n          };\n          \n          // Add random data for suppliers (for demonstration)\n          suppliersData.forEach((supplier: Supplier) => {\n            // Generate a random number between 0 and 5\n            const randomValue = Math.floor(Math.random() * 6);\n            result[supplier.supplier_name] = randomValue;\n          });\n          \n          return result;\n        });\n        \n        setChartData(chartData);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, []);\n  \n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"text-red-500 p-4\">\n        Error loading chart: {error}\n      </div>\n    );\n  }\n  \n  if (chartData.length === 0) {\n    return (\n      <div className=\"text-center py-10 text-gray-500\">\n        No categories or suppliers available\n      </div>\n    );\n  }\n  \n  // Generate colors for suppliers\n  const colors = suppliers.map((_, index) => {\n    const colorPalette = [\n      '#FFDD00', // Yellow\n      '#FFB347', // Pastel Orange\n      '#FF6B6B', // Light Red\n      '#4ECDC4', // Turquoise\n      '#7FB800', // Apple Green\n      '#9D81BA', // Light Purple\n      '#FF8066', // Salmon\n      '#45B7D1', // Sky Blue\n      '#EF798A', // Pink\n      '#7D82B8'  // Periwinkle\n    ];\n    return colorPalette[index % colorPalette.length];\n  });\n  \n  return (\n    <div className=\"bg-white p-4 rounded-lg shadow-md\">\n      <h2 className=\"text-lg font-semibold mb-4 text-center\">Supplier Distribution by Category</h2>\n      <div className=\"text-center text-sm text-gray-500 mb-4\">\n        Showing estimated supplier availability by category\n      </div>\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart\n            data={chartData}\n            margin={{ top: 20, right: 30, left: 20, bottom: 60 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis \n              dataKey=\"name\" \n              angle={-45} \n              textAnchor=\"end\" \n              height={60} \n              interval={0}\n            />\n            <YAxis label={{ value: 'Available Suppliers', angle: -90, position: 'insideLeft' }} />\n            <Tooltip />\n            <Legend wrapperStyle={{ bottom: 0 }} />\n            {suppliers.map((supplier, index) => (\n              <Bar \n                key={supplier.supplier_id} \n                dataKey={supplier.supplier_name} \n                fill={colors[index]} \n                name={supplier.supplier_name}\n              />\n            ))}\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomOrderCategoryChart;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file://F%3A/JewelleryWEBApp/front_end/src/app/DashView/custom-orders/create/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport {\n  User,\n  Phone,\n  Mail,\n  Calendar,\n  DollarSign,\n  FileText,\n  Tag,\n  Upload,\n  CheckCircle,\n  X,\n  Image as ImageIcon\n} from 'lucide-react';\nimport Image from 'next/image';\nimport { formatCurrency } from '@/utils/formatters';\nimport CustomOrderCategoryChart from '@/components/CustomOrderCategoryChart';\n\n// Define types\ninterface Category {\n  category_id: number;\n  category_name: string;\n}\n\nconst CreateCustomOrderPage = () => {\n  const router = useRouter();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // State for form fields\n  const [customerName, setCustomerName] = useState('');\n  const [customerPhone, setCustomerPhone] = useState('');\n  const [customerEmail, setCustomerEmail] = useState('');\n  const [estimatedAmount, setEstimatedAmount] = useState<number>(0);\n  const [advanceAmount, setAdvanceAmount] = useState<number>(0);\n  const [balanceAmount, setBalanceAmount] = useState<number>(0);\n  const [estimatedCompletionDate, setEstimatedCompletionDate] = useState('');\n  const [categoryId, setCategoryId] = useState<number | null>(null);\n  const [description, setDescription] = useState('');\n  const [specialRequirements, setSpecialRequirements] = useState('');\n\n  // State for file uploads\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [previewUrls, setPreviewUrls] = useState<string[]>([]);\n\n  // State for data\n  const [categories, setCategories] = useState<Category[]>([]);\n\n  // State for UI\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [orderReference, setOrderReference] = useState<string | null>(null);\n\n  // Fetch categories on component mount\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:3002/categories');\n        if (response.ok) {\n          const data = await response.json();\n          setCategories(data);\n        } else {\n          console.error('Failed to fetch categories');\n        }\n      } catch (err) {\n        console.error('Error fetching categories:', err);\n      }\n    };\n\n    fetchCategories();\n  }, []);\n\n  // Calculate balance amount when estimated or advance amount changes\n  useEffect(() => {\n    setBalanceAmount(estimatedAmount - advanceAmount);\n  }, [estimatedAmount, advanceAmount]);\n\n  // Handle file selection\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n\n      // Limit to 5 files\n      const newFiles = files.slice(0, 5 - selectedFiles.length);\n\n      setSelectedFiles(prev => [...prev, ...newFiles]);\n\n      // Create preview URLs\n      const newPreviewUrls = newFiles.map(file => URL.createObjectURL(file));\n      setPreviewUrls(prev => [...prev, ...newPreviewUrls]);\n    }\n  };\n\n  // Handle file removal\n  const handleRemoveFile = (index: number) => {\n    // Revoke object URL to avoid memory leaks\n    URL.revokeObjectURL(previewUrls[index]);\n\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n    setPreviewUrls(prev => prev.filter((_, i) => i !== index));\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Validate form\n    if (!customerName.trim()) {\n      setError('Please enter customer name');\n      return;\n    }\n\n    if (estimatedAmount <= 0) {\n      setError('Estimated amount must be greater than zero');\n      return;\n    }\n\n    if (advanceAmount < 0) {\n      setError('Advance amount cannot be negative');\n      return;\n    }\n\n    if (advanceAmount > estimatedAmount) {\n      setError('Advance amount cannot be greater than estimated amount');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Get user info from localStorage\n      const userId = localStorage.getItem('userId');\n      const branchId = localStorage.getItem('branchId');\n\n      // Create FormData object\n      const formData = new FormData();\n      formData.append('customer_name', customerName);\n      formData.append('customer_phone', customerPhone);\n      formData.append('customer_email', customerEmail);\n      formData.append('estimated_amount', estimatedAmount.toString());\n      formData.append('advance_amount', advanceAmount.toString());\n\n      if (estimatedCompletionDate) {\n        formData.append('estimated_completion_date', estimatedCompletionDate);\n      }\n\n      if (categoryId) {\n        formData.append('category_id', categoryId.toString());\n      }\n\n      formData.append('description', description);\n      formData.append('special_requirements', specialRequirements);\n\n      if (userId) {\n        formData.append('created_by', userId);\n      }\n\n      if (branchId) {\n        formData.append('branch_id', branchId);\n      }\n\n      // Add files\n      selectedFiles.forEach(file => {\n        formData.append('images', file);\n      });\n\n      // Send request\n      const response = await fetch('http://localhost:3002/custom-orders/create', {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to create custom order');\n      }\n\n      const result = await response.json();\n\n      // Show success message\n      setSuccess('Custom order created successfully!');\n      setOrderReference(result.order_reference);\n      setShowSuccessModal(true);\n\n      // Reset form\n      setCustomerName('');\n      setCustomerPhone('');\n      setCustomerEmail('');\n      setEstimatedAmount(0);\n      setAdvanceAmount(0);\n      setEstimatedCompletionDate('');\n      setCategoryId(null);\n      setDescription('');\n      setSpecialRequirements('');\n      setSelectedFiles([]);\n      setPreviewUrls([]);\n\n    } catch (err) {\n      console.error('Error creating custom order:', err);\n      setError(err instanceof Error ? err.message : 'An error occurred while creating the custom order');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle cancel button\n  const handleCancel = () => {\n    router.back();\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <h1 className=\"text-2xl font-bold text-gray-800 mb-6\">Create Custom Order</h1>\n\n      {/* Error message */}\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\n          <span className=\"block sm:inline\">{error}</span>\n          <button\n            className=\"absolute top-0 bottom-0 right-0 px-4 py-3\"\n            onClick={() => setError(null)}\n          >\n            <X size={18} />\n          </button>\n        </div>\n      )}\n\n      {/* Success message */}\n      {success && !showSuccessModal && (\n        <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\">\n          <span className=\"block sm:inline\">{success}</span>\n          <button\n            className=\"absolute top-0 bottom-0 right-0 px-4 py-3\"\n            onClick={() => setSuccess(null)}\n          >\n            <X size={18} />\n          </button>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"md:col-span-2\">\n          <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-lg font-semibold mb-4\">Order Details</h2>\n\n            {/* Customer Information */}\n            <div className=\"mb-6 space-y-4\">\n              <div>\n                <label htmlFor=\"customerName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Customer Name *\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <User className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"text\"\n                    id=\"customerName\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Enter customer name\"\n                    value={customerName}\n                    onChange={(e) => setCustomerName(e.target.value)}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"customerPhone\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Phone Number\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <Phone className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"tel\"\n                    id=\"customerPhone\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Enter phone number\"\n                    value={customerPhone}\n                    onChange={(e) => setCustomerPhone(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"customerEmail\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Email Address\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <Mail className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"email\"\n                    id=\"customerEmail\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Enter email address\"\n                    value={customerEmail}\n                    onChange={(e) => setCustomerEmail(e.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Order Details */}\n            <div className=\"mb-6 space-y-4\">\n              <div>\n                <label htmlFor=\"category\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Category\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <Tag className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <select\n                    id=\"category\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    value={categoryId || ''}\n                    onChange={(e) => setCategoryId(e.target.value ? parseInt(e.target.value) : null)}\n                  >\n                    <option value=\"\">Select a category</option>\n                    {categories.map(category => (\n                      <option key={category.category_id} value={category.category_id}>\n                        {category.category_name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"estimatedCompletionDate\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Estimated Completion Date\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <Calendar className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"date\"\n                    id=\"estimatedCompletionDate\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    value={estimatedCompletionDate}\n                    onChange={(e) => setEstimatedCompletionDate(e.target.value)}\n                    min={new Date().toISOString().split('T')[0]}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Description\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <FileText className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <textarea\n                    id=\"description\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Describe the custom order\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"specialRequirements\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Special Requirements\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <FileText className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <textarea\n                    id=\"specialRequirements\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Any special requirements or instructions\"\n                    value={specialRequirements}\n                    onChange={(e) => setSpecialRequirements(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Payment Details */}\n            <div className=\"mb-6 space-y-4\">\n              <div>\n                <label htmlFor=\"estimatedAmount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Estimated Amount *\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"estimatedAmount\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"0.00\"\n                    value={estimatedAmount || ''}\n                    onChange={(e) => setEstimatedAmount(parseFloat(e.target.value) || 0)}\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"advanceAmount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Advance Payment\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"advanceAmount\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"0.00\"\n                    value={advanceAmount || ''}\n                    onChange={(e) => setAdvanceAmount(parseFloat(e.target.value) || 0)}\n                    min=\"0\"\n                    max={estimatedAmount}\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"balanceAmount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Balance Amount\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"balanceAmount\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md bg-gray-50 focus:ring-yellow-500 focus:border-yellow-500\"\n                    value={balanceAmount || ''}\n                    readOnly\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Image Upload */}\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Reference Images (Optional)\n              </label>\n              <div className=\"border-2 border-dashed border-gray-300 rounded-md p-6 flex flex-col items-center\">\n                <div className=\"flex items-center justify-center w-full\">\n                  <label\n                    htmlFor=\"fileUpload\"\n                    className=\"flex flex-col items-center justify-center w-full h-32 cursor-pointer bg-gray-50 hover:bg-gray-100 rounded-lg\"\n                  >\n                    <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                      <Upload className=\"w-10 h-10 mb-3 text-gray-400\" />\n                      <p className=\"mb-2 text-sm text-gray-500\">\n                        <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        PNG, JPG or GIF (MAX. 5 files, 5MB each)\n                      </p>\n                    </div>\n                    <input\n                      id=\"fileUpload\"\n                      type=\"file\"\n                      className=\"hidden\"\n                      accept=\"image/*\"\n                      multiple\n                      onChange={handleFileChange}\n                      ref={fileInputRef}\n                      disabled={selectedFiles.length >= 5}\n                    />\n                  </label>\n                </div>\n\n                {/* Preview selected images */}\n                {previewUrls.length > 0 && (\n                  <div className=\"mt-4 grid grid-cols-2 sm:grid-cols-3 gap-4 w-full\">\n                    {previewUrls.map((url, index) => (\n                      <div key={index} className=\"relative\">\n                        <div className=\"relative h-24 w-full rounded-md overflow-hidden border border-gray-200\">\n                          <Image\n                            src={url}\n                            alt={`Preview ${index + 1}`}\n                            fill\n                            style={{ objectFit: 'cover' }}\n                          />\n                        </div>\n                        <button\n                          type=\"button\"\n                          className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1\"\n                          onClick={() => handleRemoveFile(index)}\n                        >\n                          <X size={14} />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-between\">\n              <button\n                type=\"button\"\n                onClick={handleCancel}\n                className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-yellow-500 hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n                disabled={loading}\n              >\n                {loading ? 'Processing...' : 'Create Custom Order'}\n              </button>\n            </div>\n          </form>\n        </div>\n\n        {/* Supplier vs Category Graph */}\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-lg font-semibold mb-4\">Supplier Distribution by Category</h2>\n          <CustomOrderCategoryChart />\n        </div>\n      </div>\n\n      {/* Success Modal */}\n      {showSuccessModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-8 rounded-lg shadow-lg max-w-md w-full\">\n            <div className=\"flex items-center justify-center mb-4 text-green-500\">\n              <CheckCircle size={48} />\n            </div>\n            <h2 className=\"text-2xl font-bold text-center mb-4\">Order Created!</h2>\n            <p className=\"text-center mb-2\">Your custom order has been created successfully.</p>\n            {orderReference && (\n              <p className=\"text-center font-semibold mb-6\">Reference: {orderReference}</p>\n            )}\n            <div className=\"flex justify-center space-x-4\">\n              <button\n                onClick={() => {\n                  setShowSuccessModal(false);\n                  router.push('/DashView/custom-orders');\n                }}\n                className=\"px-4 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600\"\n              >\n                View All Orders\n              </button>\n              <button\n                onClick={() => {\n                  setShowSuccessModal(false);\n                }}\n                className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300\"\n              >\n                Create Another\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CreateCustomOrderPage;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1442, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}