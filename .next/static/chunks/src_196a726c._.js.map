{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/utils/formatters.ts"],"sourcesContent":["/**\n * Format a number as currency\n * @param value The number to format\n * @param locale The locale to use for formatting (default: 'en-US')\n * @param currency The currency code (default: 'LKR')\n * @returns Formatted currency string\n */\nexport const formatCurrency = (\n  value: number | string,\n  locale: string = 'en-US',\n  currency: string = 'LKR'\n): string => {\n  // Convert to number if it's a string\n  const numericValue = typeof value === 'string' ? parseFloat(value) : value;\n\n  // Handle NaN values\n  if (isNaN(numericValue)) {\n    console.warn('Invalid value for currency formatting:', value);\n    return 'Rs. 0.00';\n  }\n\n  // Use the Sri Lankan Rupee symbol (Rs) instead of LKR text\n  return 'Rs. ' + new Intl.NumberFormat(locale, {\n    style: 'decimal',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(numericValue);\n};\n\n/**\n * Format a date string\n * @param dateString The date string to format\n * @param locale The locale to use for formatting (default: 'en-US')\n * @returns Formatted date string\n */\nexport const formatDate = (\n  dateString: string,\n  locale: string = 'en-US'\n): string => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat(locale, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  }).format(date);\n};\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;;AACM,MAAM,iBAAiB,CAC5B,OACA,SAAiB,OAAO,EACxB,WAAmB,KAAK;IAExB,qCAAqC;IACrC,MAAM,eAAe,OAAO,UAAU,WAAW,WAAW,SAAS;IAErE,oBAAoB;IACpB,IAAI,MAAM,eAAe;QACvB,QAAQ,IAAI,CAAC,0CAA0C;QACvD,OAAO;IACT;IAEA,2DAA2D;IAC3D,OAAO,SAAS,IAAI,KAAK,YAAY,CAAC,QAAQ;QAC5C,OAAO;QACP,uBAAuB;QACvB,uBAAuB;IACzB,GAAG,MAAM,CAAC;AACZ;AAQO,MAAM,aAAa,CACxB,YACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,OAAO,IAAI,KAAK,cAAc,CAAC,QAAQ;QACrC,MAAM;QACN,OAAO;QACP,KAAK;QACL,MAAM;QACN,QAAQ;QACR,QAAQ;IACV,GAAG,MAAM,CAAC;AACZ","debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/components/ImprovedCategoryChart.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\ninterface ChartProps {\n  selectedCategory: string;\n  onSupplierSelect?: (supplierId: string, supplierName: string) => void;\n}\n\ninterface Supplier {\n  supplier_id: string;\n  name: string; // Primary name field from database\n  supplier_name?: string; // For backward compatibility\n  category?: string;\n  manufacturing_items?: string;\n  order_count?: number; // Number of orders for this supplier\n}\n\ninterface OrderStat {\n  supplier_id: string;\n  name: string;\n  category: string;\n  order_count: number;\n}\n\ninterface ChartDataItem {\n  name: string;\n  categoryId?: number;\n  [key: string]: any;\n}\n\nconst ImprovedCategoryChart: React.FC<ChartProps> = ({ selectedCategory, onSupplierSelect }) => {\n  const [chartData, setChartData] = useState<ChartDataItem[]>([]);\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Skip if no category is selected\n        if (!selectedCategory) {\n          setChartData([]);\n          setLoading(false);\n          return;\n        }\n\n        console.log(`Fetching suppliers for category: ${selectedCategory}`);\n\n        // Add a timestamp to prevent caching and ensure fresh data\n        const timestamp = new Date().getTime();\n\n        // First, fetch all suppliers from the database\n        const suppliersResponse = await fetch(`http://localhost:3002/suppliers?t=${timestamp}`);\n        if (!suppliersResponse.ok) {\n          throw new Error(`Failed to fetch suppliers: ${suppliersResponse.status}`);\n        }\n\n        let suppliersData = await suppliersResponse.json() as Supplier[];\n        console.log('Fetched suppliers:', suppliersData);\n\n        // Filter suppliers by category if a specific category is selected\n        if (selectedCategory !== 'All') {\n          suppliersData = suppliersData.filter(supplier =>\n            supplier.category === selectedCategory ||\n            (supplier.manufacturing_items && supplier.manufacturing_items.includes(selectedCategory))\n          );\n          console.log(`Filtered suppliers for category ${selectedCategory}:`, suppliersData);\n        }\n\n        // Fetch actual order counts for suppliers in this category\n        const orderStatsResponse = await fetch(`http://localhost:3002/suppliers/actual-orders/${selectedCategory}`);\n        if (!orderStatsResponse.ok) {\n          throw new Error(`Failed to fetch order stats: ${orderStatsResponse.status}`);\n        }\n\n        const orderStatsData = await orderStatsResponse.json() as OrderStat[];\n        console.log('Fetched order stats:', orderStatsData);\n\n        // Create a map of supplier ID to order count\n        const supplierOrderCounts = new Map<string, number>();\n        orderStatsData.forEach((stat: OrderStat) => {\n          if (stat.category === selectedCategory) {\n            supplierOrderCounts.set(stat.supplier_id.toString(), stat.order_count);\n          }\n        });\n\n        // Update suppliers with order counts and sort by order count (highest first)\n        suppliersData = suppliersData.map(supplier => ({\n          ...supplier,\n          order_count: supplierOrderCounts.get(supplier.supplier_id.toString()) || 0\n        })).sort((a, b) => (b.order_count || 0) - (a.order_count || 0));\n\n        // Store the suppliers for the chart\n        setSuppliers(suppliersData);\n\n        // Create chart data for the selected category\n        const item: ChartDataItem = {\n          name: selectedCategory\n        };\n\n        // Add suppliers with their order counts\n        suppliersData.forEach(supplier => {\n          const supplierName = supplier.name || supplier.supplier_name || `Supplier ${supplier.supplier_id}`;\n          item[supplierName] = supplier.order_count || 0;\n        });\n\n        const finalChartData = [item];\n        console.log('Final chart data:', finalChartData);\n        setChartData(finalChartData);\n      } catch (err) {\n        console.error('Error fetching chart data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch chart data');\n\n        // Fallback to empty data\n        setChartData([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [selectedCategory]);\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center h-64\">\n      <div className=\"w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin\"></div>\n    </div>;\n  }\n\n  if (error) {\n    return <div className=\"text-red-500\">Error loading chart: {error}</div>;\n  }\n\n  if (chartData.length === 0) {\n    return <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold mb-6 text-center\">Supplier Order Counts by Category</h2>\n      <div className=\"text-right mb-2\">\n        <span className=\"inline-block bg-yellow-400 w-4 h-4 mr-2\"></span>\n        <span className=\"text-sm\">{selectedCategory === 'All' ? 'All Categories' : selectedCategory}</span>\n      </div>\n      <div className=\"text-center py-10 text-gray-500\">\n        {selectedCategory ?\n          `No order data found for ${selectedCategory === 'All' ? 'any category' : `the ${selectedCategory} category`}. Please select a different category or check if there are orders for this category.` :\n          'Please select a category to see supplier order counts'}\n      </div>\n    </div>;\n  }\n\n  // Generate colors for suppliers\n  const colors = suppliers.map((_, index) => {\n    const colorPalette = [\n      '#FFDD00', // Yellow\n      '#FFB347', // Pastel Orange\n      '#FF6B6B', // Light Red\n      '#4ECDC4', // Turquoise\n      '#7FB800', // Apple Green\n      '#9D81BA', // Light Purple\n      '#FF8066', // Salmon\n      '#45B7D1', // Sky Blue\n      '#EF798A', // Pink\n      '#7D82B8'  // Periwinkle\n    ];\n    return colorPalette[index % colorPalette.length];\n  });\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold mb-6 text-center\">Supplier Order Counts by Category</h2>\n\n      <div className=\"text-right mb-2\">\n        <span className=\"inline-block bg-yellow-400 w-4 h-4 mr-2\"></span>\n        <span className=\"text-sm\">{selectedCategory === 'All' ? 'All Categories' : selectedCategory}</span>\n      </div>\n\n      <div className=\"text-center text-sm text-gray-500 mb-4\">\n        Showing supplier order counts for {selectedCategory === 'All' ? 'all categories' : `the ${selectedCategory} category`}\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart\n            data={chartData}\n            margin={{ top: 20, right: 30, left: 20, bottom: 60 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"name\"\n              angle={-45}\n              textAnchor=\"end\"\n              height={60}\n              interval={0}\n            />\n            <YAxis label={{ value: 'Order Count', angle: -90, position: 'insideLeft' }} />\n            <Tooltip />\n            <Legend wrapperStyle={{ bottom: 0 }} />\n            {suppliers.map((supplier, index) => {\n              const supplierName = supplier.name || supplier.supplier_name || `Supplier ${supplier.supplier_id}`;\n              return (\n                <Bar\n                  key={supplier.supplier_id}\n                  dataKey={supplierName}\n                  fill={colors[index]}\n                  name={supplierName}\n                />\n              );\n            })}\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default ImprovedCategoryChart;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/components/LKRIcon.tsx"],"sourcesContent":["import React from 'react';\n\ninterface LKRIconProps {\n  className?: string;\n}\n\nconst LKRIcon: React.FC<LKRIconProps> = ({ className = 'h-5 w-5 text-gray-400' }) => {\n  return (\n    <div className={`flex items-center justify-center font-semibold ${className}`}>\n      Rs.\n    </div>\n  );\n};\n\nexport default LKRIcon;\n"],"names":[],"mappings":";;;;;AAMA,MAAM,UAAkC,CAAC,EAAE,YAAY,uBAAuB,EAAE;IAC9E,qBACE,6LAAC;QAAI,WAAW,CAAC,+CAA+C,EAAE,WAAW;kBAAE;;;;;;AAInF;KANM;uCAQS","debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/custom-orders/create/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport {\n  User,\n  Phone,\n  Mail,\n  Calendar,\n  FileText,\n  Tag,\n  Upload,\n  CheckCircle,\n  X\n} from 'lucide-react';\nimport Image from 'next/image';\nimport { formatCurrency } from '@/utils/formatters';\nimport ImprovedCategoryChart from '@/components/ImprovedCategoryChart';\nimport LKRIcon from '@/components/LKRIcon';\n\n// Define types\ninterface Category {\n  category_id: number;\n  category_name: string;\n}\n\nconst CreateCustomOrderPage = () => {\n  const router = useRouter();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // State for form fields\n  const [customerName, setCustomerName] = useState('');\n  const [customerPhone, setCustomerPhone] = useState('');\n  const [customerEmail, setCustomerEmail] = useState('');\n  const [estimatedAmount, setEstimatedAmount] = useState<number>(0);\n  const [advanceAmount, setAdvanceAmount] = useState<number>(0);\n  const [balanceAmount, setBalanceAmount] = useState<number>(0);\n  const [estimatedCompletionDate, setEstimatedCompletionDate] = useState('');\n  const [categoryId, setCategoryId] = useState<number | null>(null);\n  const [description, setDescription] = useState('');\n  const [specialRequirements, setSpecialRequirements] = useState('');\n\n  // State for file uploads\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [previewUrls, setPreviewUrls] = useState<string[]>([]);\n\n  // Define Supplier interface\n  interface Supplier {\n    supplier_id: number | string;\n    name: string;\n    supplier_name?: string; // Some suppliers might use this field instead of name\n    category?: string;\n    manufacturing_items?: string; // Items the supplier manufactures\n    order_count?: number; // Number of orders for this supplier\n  }\n\n  // State for data\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\n  const [selectedSupplierId, setSelectedSupplierId] = useState<string>('');\n\n  // State for UI\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [orderReference, setOrderReference] = useState<string | null>(null);\n\n  // Fetch categories and suppliers on component mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch categories\n        const categoriesResponse = await fetch('http://localhost:3002/categories');\n        if (categoriesResponse.ok) {\n          const categoriesData = await categoriesResponse.json();\n          setCategories(categoriesData);\n        } else {\n          console.error('Failed to fetch categories');\n        }\n\n        // Fetch suppliers\n        const suppliersResponse = await fetch('http://localhost:3002/suppliers');\n        if (suppliersResponse.ok) {\n          const suppliersData = await suppliersResponse.json();\n          setSuppliers(suppliersData);\n        } else {\n          console.error('Failed to fetch suppliers');\n        }\n      } catch (err) {\n        console.error('Error fetching data:', err);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Calculate balance amount and minimum advance payment when estimated amount changes\n  useEffect(() => {\n    setBalanceAmount(estimatedAmount - advanceAmount);\n  }, [estimatedAmount, advanceAmount]);\n\n  // Calculate minimum advance payment (25% of estimated amount)\n  const minAdvancePayment = estimatedAmount * 0.25;\n\n  // Handle file selection\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n\n      // Limit to 5 files\n      const newFiles = files.slice(0, 5 - selectedFiles.length);\n\n      setSelectedFiles(prev => [...prev, ...newFiles]);\n\n      // Create preview URLs\n      const newPreviewUrls = newFiles.map(file => URL.createObjectURL(file));\n      setPreviewUrls(prev => [...prev, ...newPreviewUrls]);\n    }\n  };\n\n  // Handle file removal\n  const handleRemoveFile = (index: number) => {\n    // Revoke object URL to avoid memory leaks\n    URL.revokeObjectURL(previewUrls[index]);\n\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n    setPreviewUrls(prev => prev.filter((_, i) => i !== index));\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Validate form\n    if (!customerName.trim()) {\n      setError('Please enter customer name');\n      return;\n    }\n\n    if (estimatedAmount <= 0) {\n      setError('Estimated amount must be greater than zero');\n      return;\n    }\n\n    if (advanceAmount < 0) {\n      setError('Advance amount cannot be negative');\n      return;\n    }\n\n    if (advanceAmount > estimatedAmount) {\n      setError('Advance amount cannot be greater than estimated amount');\n      return;\n    }\n\n    // Check if advance payment meets the minimum 25% requirement\n    if (advanceAmount < minAdvancePayment) {\n      const confirmProceed = window.confirm(\n        `Warning: The advance payment (Rs. ${advanceAmount.toLocaleString()}) is below the minimum required amount of Rs. ${minAdvancePayment.toLocaleString()} (25% of the estimated amount).\\n\\n` +\n        `According to the payment policy, the first payment must be at least 25% of the total amount, and the remaining balance must be paid within the next 2 payments.\\n\\n` +\n        `Do you want to proceed anyway?`\n      );\n\n      if (!confirmProceed) {\n        return;\n      }\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Get user info from localStorage\n      const userId = localStorage.getItem('userId');\n      const branchId = localStorage.getItem('branchId');\n\n      // Create FormData object\n      const formData = new FormData();\n      formData.append('customer_name', customerName);\n      formData.append('customer_phone', customerPhone);\n      formData.append('customer_email', customerEmail);\n      formData.append('estimated_amount', estimatedAmount.toString());\n      formData.append('advance_amount', advanceAmount.toString());\n\n      if (estimatedCompletionDate) {\n        formData.append('estimated_completion_date', estimatedCompletionDate);\n      }\n\n      if (categoryId) {\n        formData.append('category_id', categoryId.toString());\n      }\n\n      // Add selected supplier if available\n      if (selectedSupplierId) {\n        // Try to convert to a number if it's a string\n        const numericId = parseInt(selectedSupplierId, 10);\n        if (!isNaN(numericId)) {\n          formData.append('supplier_id', numericId.toString());\n          console.log(`Adding supplier ID ${numericId} (numeric) to the form submission`);\n        } else {\n          formData.append('supplier_id', selectedSupplierId);\n          console.log(`Adding supplier ID ${selectedSupplierId} (string) to the form submission`);\n        }\n      }\n\n      formData.append('description', description);\n      formData.append('special_requirements', specialRequirements);\n\n      if (userId) {\n        formData.append('created_by', userId);\n      }\n\n      if (branchId) {\n        formData.append('branch_id', branchId);\n      }\n\n      // File uploads are now handled separately to avoid form submission issues\n      console.log('File uploads are now handled separately');\n\n      // Log all form data for debugging\n      console.log('Form data being sent to server:');\n      for (const [key, value] of formData.entries()) {\n        console.log(`${key}: ${value}`);\n      }\n\n      // Double-check if supplier_id is included\n      if (selectedSupplierId && !formData.has('supplier_id')) {\n        console.log(`Adding supplier_id ${selectedSupplierId} to form data (double-check)`);\n        formData.append('supplier_id', selectedSupplierId);\n      }\n\n      // Convert FormData to a regular object for JSON submission\n      const formDataObj: Record<string, any> = {};\n      for (const [key, value] of formData.entries()) {\n        // Convert numeric strings to numbers for the database\n        if (key === 'supplier_id' || key === 'category_id' || key === 'created_by' || key === 'branch_id') {\n          const numValue = parseInt(value.toString(), 10);\n          if (!isNaN(numValue)) {\n            formDataObj[key] = numValue; // Store as number, not string\n            console.log(`Converting ${key} from string \"${value}\" to number ${numValue}`);\n          } else {\n            formDataObj[key] = value;\n          }\n        } else {\n          formDataObj[key] = value;\n        }\n      }\n\n      // ALWAYS include supplier_id if it's selected - ensure it's a number for the database\n      if (selectedSupplierId) {\n        const numericId = parseInt(selectedSupplierId, 10);\n        if (!isNaN(numericId)) {\n          console.log(`Adding supplier_id ${numericId} (numeric) to JSON data`);\n          formDataObj.supplier_id = numericId; // Store as number, not string\n        } else {\n          console.log(`Adding supplier_id ${selectedSupplierId} (string) to JSON data`);\n          formDataObj.supplier_id = selectedSupplierId;\n        }\n\n        // Log the supplier details for debugging\n        const supplier = suppliers.find(s => s.supplier_id.toString() === selectedSupplierId);\n        console.log('Selected supplier details:', supplier);\n      }\n\n      // Final check to ensure supplier_id is included\n      console.log('Final formDataObj with supplier_id:', formDataObj);\n\n      console.log('Sending JSON data to server:', formDataObj);\n\n      // Ensure supplier_id is included in the request body\n      if (selectedSupplierId) {\n        const numericId = parseInt(selectedSupplierId, 10);\n        if (!isNaN(numericId)) {\n          formDataObj.supplier_id = numericId;\n        }\n      }\n\n      // Send request as JSON instead of FormData\n      const response = await fetch('http://localhost:3002/custom-orders/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(formDataObj)\n      });\n\n      // Clone the response so we can read it multiple times if needed\n      const responseClone = response.clone();\n\n      if (!response.ok) {\n        // First try to get the response as text\n        const errorText = await responseClone.text();\n        console.error('Server error response:', errorText);\n\n        // Then try to parse it as JSON if possible\n        try {\n          const errorData = JSON.parse(errorText);\n          throw new Error(errorData.message || 'Failed to create custom order');\n        } catch (jsonError) {\n          // If it's not valid JSON, use the status text\n          throw new Error(`Server error: ${response.status} ${response.statusText}`);\n        }\n      }\n\n      let result;\n      try {\n        result = await response.json();\n      } catch (jsonError) {\n        console.error('Error parsing success response:', jsonError);\n        throw new Error('Invalid response from server');\n      }\n\n      // Show success message\n      setSuccess('Custom order created successfully!');\n      setOrderReference(result.order_reference);\n      setShowSuccessModal(true);\n\n      // Reset form\n      setCustomerName('');\n      setCustomerPhone('');\n      setCustomerEmail('');\n      setEstimatedAmount(0);\n      setAdvanceAmount(0);\n      setEstimatedCompletionDate('');\n      setCategoryId(null);\n      setDescription('');\n      setSpecialRequirements('');\n      setSelectedSupplierId('');\n      setSelectedFiles([]);\n      setPreviewUrls([]);\n\n    } catch (err) {\n      console.error('Error creating custom order:', err);\n      setError(err instanceof Error ? err.message : 'An error occurred while creating the custom order');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle cancel button\n  const handleCancel = () => {\n    router.back();\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <h1 className=\"text-2xl font-bold text-gray-800 mb-6\">Create Custom Order</h1>\n\n      {/* Error message */}\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\n          <span className=\"block sm:inline\">{error}</span>\n          <button\n            className=\"absolute top-0 bottom-0 right-0 px-4 py-3\"\n            onClick={() => setError(null)}\n          >\n            <X size={18} />\n          </button>\n        </div>\n      )}\n\n      {/* Success message */}\n      {success && !showSuccessModal && (\n        <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\">\n          <span className=\"block sm:inline\">{success}</span>\n          <button\n            className=\"absolute top-0 bottom-0 right-0 px-4 py-3\"\n            onClick={() => setSuccess(null)}\n          >\n            <X size={18} />\n          </button>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"md:col-span-2\">\n          <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-lg font-semibold mb-4\">Order Details</h2>\n\n            {/* Customer Information */}\n            <div className=\"mb-6 space-y-4\">\n              <div>\n                <label htmlFor=\"customerName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Customer Name *\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <User className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"text\"\n                    id=\"customerName\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Enter customer name\"\n                    value={customerName}\n                    onChange={(e) => setCustomerName(e.target.value)}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"customerPhone\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Phone Number\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <Phone className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"tel\"\n                    id=\"customerPhone\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Enter phone number\"\n                    value={customerPhone}\n                    onChange={(e) => setCustomerPhone(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"customerEmail\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Email Address\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <Mail className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"email\"\n                    id=\"customerEmail\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Enter email address\"\n                    value={customerEmail}\n                    onChange={(e) => setCustomerEmail(e.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Order Details */}\n            <div className=\"mb-6 space-y-4\">\n              <div>\n                <label htmlFor=\"category\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Category\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <Tag className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <select\n                    id=\"category\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    value={categoryId || ''}\n                    onChange={(e) => setCategoryId(e.target.value ? parseInt(e.target.value) : null)}\n                  >\n                    <option value=\"\">Select a category</option>\n                    {categories.map(category => (\n                      <option key={category.category_id} value={category.category_id}>\n                        {category.category_name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              {/* Supplier Selection Dropdown */}\n              <div>\n                <label htmlFor=\"supplier\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Supplier\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <User className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <select\n                    id=\"supplier\"\n                    name=\"supplier_id\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    value={selectedSupplierId || ''}\n                    onChange={(e) => {\n                      const supplierId = e.target.value;\n                      setSelectedSupplierId(supplierId);\n                      console.log(`Selected supplier ID from dropdown: ${supplierId}`);\n                    }}\n                  >\n                    <option value=\"\">Select a supplier</option>\n                    {suppliers\n                      .filter(supplier =>\n                        !categoryId ||\n                        supplier.category === categories.find(c => c.category_id === categoryId)?.category_name ||\n                        (supplier.manufacturing_items && categories.find(c => c.category_id === categoryId)?.category_name &&\n                         supplier.manufacturing_items.includes(categories.find(c => c.category_id === categoryId)?.category_name || ''))\n                      )\n                      .map(supplier => (\n                        <option key={supplier.supplier_id} value={supplier.supplier_id}>\n                          {supplier.name || supplier.supplier_name || `Supplier ${supplier.supplier_id}`}\n                        </option>\n                      ))\n                    }\n                  </select>\n                </div>\n              </div>\n\n              {/* Selected Supplier Display */}\n              {selectedSupplierId && (\n                <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded-md\">\n                  <p className=\"text-sm text-yellow-800\">\n                    <span className=\"font-medium\">Selected Supplier:</span> {\n                      // Find the supplier name from the ID\n                      (() => {\n                        const supplier = suppliers.find(s => s.supplier_id.toString() === selectedSupplierId);\n                        return supplier ? supplier.name : `Supplier ID: ${selectedSupplierId}`;\n                      })()\n                    }\n                  </p>\n                </div>\n              )}\n\n              <div>\n                <label htmlFor=\"estimatedCompletionDate\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Estimated Completion Date\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <Calendar className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"date\"\n                    id=\"estimatedCompletionDate\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    value={estimatedCompletionDate}\n                    onChange={(e) => setEstimatedCompletionDate(e.target.value)}\n                    min={new Date().toISOString().split('T')[0]}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Description\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <FileText className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <textarea\n                    id=\"description\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Describe the custom order\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"specialRequirements\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Special Requirements\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <FileText className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <textarea\n                    id=\"specialRequirements\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"Any special requirements or instructions\"\n                    value={specialRequirements}\n                    onChange={(e) => setSpecialRequirements(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Payment Details */}\n            <div className=\"mb-6 space-y-4\">\n              <div>\n                <label htmlFor=\"estimatedAmount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Estimated Amount *\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <LKRIcon className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"estimatedAmount\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500\"\n                    placeholder=\"0.00\"\n                    value={estimatedAmount || ''}\n                    onChange={(e) => setEstimatedAmount(parseFloat(e.target.value) || 0)}\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"advanceAmount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Advance Payment <span className=\"text-xs text-yellow-600\">(Min: 25% of Estimated Amount)</span>\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <LKRIcon className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"advanceAmount\"\n                    className={`block w-full pl-10 p-2 border ${advanceAmount < minAdvancePayment && estimatedAmount > 0 ? 'border-yellow-500 bg-yellow-50' : 'border-gray-300'} rounded-md focus:ring-yellow-500 focus:border-yellow-500`}\n                    placeholder=\"0.00\"\n                    value={advanceAmount || ''}\n                    onChange={(e) => setAdvanceAmount(parseFloat(e.target.value) || 0)}\n                    min=\"0\"\n                    max={estimatedAmount}\n                    step=\"0.01\"\n                  />\n                </div>\n                {estimatedAmount > 0 && (\n                  <p className={`mt-1 text-sm ${advanceAmount < minAdvancePayment ? 'text-yellow-600' : 'text-gray-500'}`}>\n                    Recommended minimum: {formatCurrency(minAdvancePayment)}\n                    {advanceAmount < minAdvancePayment && advanceAmount > 0 && (\n                      <span className=\"ml-1 text-yellow-600\">\n                        (Current: {((advanceAmount / estimatedAmount) * 100).toFixed(1)}%)\n                      </span>\n                    )}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"balanceAmount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Balance Amount\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <LKRIcon className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"balanceAmount\"\n                    className=\"block w-full pl-10 p-2 border border-gray-300 rounded-md bg-gray-50 focus:ring-yellow-500 focus:border-yellow-500\"\n                    value={balanceAmount || ''}\n                    readOnly\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Image Upload */}\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Reference Images (Optional)\n              </label>\n              <div className=\"border-2 border-dashed border-gray-300 rounded-md p-6 flex flex-col items-center\">\n                <div className=\"flex items-center justify-center w-full\">\n                  <label\n                    htmlFor=\"fileUpload\"\n                    className=\"flex flex-col items-center justify-center w-full h-32 cursor-pointer bg-gray-50 hover:bg-gray-100 rounded-lg\"\n                  >\n                    <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                      <Upload className=\"w-10 h-10 mb-3 text-gray-400\" />\n                      <p className=\"mb-2 text-sm text-gray-500\">\n                        <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        PNG, JPG or GIF (MAX. 5 files, 5MB each)\n                      </p>\n                    </div>\n                    <input\n                      id=\"fileUpload\"\n                      type=\"file\"\n                      className=\"hidden\"\n                      accept=\"image/*\"\n                      multiple\n                      onChange={handleFileChange}\n                      ref={fileInputRef}\n                      disabled={selectedFiles.length >= 5}\n                    />\n                  </label>\n                </div>\n\n                {/* Preview selected images */}\n                {previewUrls.length > 0 && (\n                  <div className=\"mt-4 grid grid-cols-2 sm:grid-cols-3 gap-4 w-full\">\n                    {previewUrls.map((url, index) => (\n                      <div key={index} className=\"relative\">\n                        <div className=\"relative h-24 w-full rounded-md overflow-hidden border border-gray-200\">\n                          <Image\n                            src={url}\n                            alt={`Preview ${index + 1}`}\n                            fill\n                            style={{ objectFit: 'cover' }}\n                          />\n                        </div>\n                        <button\n                          type=\"button\"\n                          className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1\"\n                          onClick={() => handleRemoveFile(index)}\n                        >\n                          <X size={14} />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Supplier ID is now handled by the dropdown */}\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-between\">\n              <button\n                type=\"button\"\n                onClick={handleCancel}\n                className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-yellow-500 hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n                disabled={loading}\n              >\n                {loading ? 'Processing...' : 'Create Custom Order'}\n              </button>\n            </div>\n          </form>\n        </div>\n\n        {/* Supplier vs Category Graph */}\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-lg font-semibold mb-4\">Supplier Order Counts by Category</h2>\n          <ImprovedCategoryChart\n            selectedCategory={categoryId ? categories.find(c => c.category_id === categoryId)?.category_name || 'All' : 'All'}\n          />\n        </div>\n      </div>\n\n      {/* Success Modal */}\n      {showSuccessModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-8 rounded-lg shadow-lg max-w-md w-full\">\n            <div className=\"flex items-center justify-center mb-4 text-green-500\">\n              <CheckCircle size={48} />\n            </div>\n            <h2 className=\"text-2xl font-bold text-center mb-4\">Order Created!</h2>\n            <p className=\"text-center mb-2\">Your custom order has been created successfully.</p>\n            {orderReference && (\n              <p className=\"text-center font-semibold mb-6\">Reference: {orderReference}</p>\n            )}\n            <div className=\"flex justify-center space-x-4\">\n              <button\n                onClick={() => {\n                  setShowSuccessModal(false);\n                  router.push('/DashView/custom-orders');\n                }}\n                className=\"px-4 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600\"\n              >\n                View All Orders\n              </button>\n              <button\n                onClick={() => {\n                  setShowSuccessModal(false);\n                }}\n                className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300\"\n              >\n                Create Another\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CreateCustomOrderPage;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1865, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}