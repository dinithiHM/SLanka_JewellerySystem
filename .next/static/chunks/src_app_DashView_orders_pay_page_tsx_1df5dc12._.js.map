{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JewelleryWEBApp/front_end/src/app/DashView/orders/pay/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport Image from 'next/image';\n\nconst OrderPaymentPage = () => {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n\n  // Get query parameters\n  const orderIdFromQuery = searchParams.get('order_id');\n  const categoryFromQuery = searchParams.get('category');\n  const supplierIdFromQuery = searchParams.get('supplier_id');\n  const quantityFromQuery = searchParams.get('quantity');\n  const offerGoldFromQuery = searchParams.get('offer_gold');\n  const selectedKaratsFromQuery = searchParams.get('selected_karats');\n  const karatValuesFromQuery = searchParams.get('karat_values');\n\n  // Gold and pricing details\n  const goldPricePerGramFromQuery = searchParams.get('gold_price_per_gram');\n  const selectedKaratFromQuery = searchParams.get('selected_karat');\n  const goldPurityFromQuery = searchParams.get('gold_purity');\n  const weightInGramsFromQuery = searchParams.get('weight_in_grams');\n  const makingChargesFromQuery = searchParams.get('making_charges');\n  const additionalMaterialsChargesFromQuery = searchParams.get('additional_materials_charges');\n  const baseEstimatedPriceFromQuery = searchParams.get('base_estimated_price');\n  const estimatedPriceFromQuery = searchParams.get('estimated_price');\n  const totalAmountFromQuery = searchParams.get('total_amount');\n\n  // Payment information\n  const advancePaymentFromQuery = searchParams.get('advance_payment');\n  const remainingBalanceFromQuery = searchParams.get('remaining_balance');\n  const paymentStatusFromQuery = searchParams.get('payment_status');\n  const designImageUrlFromQuery = searchParams.get('design_image_url');\n\n  // State for form fields\n  const [orderId] = useState(orderIdFromQuery || '');\n  const [category] = useState(categoryFromQuery || '');\n  const [supplier] = useState(supplierIdFromQuery || '');\n  const [quantity] = useState(quantityFromQuery ? parseInt(quantityFromQuery, 10) : 20);\n  const [goldPricePerGram] = useState(goldPricePerGramFromQuery ? parseFloat(goldPricePerGramFromQuery) : 0);\n  const [selectedKarat] = useState(selectedKaratFromQuery || '24K');\n  const [goldPurity] = useState(goldPurityFromQuery ? parseFloat(goldPurityFromQuery) : 0.999);\n  const [weightInGrams] = useState(weightInGramsFromQuery ? parseFloat(weightInGramsFromQuery) : 0);\n  const [makingCharges, setMakingCharges] = useState(makingChargesFromQuery ? parseFloat(makingChargesFromQuery) : 0);\n  const [additionalMaterialsCharges] = useState(additionalMaterialsChargesFromQuery ? parseFloat(additionalMaterialsChargesFromQuery) : 0);\n  const [baseEstimatedPrice] = useState(baseEstimatedPriceFromQuery ? parseFloat(baseEstimatedPriceFromQuery) : 0);\n  const [estimatedPrice, setEstimatedPrice] = useState(estimatedPriceFromQuery ? parseFloat(estimatedPriceFromQuery) : 0);\n  const [totalAmount, setTotalAmount] = useState(totalAmountFromQuery ? parseFloat(totalAmountFromQuery) : 0);\n\n  // For advance payments\n  const [currentPaymentAmount, setCurrentPaymentAmount] = useState(0); // The new payment being made now\n  const [existingAdvancePayment, setExistingAdvancePayment] = useState(\n    advancePaymentFromQuery ? parseFloat(advancePaymentFromQuery) : 0\n  ); // Previously paid amount\n  const [totalAdvancePayment, setTotalAdvancePayment] = useState(\n    advancePaymentFromQuery ? parseFloat(advancePaymentFromQuery) : 0\n  ); // Total of existing + current\n  const [minAdvancePayment, setMinAdvancePayment] = useState(0); // 25% of total\n  const [paymentMethod, setPaymentMethod] = useState('Cash');\n  const [paymentNotes, setPaymentNotes] = useState('');\n  const [imagePreview] = useState<string | null>(designImageUrlFromQuery || null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitSuccess, setSubmitSuccess] = useState(false);\n  const [submitError, setSubmitError] = useState('');\n  const [supplierName, setSupplierName] = useState('');\n\n  // Fetch supplier name\n  useEffect(() => {\n    if (supplier) {\n      const fetchSupplierName = async () => {\n        try {\n          const response = await fetch(`http://localhost:3002/suppliers/${supplier}`);\n          if (response.ok) {\n            const data = await response.json();\n            setSupplierName(data.name || `Supplier ${supplier}`);\n          }\n        } catch (error) {\n          console.error('Error fetching supplier name:', error);\n          setSupplierName(`Supplier ${supplier}`);\n        }\n      };\n\n      fetchSupplierName();\n    }\n  }, [supplier]);\n\n  // State for custom estimate price\n  const [customEstimatePrice, setCustomEstimatePrice] = useState(estimatedPriceFromQuery ? parseFloat(estimatedPriceFromQuery) : 0);\n  const [useCustomEstimate, setUseCustomEstimate] = useState(true); // Default to using custom estimate\n\n  // Fetch existing payments for this order\n  useEffect(() => {\n    if (orderId) {\n      const fetchExistingPayments = async () => {\n        try {\n          // First try to use the advance payment from the query parameter\n          if (advancePaymentFromQuery) {\n            const advanceAmount = parseFloat(advancePaymentFromQuery);\n            console.log('Using advance payment from query:', advanceAmount);\n            setExistingAdvancePayment(advanceAmount);\n            return;\n          }\n\n          // If not available in query, fetch from API\n          console.log('Fetching payments for order:', orderId);\n          const response = await fetch(`http://localhost:3002/supplier-payments/order/${orderId}`);\n          if (response.ok) {\n            const result = await response.json();\n            console.log('Payment data:', result);\n\n            if (result.success && result.summary) {\n              // Use the summary data which includes the total paid amount\n              const totalPaid = parseFloat(result.summary.total_paid || 0);\n              console.log('Total paid from summary:', totalPaid);\n              setExistingAdvancePayment(totalPaid);\n            } else if (result.success && result.data) {\n              // Calculate total from individual payments\n              let totalPaid = 0;\n              if (result.data && result.data.length > 0) {\n                totalPaid = result.data.reduce((sum: number, payment: any) => sum + parseFloat(payment.amount_paid), 0);\n              }\n              console.log('Calculated total paid:', totalPaid);\n              setExistingAdvancePayment(totalPaid);\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching existing payments:', error);\n        }\n      };\n\n      fetchExistingPayments();\n    }\n  }, [orderId, advancePaymentFromQuery]);\n\n  // Calculate total amount and minimum advance payment when making charges change\n  useEffect(() => {\n    if (useCustomEstimate) {\n      // Use the custom estimate price directly\n      // Recalculate total amount based on custom estimate\n      const newTotalAmount = customEstimatePrice * quantity;\n      setTotalAmount(newTotalAmount);\n\n      // Calculate remaining balance\n      const remainingBalance = Math.max(0, newTotalAmount - existingAdvancePayment);\n\n      // Calculate minimum advance payment (25% of remaining balance)\n      // If this is the first payment (existingAdvancePayment === 0), then use 25% of total\n      // Otherwise, use 25% of remaining balance\n      const minPayment = existingAdvancePayment === 0\n        ? newTotalAmount * 0.25  // First payment: 25% of total\n        : remainingBalance * 0.25; // Subsequent payments: 25% of remaining\n\n      setMinAdvancePayment(minPayment);\n\n      // Calculate total advance payment (existing + current)\n      const newTotalAdvancePayment = existingAdvancePayment + currentPaymentAmount;\n      setTotalAdvancePayment(newTotalAdvancePayment);\n\n      // We no longer auto-adjust the payment amount to the minimum\n      // This allows users to enter any amount, even below the minimum\n      // The validation will happen at form submission time\n    } else {\n      // Calculate based on components (gold + making + additional)\n      // Recalculate estimated price based on making charges\n      const newEstimatedPrice = baseEstimatedPrice + makingCharges + additionalMaterialsCharges;\n      setEstimatedPrice(newEstimatedPrice);\n\n      // Recalculate total amount\n      const newTotalAmount = newEstimatedPrice * quantity;\n      setTotalAmount(newTotalAmount);\n\n      // Calculate remaining balance\n      const remainingBalance = Math.max(0, newTotalAmount - existingAdvancePayment);\n\n      // Calculate minimum advance payment (25% of remaining balance)\n      // If this is the first payment (existingAdvancePayment === 0), then use 25% of total\n      // Otherwise, use 25% of remaining balance\n      const minPayment = existingAdvancePayment === 0\n        ? newTotalAmount * 0.25  // First payment: 25% of total\n        : remainingBalance * 0.25; // Subsequent payments: 25% of remaining\n\n      setMinAdvancePayment(minPayment);\n\n      // Calculate total advance payment (existing + current)\n      const newTotalAdvancePayment = existingAdvancePayment + currentPaymentAmount;\n      setTotalAdvancePayment(newTotalAdvancePayment);\n\n      // We no longer auto-adjust the payment amount to the minimum\n      // This allows users to enter any amount, even below the minimum\n      // The validation will happen at form submission time\n    }\n  }, [makingCharges, baseEstimatedPrice, additionalMaterialsCharges, quantity, currentPaymentAmount,\n      customEstimatePrice, useCustomEstimate, existingAdvancePayment]);\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      setIsSubmitting(true);\n\n      // Calculate total advance payment (existing + current)\n      const totalAdvance = existingAdvancePayment + currentPaymentAmount;\n\n      // Calculate remaining balance for display purposes\n      const remainingBalanceAfterPayment = totalAmount - totalAdvance;\n\n      // Calculate the exact remaining balance\n      const exactRemainingBalance = totalAmount - existingAdvancePayment;\n\n      // Check if this payment is close to the remaining balance (within 1% or 100 rupees, whichever is smaller)\n      const tolerance = Math.min(exactRemainingBalance * 0.01, 100);\n      const isCloseToRemainingBalance = Math.abs(currentPaymentAmount - exactRemainingBalance) < tolerance;\n\n      // If this payment is close to the remaining balance, adjust it to exactly match\n      if (isCloseToRemainingBalance) {\n        console.log(`Adjusting payment to exact remaining balance: ${currentPaymentAmount} -> ${exactRemainingBalance}`);\n        // Use the exact remaining balance to avoid floating point issues\n        setCurrentPaymentAmount(exactRemainingBalance);\n      }\n\n      // Validate current payment but allow to proceed with a confirmation\n      if (currentPaymentAmount < minAdvancePayment) {\n        // For first payment, minimum is 25% of total\n        // For subsequent payments, minimum is 25% of remaining balance\n        const paymentType = existingAdvancePayment === 0 ? 'initial advance payment' : 'payment';\n        const baseAmount = existingAdvancePayment === 0 ? 'total amount' : 'remaining balance';\n\n        const confirmProceed = window.confirm(\n          `Warning: This ${paymentType} is below the recommended minimum of ${minAdvancePayment.toFixed(2).toLocaleString()} Rs. (25% of ${baseAmount}).\\n\\n` +\n          `After this payment, the remaining balance will be Rs. ${remainingBalanceAfterPayment.toFixed(2).toLocaleString()}.\\n\\n` +\n          `Do you want to proceed anyway?`\n        );\n\n        if (!confirmProceed) {\n          setIsSubmitting(false);\n          return;\n        }\n      }\n\n      // Recalculate total advance after possible adjustment\n      const finalTotalAdvance = existingAdvancePayment + currentPaymentAmount;\n\n      // Check if this is a final payment (paying off the exact remaining balance)\n      // We already calculated exactRemainingBalance above\n      // Consider it a final payment if it's within 1% of the remaining balance or within 100 rupees\n      const finalPaymentTolerance = Math.min(exactRemainingBalance * 0.01, 100);\n      const isFinalPayment = Math.abs(currentPaymentAmount - exactRemainingBalance) < finalPaymentTolerance;\n\n      // Log detailed payment information for debugging\n      console.log('DEBUG - Payment details:');\n      console.log(`- Total order amount: ${totalAmount}`);\n      console.log(`- Existing advance payment: ${existingAdvancePayment}`);\n      console.log(`- Current payment amount: ${currentPaymentAmount}`);\n      console.log(`- Exact remaining balance: ${exactRemainingBalance}`);\n      console.log(`- Final total advance: ${finalTotalAdvance}`);\n      console.log(`- Is final payment: ${isFinalPayment ? 'Yes' : 'No'}`);\n      console.log(`- Difference: ${Math.abs(currentPaymentAmount - exactRemainingBalance)}`);\n\n      // Prepare the data to be sent\n      const paymentData = {\n        order_id: orderId,\n        making_charges: makingCharges,\n        // Use custom estimate price if enabled, otherwise use calculated price\n        estimated_price: useCustomEstimate ? customEstimatePrice : estimatedPrice,\n        total_amount: totalAmount,\n        amount_paid: currentPaymentAmount, // Only the current payment amount\n        existing_payment: existingAdvancePayment, // Previously paid amount\n        total_advance_payment: finalTotalAdvance, // Total of all payments\n        total_payment_amount: totalAmount,\n        payment_status: isFinalPayment ? 'Completed' : 'Partial',\n        payment_method: paymentMethod,\n        payment_notes: paymentNotes,\n        use_custom_estimate: useCustomEstimate,\n        is_final_payment: isFinalPayment\n      };\n\n      // Send the data to the backend\n      const response = await fetch('http://localhost:3002/supplier-payments/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(paymentData),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || 'Failed to process payment');\n      }\n\n      setSubmitSuccess(true);\n      alert('Payment processed successfully!');\n\n      // Redirect to orders view page\n      router.push('/DashView/orders/view');\n\n    } catch (error) {\n      console.error('Error processing payment:', error);\n      setSubmitError(error instanceof Error ? error.message : 'An unknown error occurred');\n      alert(`Failed to process payment: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n        <h2 className=\"text-2xl font-bold text-center mb-6\">Process Payment for Order #{orderId}</h2>\n\n        <form onSubmit={handleSubmit}>\n          {/* Order Information */}\n          <div className=\"mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n            <h3 className=\"text-lg font-semibold mb-4\">Order Information</h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm text-gray-500\">Category</p>\n                <p className=\"font-medium\">{category}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-gray-500\">Supplier</p>\n                <p className=\"font-medium\">{supplierName}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-gray-500\">Quantity</p>\n                <p className=\"font-medium\">{quantity}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-gray-500\">Gold Karat</p>\n                <p className=\"font-medium\">{selectedKarat}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Price Calculation */}\n          <div className=\"mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n            <h3 className=\"text-lg font-semibold mb-4\">Price Calculation</h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n              {/* Gold Price Per Gram (Locked) */}\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Gold Price (Rs./g)</label>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md bg-gray-100\"\n                  value={goldPricePerGram.toFixed(2)}\n                  disabled\n                />\n              </div>\n\n              {/* Weight in Grams (Locked) */}\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Weight (g)</label>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md bg-gray-100\"\n                  value={weightInGrams.toFixed(3)}\n                  disabled\n                />\n              </div>\n\n              {/* Making Charges (Editable) */}\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Making Charges (Rs.)</label>\n                <input\n                  type=\"number\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  value={makingCharges}\n                  onChange={(e) => {\n                    const newValue = e.target.value === '' ? 0 : parseFloat(e.target.value);\n                    if (!isNaN(newValue)) {\n                      setMakingCharges(newValue);\n                    }\n                  }}\n                  min=\"0\"\n                  step=\"any\"\n                />\n              </div>\n\n              {/* Additional Materials Charges (Locked) */}\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Additional Materials Charges (Rs.)</label>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md bg-gray-100\"\n                  value={additionalMaterialsCharges.toFixed(2)}\n                  disabled\n                />\n              </div>\n            </div>\n\n            {/* Calculated Prices */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4 pt-4 border-t border-gray-200\">\n              {/* Base Estimate (Gold * Weight) */}\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Base Gold Price (per unit)</label>\n                <div className=\"p-2 bg-white border border-gray-300 rounded-md\">\n                  Rs. {baseEstimatedPrice.toFixed(2).toLocaleString()}\n                  <span className=\"text-xs text-gray-500 block\">Gold price × weight</span>\n                </div>\n              </div>\n\n              {/* Custom Estimate Price Toggle */}\n              <div className=\"md:col-span-2 mb-2\">\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"useCustomEstimate\"\n                    checked={useCustomEstimate}\n                    onChange={() => setUseCustomEstimate(!useCustomEstimate)}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor=\"useCustomEstimate\" className=\"text-sm font-medium\">\n                    Use custom estimate price (recommended)\n                  </label>\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Using custom estimate ensures the shop doesn't lose money on the order.\n                </p>\n              </div>\n\n              {/* Custom Estimate Price (editable if useCustomEstimate is true) */}\n              {useCustomEstimate && (\n                <div className=\"md:col-span-2 mb-4\">\n                  <label className=\"block text-sm font-medium mb-1\">Custom Estimate Price (per unit)</label>\n                  <input\n                    type=\"number\"\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    value={customEstimatePrice}\n                    onChange={(e) => {\n                      const newValue = e.target.value === '' ? 0 : parseFloat(e.target.value);\n                      if (!isNaN(newValue)) {\n                        setCustomEstimatePrice(newValue);\n                      }\n                    }}\n                    min=\"0\"\n                    step=\"any\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    This is the final price per unit including all charges and profit margin.\n                  </p>\n                </div>\n              )}\n\n              {/* Calculated Estimate Price (shown if useCustomEstimate is false) */}\n              {!useCustomEstimate && (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Calculated Estimate Price (per unit)</label>\n                  <div className=\"p-2 bg-white border border-gray-300 rounded-md\">\n                    Rs. {estimatedPrice.toFixed(2).toLocaleString()}\n                    <span className=\"text-xs text-gray-500 block\">Gold + making + additional materials</span>\n                  </div>\n                </div>\n              )}\n\n              {/* Breakdown of Charges (always shown) */}\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium mb-1\">Price Breakdown</label>\n                <div className=\"p-2 bg-gray-50 border border-gray-200 rounded-md text-sm\">\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>Gold Cost: Rs. {baseEstimatedPrice.toFixed(2).toLocaleString()}</div>\n                    <div>Making Charges: Rs. {makingCharges.toFixed(2).toLocaleString()}</div>\n                    <div>Additional Materials: Rs. {additionalMaterialsCharges.toFixed(2).toLocaleString()}</div>\n                    <div className=\"font-semibold\">Calculated Total: Rs. {estimatedPrice.toFixed(2).toLocaleString()}</div>\n                    {useCustomEstimate && (\n                      <div className=\"font-semibold text-green-600 md:col-span-2\">\n                        Custom Price: Rs. {customEstimatePrice.toFixed(2).toLocaleString()}\n                        {customEstimatePrice > estimatedPrice ? (\n                          <span className=\"text-xs text-green-600 ml-2\">\n                            (+{((customEstimatePrice - estimatedPrice) / estimatedPrice * 100).toFixed(1)}% profit margin)\n                          </span>\n                        ) : customEstimatePrice < estimatedPrice ? (\n                          <span className=\"text-xs text-red-600 ml-2\">\n                            ({((estimatedPrice - customEstimatePrice) / estimatedPrice * 100).toFixed(1)}% below cost!)\n                          </span>\n                        ) : null}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Total Amount */}\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium mb-1\">Total Order Amount</label>\n                <div className=\"p-2 bg-white border border-gray-300 rounded-md font-semibold text-yellow-700\">\n                  Rs. {totalAmount.toFixed(2).toLocaleString()}\n                  <span className=\"text-xs text-gray-500 block\">\n                    {quantity} {quantity === 1 ? 'unit' : 'units'} × Rs. {estimatedPrice.toFixed(2).toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Supplier Payment Section */}\n          <div id=\"supplier-payment-section\" className=\"mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n            <h3 className=\"text-lg font-semibold mb-4\">Supplier Payment</h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n              {/* Existing Advance Payment */}\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  Existing Advance Payment (Rs.)\n                </label>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md bg-gray-100\"\n                  value={existingAdvancePayment.toFixed(2)}\n                  disabled\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Previously paid amount\n                </p>\n              </div>\n\n              {/* New Payment Amount */}\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  New Payment Amount (Rs.)\n                  <span className=\"text-red-500 ml-1\">*</span>\n                  <span className=\"text-xs text-gray-500 ml-2\">\n                    (Recommended Min: {minAdvancePayment.toFixed(2).toLocaleString()} Rs.)\n                  </span>\n                </label>\n                <div className=\"relative\">\n                  <input\n                    id=\"current-payment-input\"\n                    type=\"text\"\n                    className={`w-full p-2 border ${currentPaymentAmount < minAdvancePayment ? 'border-yellow-300' : 'border-gray-300'} rounded-md`}\n                    value={currentPaymentAmount.toString()}\n                    onChange={(e) => {\n                      // Allow direct typing of any value\n                      let inputValue = e.target.value.replace(/[^\\d.]/g, ''); // Remove non-numeric characters except decimal\n\n                      // Ensure only one decimal point\n                      const decimalCount = (inputValue.match(/\\./g) || []).length;\n                      if (decimalCount > 1) {\n                        const parts = inputValue.split('.');\n                        inputValue = parts[0] + '.' + parts.slice(1).join('');\n                      }\n\n                      // Update React state\n                      const newValue = inputValue === '' ? 0 : parseFloat(inputValue);\n                      if (!isNaN(newValue)) {\n                        setCurrentPaymentAmount(newValue);\n                      }\n                    }}\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-xs bg-blue-500 text-white px-2 py-1 rounded\"\n                    onClick={() => setCurrentPaymentAmount(minAdvancePayment)}\n                    title=\"Set to minimum required amount\"\n                  >\n                    Set Min\n                  </button>\n                </div>\n                {currentPaymentAmount < minAdvancePayment && (\n                  <p className=\"text-yellow-600 text-xs mt-1\">\n                    <span className=\"font-semibold\">Warning:</span> {existingAdvancePayment === 0\n                      ? `Recommended initial payment is at least ${minAdvancePayment.toFixed(2).toLocaleString()} Rs. (25% of total)`\n                      : `Recommended payment is at least ${minAdvancePayment.toFixed(2).toLocaleString()} Rs. (25% of remaining balance)`\n                    }\n                  </p>\n                )}\n              </div>\n\n              {/* Payment Method */}\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Payment Method</label>\n                <select\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  value={paymentMethod}\n                  onChange={(e) => setPaymentMethod(e.target.value)}\n                >\n                  <option value=\"Cash\">Cash</option>\n                  <option value=\"Bank Transfer\">Bank Transfer</option>\n                  <option value=\"Check\">Check</option>\n                  <option value=\"Credit Card\">Credit Card</option>\n                  <option value=\"Other\">Other</option>\n                </select>\n              </div>\n\n              {/* Payment Notes */}\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium mb-1\">Payment Notes</label>\n                <textarea\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  value={paymentNotes}\n                  onChange={(e) => setPaymentNotes(e.target.value)}\n                  rows={2}\n                  placeholder=\"Add any notes about the payment\"\n                />\n              </div>\n            </div>\n\n            {/* Payment Summary */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-4 pt-4 border-t border-gray-200\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Total Order Amount</label>\n                <div className=\"p-2 bg-white border border-gray-300 rounded-md\">\n                  Rs. {totalAmount.toFixed(2).toLocaleString()}\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Total Advance Payment</label>\n                <div className=\"p-2 bg-white border border-gray-300 rounded-md\">\n                  <div className=\"flex justify-between\">\n                    <span>Rs. {(existingAdvancePayment + currentPaymentAmount).toFixed(2).toLocaleString()}</span>\n                    <span className=\"text-xs text-gray-500\">\n                      ({((existingAdvancePayment + currentPaymentAmount) / totalAmount * 100).toFixed(1)}%)\n                    </span>\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Previous: Rs. {existingAdvancePayment.toFixed(2).toLocaleString()} +\n                    New: Rs. {currentPaymentAmount.toFixed(2).toLocaleString()}\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Remaining Balance</label>\n                <div className=\"p-2 bg-white border border-gray-300 rounded-md font-semibold text-red-600\">\n                  <div className=\"flex justify-between\">\n                    <span>Rs. {(totalAmount - (existingAdvancePayment + currentPaymentAmount)).toFixed(2).toLocaleString()}</span>\n                    <span className=\"text-xs text-gray-500\">\n                      ({(100 - ((existingAdvancePayment + currentPaymentAmount) / totalAmount * 100)).toFixed(1)}%)\n                    </span>\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    After this payment\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Design Image */}\n          {imagePreview && (\n            <div className=\"mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n              <h3 className=\"text-lg font-semibold mb-4\">Design Image</h3>\n              <div className=\"flex justify-center\">\n                <div className=\"relative w-64 h-64 border border-gray-200 rounded-lg overflow-hidden\">\n                  <Image\n                    src={imagePreview}\n                    alt=\"Design Preview\"\n                    fill\n                    style={{ objectFit: 'contain' }}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Submit and Cancel Buttons */}\n          <div className=\"flex justify-between\">\n            <button\n              type=\"submit\"\n              className=\"bg-yellow-400 text-black px-8 py-2 rounded-full font-medium\"\n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Processing...' : 'Process Payment'}\n            </button>\n            <button\n              type=\"button\"\n              className=\"bg-gray-200 text-black px-8 py-2 rounded-full font-medium\"\n              onClick={() => window.history.back()}\n              disabled={isSubmitting}\n            >\n              Cancel\n            </button>\n          </div>\n\n          {/* Success/Error Messages */}\n          {submitSuccess && (\n            <div className=\"mt-4 p-3 bg-green-100 text-green-700 rounded-md\">\n              Payment processed successfully!\n            </div>\n          )}\n          {submitError && (\n            <div className=\"mt-4 p-3 bg-red-100 text-red-700 rounded-md\">\n              Error: {submitError}\n            </div>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderPaymentPage;\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAMA,MAAM,mBAAmB;;IACvB,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,uBAAuB;IACvB,MAAM,mBAAmB,aAAa,GAAG,CAAC;IAC1C,MAAM,oBAAoB,aAAa,GAAG,CAAC;IAC3C,MAAM,sBAAsB,aAAa,GAAG,CAAC;IAC7C,MAAM,oBAAoB,aAAa,GAAG,CAAC;IAC3C,MAAM,qBAAqB,aAAa,GAAG,CAAC;IAC5C,MAAM,0BAA0B,aAAa,GAAG,CAAC;IACjD,MAAM,uBAAuB,aAAa,GAAG,CAAC;IAE9C,2BAA2B;IAC3B,MAAM,4BAA4B,aAAa,GAAG,CAAC;IACnD,MAAM,yBAAyB,aAAa,GAAG,CAAC;IAChD,MAAM,sBAAsB,aAAa,GAAG,CAAC;IAC7C,MAAM,yBAAyB,aAAa,GAAG,CAAC;IAChD,MAAM,yBAAyB,aAAa,GAAG,CAAC;IAChD,MAAM,sCAAsC,aAAa,GAAG,CAAC;IAC7D,MAAM,8BAA8B,aAAa,GAAG,CAAC;IACrD,MAAM,0BAA0B,aAAa,GAAG,CAAC;IACjD,MAAM,uBAAuB,aAAa,GAAG,CAAC;IAE9C,sBAAsB;IACtB,MAAM,0BAA0B,aAAa,GAAG,CAAC;IACjD,MAAM,4BAA4B,aAAa,GAAG,CAAC;IACnD,MAAM,yBAAyB,aAAa,GAAG,CAAC;IAChD,MAAM,0BAA0B,aAAa,GAAG,CAAC;IAEjD,wBAAwB;IACxB,MAAM,CAAC,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,oBAAoB;IAC/C,MAAM,CAAC,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,qBAAqB;IACjD,MAAM,CAAC,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,uBAAuB;IACnD,MAAM,CAAC,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,oBAAoB,SAAS,mBAAmB,MAAM;IAClF,MAAM,CAAC,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,4BAA4B,WAAW,6BAA6B;IACxG,MAAM,CAAC,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,0BAA0B;IAC3D,MAAM,CAAC,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,sBAAsB,WAAW,uBAAuB;IACtF,MAAM,CAAC,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,yBAAyB,WAAW,0BAA0B;IAC/F,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,yBAAyB,WAAW,0BAA0B;IACjH,MAAM,CAAC,2BAA2B,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,sCAAsC,WAAW,uCAAuC;IACtI,MAAM,CAAC,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,8BAA8B,WAAW,+BAA+B;IAC9G,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,0BAA0B,WAAW,2BAA2B;IACrH,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,uBAAuB,WAAW,wBAAwB;IAEzG,uBAAuB;IACvB,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,iCAAiC;IACtG,MAAM,CAAC,wBAAwB,0BAA0B,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EACjE,0BAA0B,WAAW,2BAA2B,IAC/D,yBAAyB;IAC5B,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAC3D,0BAA0B,WAAW,2BAA2B,IAC/D,8BAA8B;IACjC,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,eAAe;IAC9E,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB,2BAA2B;IAC1E,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,sBAAsB;IACtB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACR,IAAI,UAAU;gBACZ,MAAM;oEAAoB;wBACxB,IAAI;4BACF,MAAM,WAAW,MAAM,MAAM,CAAC,gCAAgC,EAAE,UAAU;4BAC1E,IAAI,SAAS,EAAE,EAAE;gCACf,MAAM,OAAO,MAAM,SAAS,IAAI;gCAChC,gBAAgB,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE,UAAU;4BACrD;wBACF,EAAE,OAAO,OAAO;4BACd,QAAQ,KAAK,CAAC,iCAAiC;4BAC/C,gBAAgB,CAAC,SAAS,EAAE,UAAU;wBACxC;oBACF;;gBAEA;YACF;QACF;qCAAG;QAAC;KAAS;IAEb,kCAAkC;IAClC,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,0BAA0B,WAAW,2BAA2B;IAC/H,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,OAAO,mCAAmC;IAErG,yCAAyC;IACzC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACR,IAAI,SAAS;gBACX,MAAM;wEAAwB;wBAC5B,IAAI;4BACF,gEAAgE;4BAChE,IAAI,yBAAyB;gCAC3B,MAAM,gBAAgB,WAAW;gCACjC,QAAQ,GAAG,CAAC,qCAAqC;gCACjD,0BAA0B;gCAC1B;4BACF;4BAEA,4CAA4C;4BAC5C,QAAQ,GAAG,CAAC,gCAAgC;4BAC5C,MAAM,WAAW,MAAM,MAAM,CAAC,8CAA8C,EAAE,SAAS;4BACvF,IAAI,SAAS,EAAE,EAAE;gCACf,MAAM,SAAS,MAAM,SAAS,IAAI;gCAClC,QAAQ,GAAG,CAAC,iBAAiB;gCAE7B,IAAI,OAAO,OAAO,IAAI,OAAO,OAAO,EAAE;oCACpC,4DAA4D;oCAC5D,MAAM,YAAY,WAAW,OAAO,OAAO,CAAC,UAAU,IAAI;oCAC1D,QAAQ,GAAG,CAAC,4BAA4B;oCACxC,0BAA0B;gCAC5B,OAAO,IAAI,OAAO,OAAO,IAAI,OAAO,IAAI,EAAE;oCACxC,2CAA2C;oCAC3C,IAAI,YAAY;oCAChB,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,CAAC,MAAM,GAAG,GAAG;wCACzC,YAAY,OAAO,IAAI,CAAC,MAAM;gGAAC,CAAC,KAAa,UAAiB,MAAM,WAAW,QAAQ,WAAW;+FAAG;oCACvG;oCACA,QAAQ,GAAG,CAAC,0BAA0B;oCACtC,0BAA0B;gCAC5B;4BACF;wBACF,EAAE,OAAO,OAAO;4BACd,QAAQ,KAAK,CAAC,qCAAqC;wBACrD;oBACF;;gBAEA;YACF;QACF;qCAAG;QAAC;QAAS;KAAwB;IAErC,gFAAgF;IAChF,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACR,IAAI,mBAAmB;gBACrB,yCAAyC;gBACzC,oDAAoD;gBACpD,MAAM,iBAAiB,sBAAsB;gBAC7C,eAAe;gBAEf,8BAA8B;gBAC9B,MAAM,mBAAmB,KAAK,GAAG,CAAC,GAAG,iBAAiB;gBAEtD,+DAA+D;gBAC/D,qFAAqF;gBACrF,0CAA0C;gBAC1C,MAAM,aAAa,2BAA2B,IAC1C,iBAAiB,KAAM,8BAA8B;mBACrD,mBAAmB,MAAM,wCAAwC;gBAErE,qBAAqB;gBAErB,uDAAuD;gBACvD,MAAM,yBAAyB,yBAAyB;gBACxD,uBAAuB;YAEvB,6DAA6D;YAC7D,gEAAgE;YAChE,qDAAqD;YACvD,OAAO;gBACL,6DAA6D;gBAC7D,sDAAsD;gBACtD,MAAM,oBAAoB,qBAAqB,gBAAgB;gBAC/D,kBAAkB;gBAElB,2BAA2B;gBAC3B,MAAM,iBAAiB,oBAAoB;gBAC3C,eAAe;gBAEf,8BAA8B;gBAC9B,MAAM,mBAAmB,KAAK,GAAG,CAAC,GAAG,iBAAiB;gBAEtD,+DAA+D;gBAC/D,qFAAqF;gBACrF,0CAA0C;gBAC1C,MAAM,aAAa,2BAA2B,IAC1C,iBAAiB,KAAM,8BAA8B;mBACrD,mBAAmB,MAAM,wCAAwC;gBAErE,qBAAqB;gBAErB,uDAAuD;gBACvD,MAAM,yBAAyB,yBAAyB;gBACxD,uBAAuB;YAEvB,6DAA6D;YAC7D,gEAAgE;YAChE,qDAAqD;YACvD;QACF;qCAAG;QAAC;QAAe;QAAoB;QAA4B;QAAU;QACzE;QAAqB;QAAmB;KAAuB;IAEnE,yBAAyB;IACzB,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAEhB,IAAI;YACF,gBAAgB;YAEhB,uDAAuD;YACvD,MAAM,eAAe,yBAAyB;YAE9C,mDAAmD;YACnD,MAAM,+BAA+B,cAAc;YAEnD,wCAAwC;YACxC,MAAM,wBAAwB,cAAc;YAE5C,0GAA0G;YAC1G,MAAM,YAAY,KAAK,GAAG,CAAC,wBAAwB,MAAM;YACzD,MAAM,4BAA4B,KAAK,GAAG,CAAC,uBAAuB,yBAAyB;YAE3F,gFAAgF;YAChF,IAAI,2BAA2B;gBAC7B,QAAQ,GAAG,CAAC,CAAC,8CAA8C,EAAE,qBAAqB,IAAI,EAAE,uBAAuB;gBAC/G,iEAAiE;gBACjE,wBAAwB;YAC1B;YAEA,oEAAoE;YACpE,IAAI,uBAAuB,mBAAmB;gBAC5C,6CAA6C;gBAC7C,+DAA+D;gBAC/D,MAAM,cAAc,2BAA2B,IAAI,4BAA4B;gBAC/E,MAAM,aAAa,2BAA2B,IAAI,iBAAiB;gBAEnE,MAAM,iBAAiB,OAAO,OAAO,CACnC,CAAC,cAAc,EAAE,YAAY,qCAAqC,EAAE,kBAAkB,OAAO,CAAC,GAAG,cAAc,GAAG,aAAa,EAAE,WAAW,MAAM,CAAC,GACnJ,CAAC,sDAAsD,EAAE,6BAA6B,OAAO,CAAC,GAAG,cAAc,GAAG,KAAK,CAAC,GACxH,CAAC,8BAA8B,CAAC;gBAGlC,IAAI,CAAC,gBAAgB;oBACnB,gBAAgB;oBAChB;gBACF;YACF;YAEA,sDAAsD;YACtD,MAAM,oBAAoB,yBAAyB;YAEnD,4EAA4E;YAC5E,oDAAoD;YACpD,8FAA8F;YAC9F,MAAM,wBAAwB,KAAK,GAAG,CAAC,wBAAwB,MAAM;YACrE,MAAM,iBAAiB,KAAK,GAAG,CAAC,uBAAuB,yBAAyB;YAEhF,iDAAiD;YACjD,QAAQ,GAAG,CAAC;YACZ,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,aAAa;YAClD,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,wBAAwB;YACnE,QAAQ,GAAG,CAAC,CAAC,0BAA0B,EAAE,sBAAsB;YAC/D,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,uBAAuB;YACjE,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,mBAAmB;YACzD,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,iBAAiB,QAAQ,MAAM;YAClE,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,KAAK,GAAG,CAAC,uBAAuB,wBAAwB;YAErF,8BAA8B;YAC9B,MAAM,cAAc;gBAClB,UAAU;gBACV,gBAAgB;gBAChB,uEAAuE;gBACvE,iBAAiB,oBAAoB,sBAAsB;gBAC3D,cAAc;gBACd,aAAa;gBACb,kBAAkB;gBAClB,uBAAuB;gBACvB,sBAAsB;gBACtB,gBAAgB,iBAAiB,cAAc;gBAC/C,gBAAgB;gBAChB,eAAe;gBACf,qBAAqB;gBACrB,kBAAkB;YACpB;YAEA,+BAA+B;YAC/B,MAAM,WAAW,MAAM,MAAM,kDAAkD;gBAC7E,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,MAAM,SAAS,MAAM,SAAS,IAAI;YAElC,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,OAAO,OAAO,IAAI;YACpC;YAEA,iBAAiB;YACjB,MAAM;YAEN,+BAA+B;YAC/B,OAAO,IAAI,CAAC;QAEd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YACxD,MAAM,CAAC,2BAA2B,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;QAChG,SAAU;YACR,gBAAgB;QAClB;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAG,WAAU;;wBAAsC;wBAA4B;;;;;;;8BAEhF,6LAAC;oBAAK,UAAU;;sCAEd,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CAA6B;;;;;;8CAE3C,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;;8DACC,6LAAC;oDAAE,WAAU;8DAAwB;;;;;;8DACrC,6LAAC;oDAAE,WAAU;8DAAe;;;;;;;;;;;;sDAG9B,6LAAC;;8DACC,6LAAC;oDAAE,WAAU;8DAAwB;;;;;;8DACrC,6LAAC;oDAAE,WAAU;8DAAe;;;;;;;;;;;;sDAG9B,6LAAC;;8DACC,6LAAC;oDAAE,WAAU;8DAAwB;;;;;;8DACrC,6LAAC;oDAAE,WAAU;8DAAe;;;;;;;;;;;;sDAG9B,6LAAC;;8DACC,6LAAC;oDAAE,WAAU;8DAAwB;;;;;;8DACrC,6LAAC;oDAAE,WAAU;8DAAe;;;;;;;;;;;;;;;;;;;;;;;;sCAMlC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CAA6B;;;;;;8CAE3C,6LAAC;oCAAI,WAAU;;sDAEb,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDACC,MAAK;oDACL,WAAU;oDACV,OAAO,iBAAiB,OAAO,CAAC;oDAChC,QAAQ;;;;;;;;;;;;sDAKZ,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDACC,MAAK;oDACL,WAAU;oDACV,OAAO,cAAc,OAAO,CAAC;oDAC7B,QAAQ;;;;;;;;;;;;sDAKZ,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDACC,MAAK;oDACL,WAAU;oDACV,OAAO;oDACP,UAAU,CAAC;wDACT,MAAM,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK,KAAK,IAAI,WAAW,EAAE,MAAM,CAAC,KAAK;wDACtE,IAAI,CAAC,MAAM,WAAW;4DACpB,iBAAiB;wDACnB;oDACF;oDACA,KAAI;oDACJ,MAAK;;;;;;;;;;;;sDAKT,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDACC,MAAK;oDACL,WAAU;oDACV,OAAO,2BAA2B,OAAO,CAAC;oDAC1C,QAAQ;;;;;;;;;;;;;;;;;;8CAMd,6LAAC;oCAAI,WAAU;;sDAEb,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDAAI,WAAU;;wDAAiD;wDACzD,mBAAmB,OAAO,CAAC,GAAG,cAAc;sEACjD,6LAAC;4DAAK,WAAU;sEAA8B;;;;;;;;;;;;;;;;;;sDAKlD,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAI,WAAU;;sEACb,6LAAC;4DACC,MAAK;4DACL,IAAG;4DACH,SAAS;4DACT,UAAU,IAAM,qBAAqB,CAAC;4DACtC,WAAU;;;;;;sEAEZ,6LAAC;4DAAM,SAAQ;4DAAoB,WAAU;sEAAsB;;;;;;;;;;;;8DAIrE,6LAAC;oDAAE,WAAU;8DAA6B;;;;;;;;;;;;wCAM3C,mCACC,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDACC,MAAK;oDACL,WAAU;oDACV,OAAO;oDACP,UAAU,CAAC;wDACT,MAAM,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK,KAAK,IAAI,WAAW,EAAE,MAAM,CAAC,KAAK;wDACtE,IAAI,CAAC,MAAM,WAAW;4DACpB,uBAAuB;wDACzB;oDACF;oDACA,KAAI;oDACJ,MAAK;;;;;;8DAEP,6LAAC;oDAAE,WAAU;8DAA6B;;;;;;;;;;;;wCAO7C,CAAC,mCACA,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDAAI,WAAU;;wDAAiD;wDACzD,eAAe,OAAO,CAAC,GAAG,cAAc;sEAC7C,6LAAC;4DAAK,WAAU;sEAA8B;;;;;;;;;;;;;;;;;;sDAMpD,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDAAI,WAAU;8DACb,cAAA,6LAAC;wDAAI,WAAU;;0EACb,6LAAC;;oEAAI;oEAAgB,mBAAmB,OAAO,CAAC,GAAG,cAAc;;;;;;;0EACjE,6LAAC;;oEAAI;oEAAqB,cAAc,OAAO,CAAC,GAAG,cAAc;;;;;;;0EACjE,6LAAC;;oEAAI;oEAA2B,2BAA2B,OAAO,CAAC,GAAG,cAAc;;;;;;;0EACpF,6LAAC;gEAAI,WAAU;;oEAAgB;oEAAuB,eAAe,OAAO,CAAC,GAAG,cAAc;;;;;;;4DAC7F,mCACC,6LAAC;gEAAI,WAAU;;oEAA6C;oEACvC,oBAAoB,OAAO,CAAC,GAAG,cAAc;oEAC/D,sBAAsB,+BACrB,6LAAC;wEAAK,WAAU;;4EAA8B;4EACzC,CAAC,CAAC,sBAAsB,cAAc,IAAI,iBAAiB,GAAG,EAAE,OAAO,CAAC;4EAAG;;;;;;+EAE9E,sBAAsB,+BACxB,6LAAC;wEAAK,WAAU;;4EAA4B;4EACxC,CAAC,CAAC,iBAAiB,mBAAmB,IAAI,iBAAiB,GAAG,EAAE,OAAO,CAAC;4EAAG;;;;;;+EAE7E;;;;;;;;;;;;;;;;;;;;;;;;sDAQd,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDAAI,WAAU;;wDAA+E;wDACvF,YAAY,OAAO,CAAC,GAAG,cAAc;sEAC1C,6LAAC;4DAAK,WAAU;;gEACb;gEAAS;gEAAE,aAAa,IAAI,SAAS;gEAAQ;gEAAQ,eAAe,OAAO,CAAC,GAAG,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAQxG,6LAAC;4BAAI,IAAG;4BAA2B,WAAU;;8CAC3C,6LAAC;oCAAG,WAAU;8CAA6B;;;;;;8CAE3C,6LAAC;oCAAI,WAAU;;sDAEb,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAGlD,6LAAC;oDACC,MAAK;oDACL,WAAU;oDACV,OAAO,uBAAuB,OAAO,CAAC;oDACtC,QAAQ;;;;;;8DAEV,6LAAC;oDAAE,WAAU;8DAA6B;;;;;;;;;;;;sDAM5C,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;;wDAAiC;sEAEhD,6LAAC;4DAAK,WAAU;sEAAoB;;;;;;sEACpC,6LAAC;4DAAK,WAAU;;gEAA6B;gEACxB,kBAAkB,OAAO,CAAC,GAAG,cAAc;gEAAG;;;;;;;;;;;;;8DAGrE,6LAAC;oDAAI,WAAU;;sEACb,6LAAC;4DACC,IAAG;4DACH,MAAK;4DACL,WAAW,CAAC,kBAAkB,EAAE,uBAAuB,oBAAoB,sBAAsB,kBAAkB,WAAW,CAAC;4DAC/H,OAAO,qBAAqB,QAAQ;4DACpC,UAAU,CAAC;gEACT,mCAAmC;gEACnC,IAAI,aAAa,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,KAAK,+CAA+C;gEAEvG,gCAAgC;gEAChC,MAAM,eAAe,CAAC,WAAW,KAAK,CAAC,UAAU,EAAE,EAAE,MAAM;gEAC3D,IAAI,eAAe,GAAG;oEACpB,MAAM,QAAQ,WAAW,KAAK,CAAC;oEAC/B,aAAa,KAAK,CAAC,EAAE,GAAG,MAAM,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC;gEACpD;gEAEA,qBAAqB;gEACrB,MAAM,WAAW,eAAe,KAAK,IAAI,WAAW;gEACpD,IAAI,CAAC,MAAM,WAAW;oEACpB,wBAAwB;gEAC1B;4DACF;4DACA,QAAQ;;;;;;sEAEV,6LAAC;4DACC,MAAK;4DACL,WAAU;4DACV,SAAS,IAAM,wBAAwB;4DACvC,OAAM;sEACP;;;;;;;;;;;;gDAIF,uBAAuB,mCACtB,6LAAC;oDAAE,WAAU;;sEACX,6LAAC;4DAAK,WAAU;sEAAgB;;;;;;wDAAe;wDAAE,2BAA2B,IACxE,CAAC,wCAAwC,EAAE,kBAAkB,OAAO,CAAC,GAAG,cAAc,GAAG,mBAAmB,CAAC,GAC7G,CAAC,gCAAgC,EAAE,kBAAkB,OAAO,CAAC,GAAG,cAAc,GAAG,+BAA+B,CAAC;;;;;;;;;;;;;sDAO3H,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDACC,WAAU;oDACV,OAAO;oDACP,UAAU,CAAC,IAAM,iBAAiB,EAAE,MAAM,CAAC,KAAK;;sEAEhD,6LAAC;4DAAO,OAAM;sEAAO;;;;;;sEACrB,6LAAC;4DAAO,OAAM;sEAAgB;;;;;;sEAC9B,6LAAC;4DAAO,OAAM;sEAAQ;;;;;;sEACtB,6LAAC;4DAAO,OAAM;sEAAc;;;;;;sEAC5B,6LAAC;4DAAO,OAAM;sEAAQ;;;;;;;;;;;;;;;;;;sDAK1B,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDACC,WAAU;oDACV,OAAO;oDACP,UAAU,CAAC,IAAM,gBAAgB,EAAE,MAAM,CAAC,KAAK;oDAC/C,MAAM;oDACN,aAAY;;;;;;;;;;;;;;;;;;8CAMlB,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDAAI,WAAU;;wDAAiD;wDACzD,YAAY,OAAO,CAAC,GAAG,cAAc;;;;;;;;;;;;;sDAI9C,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDAAI,WAAU;;sEACb,6LAAC;4DAAI,WAAU;;8EACb,6LAAC;;wEAAK;wEAAK,CAAC,yBAAyB,oBAAoB,EAAE,OAAO,CAAC,GAAG,cAAc;;;;;;;8EACpF,6LAAC;oEAAK,WAAU;;wEAAwB;wEACpC,CAAC,CAAC,yBAAyB,oBAAoB,IAAI,cAAc,GAAG,EAAE,OAAO,CAAC;wEAAG;;;;;;;;;;;;;sEAGvF,6LAAC;4DAAI,WAAU;;gEAA6B;gEAC3B,uBAAuB,OAAO,CAAC,GAAG,cAAc;gEAAG;gEACxD,qBAAqB,OAAO,CAAC,GAAG,cAAc;;;;;;;;;;;;;;;;;;;sDAK9D,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAiC;;;;;;8DAClD,6LAAC;oDAAI,WAAU;;sEACb,6LAAC;4DAAI,WAAU;;8EACb,6LAAC;;wEAAK;wEAAK,CAAC,cAAc,CAAC,yBAAyB,oBAAoB,CAAC,EAAE,OAAO,CAAC,GAAG,cAAc;;;;;;;8EACpG,6LAAC;oEAAK,WAAU;;wEAAwB;wEACpC,CAAC,MAAO,CAAC,yBAAyB,oBAAoB,IAAI,cAAc,GAAI,EAAE,OAAO,CAAC;wEAAG;;;;;;;;;;;;;sEAG/F,6LAAC;4DAAI,WAAU;sEAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBASnD,8BACC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CAA6B;;;;;;8CAC3C,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC,gIAAA,CAAA,UAAK;4CACJ,KAAK;4CACL,KAAI;4CACJ,IAAI;4CACJ,OAAO;gDAAE,WAAW;4CAAU;;;;;;;;;;;;;;;;;;;;;;sCAQxC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCACC,MAAK;oCACL,WAAU;oCACV,UAAU;8CAET,eAAe,kBAAkB;;;;;;8CAEpC,6LAAC;oCACC,MAAK;oCACL,WAAU;oCACV,SAAS,IAAM,OAAO,OAAO,CAAC,IAAI;oCAClC,UAAU;8CACX;;;;;;;;;;;;wBAMF,+BACC,6LAAC;4BAAI,WAAU;sCAAkD;;;;;;wBAIlE,6BACC,6LAAC;4BAAI,WAAU;;gCAA8C;gCACnD;;;;;;;;;;;;;;;;;;;;;;;;AAOtB;GArrBM;;QACiB,qIAAA,CAAA,kBAAe;QACrB,qIAAA,CAAA,YAAS;;;KAFpB;uCAurBS","debugId":null}},
    {"offset": {"line": 1440, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}