{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/JewelleryWEBApp/front_end/src/components/forms/SupplierForm.tsx"],"sourcesContent":["\"use client\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { useState, useEffect } from \"react\";\n\nconst SupplierForm = ({ type, data }: { type: \"create\" | \"update\"; data?: any }) => {\n  // Zod schema for form validation\n  const schema = z.object({\n    name: z.string().min(1, { message: \"Supplier name is required!\" }),\n    address: z.string().min(1, { message: \"Address is required!\" }),\n    contact_no: z.string().min(1, { message: \"Contact number is required!\" }),\n    manufacturing_items: z.string().min(1, { message: \"Manufacturing items are required!\" }),\n    category: z.string().min(1, { message: \"Category is required!\" }),\n    username: z.string().min(4, { message: \"Username must be at least 4 characters!\" }).optional(),\n    password: type === \"create\" ?\n      z.string().min(6, { message: \"Password must be at least 6 characters!\" }).optional() :\n      z.string().optional(),\n  });\n\n  type Inputs = z.infer<typeof schema>;\n  const [name, setName] = useState(data?.name || \"\");\n  const [address, setAddress] = useState(data?.address || \"\");\n  const [contactNo, setContactNo] = useState(data?.contact_no || \"\");\n  const [manufacturingItems, setManufacturingItems] = useState(data?.manufacturing_items || \"\");\n  const [category, setCategory] = useState(data?.category || \"\");\n  const [username, setUsername] = useState(data?.username || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [categories, setCategories] = useState<{category_id: number, category_name: string}[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const { handleSubmit, register, formState: { errors } } = useForm<Inputs>({\n    resolver: zodResolver(schema),\n  });\n\n  // Fetch categories from the database\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:3002/categories');\n        if (response.ok) {\n          const data = await response.json();\n          setCategories(data);\n        } else {\n          console.error('Failed to fetch categories');\n          // Fallback to default categories if fetch fails\n          setCategories([\n            { category_id: 1, category_name: \"Necklace\" },\n            { category_id: 2, category_name: \"Ring\" },\n            { category_id: 3, category_name: \"Earrings\" },\n            { category_id: 4, category_name: \"Bracelet\" },\n            { category_id: 5, category_name: \"Other\" }\n          ]);\n        }\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n        // Fallback to default categories if fetch fails\n        setCategories([\n          { category_id: 1, category_name: \"Necklace\" },\n          { category_id: 2, category_name: \"Ring\" },\n          { category_id: 3, category_name: \"Earrings\" },\n          { category_id: 4, category_name: \"Bracelet\" },\n          { category_id: 5, category_name: \"Other\" }\n        ]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCategories();\n  }, []);\n\n  const onSubmit = handleSubmit(async () => {\n    try {\n      // Create a base supplier data object with required fields\n      const supplierData: any = {\n        name,\n        address,\n        contact_no: contactNo,\n        manufacturing_items: manufacturingItems,\n        category,\n      };\n\n      // Only add username if it's provided and not empty\n      if (username && username.trim() !== '') {\n        supplierData.username = username;\n\n        // Only add password if username is provided and password is not empty\n        if (password && password.trim() !== '') {\n          supplierData.password = password;\n        }\n      }\n\n      // Determine the correct endpoint URL based on the form type\n      const url = type === \"create\"\n        ? \"http://localhost:3002/suppliers/create\"\n        : `http://localhost:3002/suppliers/update/${data?.supplier_id}`;\n\n      console.log('Submitting supplier data to:', url);\n      console.log('Supplier data:', supplierData);\n\n      const response = await fetch(url, {\n        method: type === \"create\" ? \"POST\" : \"PUT\", // POST for create, PUT for update\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(supplierData),\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        alert(type === \"create\" ? \"New Supplier Added successfully!\" : \"Supplier Updated successfully!\");\n      } else {\n        alert(`Error: ${result.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n      alert(\"Failed to process supplier data!\");\n    }\n  });\n\n  return (\n    <form className=\"flex flex-col gap-8\" onSubmit={onSubmit}>\n      <h1 className=\"text-xl font-semibold\">{type === \"create\" ? \"Create a New Supplier\" : \"Update Supplier Details\"}</h1>\n\n      <div className=\"flex justify-between flex-wrap gap-4\">\n        <div className=\"flex flex-col w-full md:w-1/4\">\n          <label className=\"text-xs text-gray-500\">Supplier Name</label>\n          <input\n            className=\"ring-[1.5px] ring-gray-300 p-2 rounded-md text-sm w-full\"\n            {...register(\"name\")}\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n          {errors.name && <p className=\"text-xs text-red-400\">{errors.name.message}</p>}\n        </div>\n\n        <div className=\"flex flex-col w-full md:w-1/4\">\n          <label className=\"text-xs text-gray-500\">Address</label>\n          <input\n            className=\"ring-[1.5px] ring-gray-300 p-2 rounded-md text-sm w-full\"\n            {...register(\"address\")}\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n          />\n          {errors.address && <p className=\"text-xs text-red-400\">{errors.address.message}</p>}\n        </div>\n\n        <div className=\"flex flex-col w-full md:w-1/4\">\n          <label className=\"text-xs text-gray-500\">Contact Number</label>\n          <input\n            className=\"ring-[1.5px] ring-gray-300 p-2 rounded-md text-sm w-full\"\n            {...register(\"contact_no\")}\n            value={contactNo}\n            onChange={(e) => setContactNo(e.target.value)}\n          />\n          {errors.contact_no && <p className=\"text-xs text-red-400\">{errors.contact_no.message}</p>}\n        </div>\n      </div>\n\n      <div className=\"flex justify-between flex-wrap gap-4\">\n        <div className=\"flex flex-col w-full md:w-1/4\">\n          <label className=\"text-xs text-gray-500\">Manufacturing Items</label>\n          <input\n            className=\"ring-[1.5px] ring-gray-300 p-2 rounded-md text-sm w-full\"\n            {...register(\"manufacturing_items\")}\n            value={manufacturingItems}\n            onChange={(e) => setManufacturingItems(e.target.value)}\n          />\n          {errors.manufacturing_items && <p className=\"text-xs text-red-400\">{errors.manufacturing_items.message}</p>}\n        </div>\n\n        <div className=\"flex flex-col w-full md:w-1/4\">\n          <label className=\"text-xs text-gray-500\">Category</label>\n          <select\n            className=\"ring-[1.5px] ring-gray-300 p-2 rounded-md text-sm w-full\"\n            {...register(\"category\")}\n            value={category}\n            onChange={(e) => setCategory(e.target.value)}\n          >\n            <option value=\"\">Select Category</option>\n            {categories.map((cat) => (\n              <option key={cat.category_id} value={cat.category_name}>\n                {cat.category_name}\n              </option>\n            ))}\n          </select>\n          {errors.category && <p className=\"text-xs text-red-400\">{errors.category.message}</p>}\n        </div>\n      </div>\n\n      <div className=\"flex justify-between flex-wrap gap-4\">\n        <div className=\"flex flex-col w-full md:w-1/4\">\n          <label className=\"text-xs text-gray-500\">Username (for supplier portal, optional)</label>\n          <input\n            className=\"ring-[1.5px] ring-gray-300 p-2 rounded-md text-sm w-full\"\n            {...register(\"username\")}\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          {errors.username && <p className=\"text-xs text-red-400\">{errors.username.message}</p>}\n        </div>\n\n        <div className=\"flex flex-col w-full md:w-1/4\">\n          <label className=\"text-xs text-gray-500\">{type === \"create\" ? \"Password (optional)\" : \"New Password (leave empty to keep current)\"}</label>\n          <input\n            type=\"password\"\n            className=\"ring-[1.5px] ring-gray-300 p-2 rounded-md text-sm w-full\"\n            {...register(\"password\")}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          {errors.password && <p className=\"text-xs text-red-400\">{errors.password.message}</p>}\n        </div>\n      </div>\n\n      <div className=\"mt-4\">\n        <button\n          type=\"submit\"\n          className=\"bg-blue-500 text-white py-2 px-4 rounded-md\"\n        >\n          {type === \"create\" ? \"Create\" : \"Update\"} Supplier\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default SupplierForm;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}