"use client";

import React, { useState, useEffect } from 'react';
import { BarChart, Filter, Download, RefreshCw } from 'lucide-react';

interface Sale {
  sale_id: number;
  customer_name: string;
  total_amount: number | string; // Handle both number and string formats
  payment_method: string;
  sale_date: string;
  invoice_number: string;
  user_id: number | null;
  cashier_first_name?: string;
  cashier_last_name?: string;
  branch_id: number | null;
  branch_name?: string;
}

interface Branch {
  branch_id: number;
  branch_name: string;
}

interface User {
  user_id: number;
  first_name: string;
  last_name: string;
}

const SalesReportPage: React.FC = () => {
  const [sales, setSales] = useState<Sale[]>([]);
  const [filteredSales, setFilteredSales] = useState<Sale[]>([]);
  const [branches, setBranches] = useState<Branch[]>([]);
  const [cashiers, setCashiers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Filter states
  const [selectedBranch, setSelectedBranch] = useState<number | null>(null);
  const [selectedCashier, setSelectedCashier] = useState<number | null>(null);
  const [startDate, setStartDate] = useState<string>('');
  const [endDate, setEndDate] = useState<string>('');
  
  // Summary statistics
  const [totalSales, setTotalSales] = useState(0);
  const [totalAmount, setTotalAmount] = useState(0);
  const [branchSummary, setBranchSummary] = useState<{[key: string]: {count: number, amount: number}}>({});
  const [cashierSummary, setCashierSummary] = useState<{[key: string]: {count: number, amount: number}}>({});

  // Fetch sales data
  useEffect(() => {
    const fetchSales = async () => {
      try {
        setLoading(true);
        const response = await fetch('http://localhost:3002/sales');
        if (!response.ok) {
          throw new Error('Failed to fetch sales data');
        }
        
        const data = await response.json();
        console.log('Sales data:', data);
        
        setSales(data);
        setFilteredSales(data);
        
        // Extract unique branches
        const uniqueBranches = Array.from(
          new Set(data.map((sale: Sale) => sale.branch_id))
        ).map(branchId => {
          const branch = data.find((sale: Sale) => sale.branch_id === branchId);
          return {
            branch_id: Number(branchId),
            branch_name: branch?.branch_name || `Branch ${branchId}`
          };
        });
        
        setBranches(uniqueBranches as Branch[]);
        
        // Extract unique cashiers
        const uniqueCashiers = Array.from(
          new Set(data.map((sale: Sale) => sale.user_id).filter((id: number | null | undefined) => id !== null && id !== undefined))
        ).map(userId => {
          const user = data.find((sale: Sale) => sale.user_id === userId);
          return {
            user_id: Number(userId),
            first_name: user?.cashier_first_name || '',
            last_name: user?.cashier_last_name || ''
          };
        });
        
        setCashiers(uniqueCashiers as User[]);
        
        // Calculate summary statistics
        calculateSummaryStatistics(data);
        
      } catch (error) {
        console.error('Error fetching sales:', error);
        setError('Failed to load sales data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };
    
    fetchSales();
  }, []);
  
  // Apply filters when filter values change
  useEffect(() => {
    applyFilters();
  }, [selectedBranch, selectedCashier, startDate, endDate, sales]);
  
  // Calculate summary statistics
  const calculateSummaryStatistics = (salesData: Sale[]) => {
    // Total sales count
    setTotalSales(salesData.length);
    
    // Total amount - ensure we're working with numbers
    const total = salesData.reduce((sum, sale) => {
      // Convert total_amount to number if it's a string
      const amount = typeof sale.total_amount === 'string' 
        ? parseFloat(sale.total_amount) 
        : sale.total_amount;
      
      return sum + (isNaN(amount) ? 0 : amount);
    }, 0);
    
    setTotalAmount(total);
    
    // Branch summary
    const branchStats: {[key: string]: {count: number, amount: number}} = {};
    salesData.forEach(sale => {
      const branchName = sale.branch_name || `Branch ${sale.branch_id}` || 'Unknown Branch';
      if (!branchStats[branchName]) {
        branchStats[branchName] = { count: 0, amount: 0 };
      }
      
      // Convert total_amount to number if it's a string
      const amount = typeof sale.total_amount === 'string' 
        ? parseFloat(sale.total_amount) 
        : sale.total_amount;
        
      branchStats[branchName].count += 1;
      branchStats[branchName].amount += isNaN(amount) ? 0 : amount;
    });
    setBranchSummary(branchStats);
    
    // Cashier summary
    const cashierStats: {[key: string]: {count: number, amount: number}} = {};
    salesData.forEach(sale => {
      if (!sale.user_id) return;
      
      const cashierName = `${sale.cashier_first_name || ''} ${sale.cashier_last_name || ''}`.trim() || `User ${sale.user_id}`;
      if (!cashierStats[cashierName]) {
        cashierStats[cashierName] = { count: 0, amount: 0 };
      }
      
      // Convert total_amount to number if it's a string
      const amount = typeof sale.total_amount === 'string' 
        ? parseFloat(sale.total_amount) 
        : sale.total_amount;
        
      cashierStats[cashierName].count += 1;
      cashierStats[cashierName].amount += isNaN(amount) ? 0 : amount;
    });
    setCashierSummary(cashierStats);
  };
  
  // Apply filters to sales data
  const applyFilters = () => {
    let filtered = [...sales];
    
    // Filter by branch
    if (selectedBranch) {
      filtered = filtered.filter(sale => sale.branch_id === selectedBranch);
    }
    
    // Filter by cashier
    if (selectedCashier) {
      filtered = filtered.filter(sale => sale.user_id === selectedCashier);
    }
    
    // Filter by date range
    if (startDate) {
      const startDateTime = new Date(startDate).setHours(0, 0, 0, 0);
      filtered = filtered.filter(sale => {
        const saleDate = new Date(sale.sale_date).getTime();
        return saleDate >= startDateTime;
      });
    }
    
    if (endDate) {
      const endDateTime = new Date(endDate).setHours(23, 59, 59, 999);
      filtered = filtered.filter(sale => {
        const saleDate = new Date(sale.sale_date).getTime();
        return saleDate <= endDateTime;
      });
    }
    
    setFilteredSales(filtered);
    calculateSummaryStatistics(filtered);
  };
  
  // Reset all filters
  const resetFilters = () => {
    setSelectedBranch(null);
    setSelectedCashier(null);
    setStartDate('');
    setEndDate('');
  };
  
  // Format currency
  const formatCurrency = (amount: number | string) => {
    // Convert to number if it's a string
    const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
    
    if (isNaN(numericAmount)) {
      console.warn('Invalid amount for formatting:', amount);
      return 'LKR 0.00';
    }
    
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'LKR',
      maximumFractionDigits: 2
    }).format(numericAmount).replace('LKR', 'LKR ');
  };
  
  // Format date
  const formatDate = (dateString: string) => {
    const options: Intl.DateTimeFormatOptions = { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    return new Date(dateString).toLocaleDateString('en-US', options);
  };
  
  // Export to CSV
  const exportToCSV = () => {
    // Create CSV header
    const headers = [
      'Sale ID',
      'Invoice Number',
      'Customer Name',
      'Total Amount',
      'Payment Method',
      'Sale Date',
      'Branch',
      'Cashier'
    ].join(',');
    
    // Create CSV rows
    const rows = filteredSales.map(sale => {
      // Convert total_amount to number if it's a string
      const amount = typeof sale.total_amount === 'string' 
        ? parseFloat(sale.total_amount) 
        : sale.total_amount;
      
      return [
        sale.sale_id,
        sale.invoice_number,
        `"${sale.customer_name}"`, // Wrap in quotes to handle commas in names
        isNaN(amount) ? 0 : amount,
        sale.payment_method,
        formatDate(sale.sale_date),
        `"${sale.branch_name || `Branch ${sale.branch_id}` || 'Unknown Branch'}"`,
        `"${(sale.cashier_first_name || '') + ' ' + (sale.cashier_last_name || '')}".trim() || "User ${sale.user_id || 'Unknown'}"`
      ].join(',');
    });
    
    // Combine header and rows
    const csv = [headers, ...rows].join('\n');
    
    // Create download link
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `sales_report_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (loading) return (
    <div className="flex items-center justify-center h-64">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-yellow-500"></div>
    </div>
  );

  if (error) return (
    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
      {error}
    </div>
  );

  return (
    <div className="p-6">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-800">Sales Report</h1>
        <p className="text-gray-600 mt-1">View and analyze sales data across branches and cashiers</p>
      </div>
      
      {/* Filters */}
      <div className="bg-white p-4 rounded-lg shadow-md mb-6">
        <div className="flex flex-col md:flex-row items-center justify-between mb-4">
          <h2 className="text-lg font-semibold flex items-center">
            <Filter size={18} className="mr-2" />
            Filters
          </h2>
          <div className="flex space-x-2 mt-2 md:mt-0">
            <button 
              onClick={resetFilters}
              className="flex items-center px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm"
            >
              <RefreshCw size={14} className="mr-1" />
              Reset
            </button>
            <button 
              onClick={exportToCSV}
              className="flex items-center px-3 py-1 bg-green-100 hover:bg-green-200 text-green-800 rounded text-sm"
            >
              <Download size={14} className="mr-1" />
              Export CSV
            </button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Branch</label>
            <select 
              className="w-full p-2 border border-gray-300 rounded-md"
              value={selectedBranch || ''}
              onChange={(e) => setSelectedBranch(e.target.value ? Number(e.target.value) : null)}
            >
              <option value="">All Branches</option>
              {branches.map((branch) => (
                <option key={branch.branch_id} value={branch.branch_id}>
                  {branch.branch_name || `Branch ${branch.branch_id}`}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Cashier</label>
            <select 
              className="w-full p-2 border border-gray-300 rounded-md"
              value={selectedCashier || ''}
              onChange={(e) => setSelectedCashier(e.target.value ? Number(e.target.value) : null)}
            >
              <option value="">All Cashiers</option>
              {cashiers.map((cashier) => (
                <option key={cashier.user_id} value={cashier.user_id}>
                  {`${cashier.first_name} ${cashier.last_name}`.trim() || `User ${cashier.user_id}`}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
            <input 
              type="date" 
              className="w-full p-2 border border-gray-300 rounded-md"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
            <input 
              type="date" 
              className="w-full p-2 border border-gray-300 rounded-md"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
          </div>
        </div>
      </div>
      
      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <div className="bg-white p-6 rounded-lg shadow-md border-l-4 border-blue-500">
          <h3 className="text-gray-500 text-sm font-medium">Total Sales</h3>
          <p className="text-2xl font-bold mt-1">{totalSales}</p>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-md border-l-4 border-green-500">
          <h3 className="text-gray-500 text-sm font-medium">Total Revenue</h3>
          <p className="text-2xl font-bold mt-1">{formatCurrency(totalAmount)}</p>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-md border-l-4 border-purple-500">
          <h3 className="text-gray-500 text-sm font-medium">Average Sale Value</h3>
          <p className="text-2xl font-bold mt-1">
            {totalSales > 0 ? formatCurrency(totalAmount / totalSales) : formatCurrency(0)}
          </p>
        </div>
      </div>
      
      {/* Branch and Cashier Summary */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Branch Summary */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold mb-4 flex items-center">
            <BarChart size={18} className="mr-2" />
            Sales by Branch
          </h2>
          
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead>
                <tr>
                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Branch</th>
                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sales Count</th>
                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Amount</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {Object.entries(branchSummary).map(([branchName, stats]) => (
                  <tr key={branchName}>
                    <td className="px-4 py-2">{branchName}</td>
                    <td className="px-4 py-2">{stats.count}</td>
                    <td className="px-4 py-2">{formatCurrency(stats.amount)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        
        {/* Cashier Summary */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold mb-4 flex items-center">
            <BarChart size={18} className="mr-2" />
            Sales by Cashier
          </h2>
          
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead>
                <tr>
                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cashier</th>
                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sales Count</th>
                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Amount</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {Object.entries(cashierSummary).map(([cashierName, stats]) => (
                  <tr key={cashierName}>
                    <td className="px-4 py-2">{cashierName}</td>
                    <td className="px-4 py-2">{stats.count}</td>
                    <td className="px-4 py-2">{formatCurrency(stats.amount)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      
      {/* Sales Table */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-lg font-semibold mb-4">Sales Transactions</h2>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sale ID</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Invoice</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Payment</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Branch</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cashier</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredSales.map((sale) => (
                <tr key={sale.sale_id} className="hover:bg-gray-50">
                  <td className="px-4 py-2">{sale.sale_id}</td>
                  <td className="px-4 py-2">{sale.invoice_number}</td>
                  <td className="px-4 py-2">{sale.customer_name}</td>
                  <td className="px-4 py-2">{formatCurrency(sale.total_amount)}</td>
                  <td className="px-4 py-2">{sale.payment_method}</td>
                  <td className="px-4 py-2">{formatDate(sale.sale_date)}</td>
                  <td className="px-4 py-2">{sale.branch_name || `Branch ${sale.branch_id}` || 'Unknown'}</td>
                  <td className="px-4 py-2">
                    {`${sale.cashier_first_name || ''} ${sale.cashier_last_name || ''}`.trim() || (sale.user_id ? `User ${sale.user_id}` : 'N/A')}
                  </td>
                </tr>
              ))}
              
              {filteredSales.length === 0 && (
                <tr>
                  <td colSpan={8} className="px-4 py-4 text-center text-gray-500">
                    No sales found matching the current filters.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default SalesReportPage;
